<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux</title>
      <link href="/2021/08/04/Linux/Linux/"/>
      <url>/2021/08/04/Linux/Linux/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="1-Linux简介"><a href="#1-Linux简介" class="headerlink" title="1.Linux简介"></a>1.Linux简介</h2><p>Linux 内核最初只是由芬兰人林纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的。</p><p>Linux 是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX 和 UNIX 的多用户、多任务、支持多线程和多 CPU 的操作系统。</p><p>Linux 能运行主要的 UNIX 工具软件、应用程序和网络协议。它支持 32 位和 64 位硬件。Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p><hr><h3 id="1-1Linux-的发行版"><a href="#1-1Linux-的发行版" class="headerlink" title="1.1Linux 的发行版"></a>1.1Linux 的发行版</h3><p>Linux 的发行版说简单点就是将 Linux 内核与应用软件做一个打包。</p><p><img src="C:\Users\胡海\Desktop\Linux\Linux内核.png"></p><p>目前市面上较知名的发行版有：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、SolusOS 等。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/wKioL1bvVPWAu7hqAAEyirVUn3c446.jpg-wh_651x-s_3197843091.jpg" alt="img"></p><hr><h3 id="1-2Linux-应用领域"><a href="#1-2Linux-应用领域" class="headerlink" title="1.2Linux 应用领域"></a>1.2Linux 应用领域</h3><p>今天各种场合都有使用各种 Linux 发行版，从嵌入式设备到超级计算机，并且在服务器领域确定了地位，通常服务器使用 LAMP（Linux + Apache + MySQL + PHP）或 LNMP（Linux + Nginx+ MySQL + PHP）组合。</p><p>目前 Linux 不仅在家庭与企业中使用，并且在政府中也很受欢迎。</p><ul><li>巴西联邦政府由于支持 Linux 而世界闻名。</li><li>有新闻报道俄罗斯军队自己制造的 Linux 发布版的，做为 G.H.ost 项目已经取得成果。</li><li>印度的 Kerala 联邦计划在向全联邦的高中推广使用 Linux。</li><li>中华人民共和国为取得技术独立，在龙芯处理器中排他性地使用 Linux。</li><li>在西班牙的一些地区开发了自己的 Linux 发布版，并且在政府与教育领域广泛使用，如 Extremadura 地区的 gnuLinEx 和 Andalusia 地区的 Guadalinex。</li><li>葡萄牙同样使用自己的 Linux 发布版 Caixa Mágica，用于 Magalh?es 笔记本电脑和 e-escola 政府软件。</li><li>法国和德国同样开始逐步采用 Linux。</li></ul><hr><h3 id="1-3Linux-vs-Windows"><a href="#1-3Linux-vs-Windows" class="headerlink" title="1.3Linux vs Windows"></a>1.3Linux vs Windows</h3><p>目前国内 Linux 更多的是应用于服务器上，而桌面操作系统更多使用的是 Windows。主要区别如下</p><table><thead><tr><th align="left">比较</th><th align="left">Windows</th><th align="left">Linux</th></tr></thead><tbody><tr><td align="left">界面</td><td align="left">界面统一，外壳程序固定所有 Windows 程序菜单几乎一致，快捷键也几乎相同</td><td align="left">图形界面风格依发布版不同而不同，可能互不兼容。GNU/Linux 的终端机是从 UNIX 传承下来，基本命令和操作方法也几乎一致。</td></tr><tr><td align="left">驱动程序</td><td align="left">驱动程序丰富，版本更新频繁。默认安装程序里面一般包含有该版本发布时流行的硬件驱动程序，之后所出的新硬件驱动依赖于硬件厂商提供。对于一些老硬件，如果没有了原配的驱动有时很难支持。另外，有时硬件厂商未提供所需版本的 Windows 下的驱动，也会比较头痛。</td><td align="left">由志愿者开发，由 Linux 核心开发小组发布，很多硬件厂商基于版权考虑并未提供驱动程序，尽管多数无需手动安装，但是涉及安装则相对复杂，使得新用户面对驱动程序问题（是否存在和安装方法）会一筹莫展。但是在开源开发模式下，许多老硬件尽管在Windows下很难支持的也容易找到驱动。HP、Intel、AMD 等硬件厂商逐步不同程度支持开源驱动，问题正在得到缓解。</td></tr><tr><td align="left">使用</td><td align="left">使用比较简单，容易入门。图形化界面对没有计算机背景知识的用户使用十分有利。</td><td align="left">图形界面使用简单，容易入门。文字界面，需要学习才能掌握。</td></tr><tr><td align="left">学习</td><td align="left">系统构造复杂、变化频繁，且知识、技能淘汰快，深入学习困难。</td><td align="left">系统构造简单、稳定，且知识、技能传承性好，深入学习相对容易。</td></tr><tr><td align="left">软件</td><td align="left">每一种特定功能可能都需要商业软件的支持，需要购买相应的授权。</td><td align="left">大部分软件都可以自由获取，同样功能的软件选择较少。</td></tr></tbody></table><h2 id="2-Linux内容"><a href="#2-Linux内容" class="headerlink" title="2.Linux内容"></a>2.Linux内容</h2><p>Linux是一类Unix计算机操作系统的统称。Linux操作系统的内核的名字也是“Linux”。Linux操作系统也是自由软件和开放源代码发展中最著名的例子。严格来讲，Linux这个词本身只表示Linux内核，但在实际上人们已经习惯了用Linux来形容整个基于Linux内核，并且使用 GNU 工程各种工具和数据库的操作系统。Linux得名于计算机业余爱好者Linus Torvalds。<br>一般可以认为，Linux是一套自由使用（一般可以免费使用）和自由传播的类Unix操作系统。这个系统是由世界各地成千上万的程序员设计和实现的。其目的是建立不受任何商品化软件的版权制约、全世界都能自由使用的Unix兼容产品。实际上，linux仅仅是linux操作系统中的核心（kernel）。</p><h2 id="3-安装VM和Centos"><a href="#3-安装VM和Centos" class="headerlink" title="3.安装VM和Centos"></a>3.安装VM和Centos</h2><h3 id="3-1VMware安装"><a href="#3-1VMware安装" class="headerlink" title="3.1VMware安装"></a>3.1VMware安装</h3><h3 id="3-2Centos安装"><a href="#3-2Centos安装" class="headerlink" title="3.2Centos安装"></a>3.2Centos安装</h3><h2 id="4-Linux目录结构"><a href="#4-Linux目录结构" class="headerlink" title="4.Linux目录结构"></a>4.Linux目录结构</h2><h3 id="4-1基本介绍"><a href="#4-1基本介绍" class="headerlink" title="4.1基本介绍"></a>4.1基本介绍</h3><p>1）Linux的文件系统是采用层级式的树状目录结构，在结构中的最上层是根目录“/”，然后再此目录下再创建其他的目录。</p><p>2）经典名言:在Linux世界中，一切皆文件(!!).</p><p>3）Linux 系统目录结构：</p><p>登录系统后，在当前命令窗口下输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ls / <br></code></pre></td></tr></table></figure><p>你会看到，如下图：</p><p><img src="C:\Users\胡海\Desktop\Linux\Linux目录.png"></p><p>树状目录结构：</p><p><img src="C:\Users\胡海\Desktop\Linux\Linux根目录.png"></p><h3 id="4-2以下是对这些目录的解释："><a href="#4-2以下是对这些目录的解释：" class="headerlink" title="4.2以下是对这些目录的解释："></a>4.2以下是对这些目录的解释：</h3><ul><li><p><strong>/bin</strong>：<br>bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。</p></li><li><p><strong>/boot：</strong><br>这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</p></li><li><p><strong>/dev ：</strong><br>dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</p></li><li><p><strong>/etc：</strong><br>etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p></li><li><p><strong>/home</strong>：<br>用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。</p></li><li><p><strong>/lib</strong>：<br>lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</p></li><li><p><strong>/lost+found</strong>：<br>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p></li><li><p><strong>/media</strong>：<br>linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。</p></li><li><p><strong>/mnt</strong>：<br>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 /mnt/ 上，然后进入该目录就可以查看光驱里的内容了。</p></li><li><p><strong>/opt</strong>：<br>opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p></li><li><p><strong>/proc</strong>：<br>proc 是 Processes(进程) 的缩写，/proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<br>这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all<br></code></pre></td></tr></table></figure></li><li><p><strong>/root</strong>：<br>该目录为系统管理员，也称作超级权限者的用户主目录。</p></li><li><p><strong>/sbin</strong>：<br>s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。</p></li><li><p><strong>/selinux</strong>：<br> 这个目录是 Redhat/CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p></li><li><p><strong>/srv</strong>：<br> 该目录存放一些服务启动之后需要提取的数据。</p></li><li><p><strong>/sys</strong>：</p><p>这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。</p><p>sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。</p><p>该文件系统是内核设备树的一个直观反映。</p><p>当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</p></li><li><p><strong>/tmp</strong>：<br>tmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。</p></li><li><p><strong>/usr</strong>：<br> usr 是 unix shared resources(共享资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。</p></li><li><p><strong>/usr/bin：</strong><br>系统用户使用的应用程序。</p></li><li><p><strong>/usr/sbin：</strong><br>超级用户使用的比较高级的管理程序和系统守护程序。</p></li><li><p><strong>/usr/src：</strong><br>内核源代码默认的放置目录。</p></li><li><p><strong>/var</strong>：<br>var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p></li><li><p><strong>/run</strong>：<br>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。</p></li></ul><p>在 Linux 系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。</p><p><strong>/etc</strong>： 上边也提到了，这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动。</p><p><strong>/bin, /sbin, /usr/bin, /usr/sbin</strong>: 这是系统预设的执行文件的放置目录，比如 ls 就是在 /bin/ls 目录下的。</p><p>值得提出的是，/bin, /usr/bin 是给系统用户使用的指令（除root外的通用户），而/sbin, /usr/sbin 则是给 root 使用的指令。</p><p><strong>/var</strong>： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在 /var/log 目录下，另外 mail 的预设放置也是在这里</p><h2 id="5-Linux远程登陆"><a href="#5-Linux远程登陆" class="headerlink" title="5.Linux远程登陆"></a>5.Linux远程登陆</h2><h3 id="5-1为什么要远程登陆Linux"><a href="#5-1为什么要远程登陆Linux" class="headerlink" title="5.1为什么要远程登陆Linux"></a>5.1为什么要远程登陆Linux</h3><ol><li>Linux服务器是开发小组共享的</li><li>正式上线的项目是运行在公网上的</li><li>因此程序员需要远程登陆到Linux进行项目管理或开发</li><li>远程登陆客户端有Xshell6，Xftp6，其他的工具大同小异</li></ol><h3 id="5-2-下载-安装-配置-使用："><a href="#5-2-下载-安装-配置-使用：" class="headerlink" title="5.2.下载-安装-配置-使用："></a>5.2.下载-安装-配置-使用：</h3><p>下载 free-for-home-school版本</p><p>地址：<a href="https://www.netsarang.com/en/free-for-home-school/">https://www.netsarang.com/en/free-for-home-school/</a></p><h3 id="5-3远程登录Linux-Xshell6"><a href="#5-3远程登录Linux-Xshell6" class="headerlink" title="5.3远程登录Linux-Xshell6"></a>5.3远程登录Linux-Xshell6</h3><h4 id="5-3-1介绍"><a href="#5-3-1介绍" class="headerlink" title="5.3.1介绍"></a>5.3.1介绍</h4><ol><li>说明：Xshell是目前最好的远程登录到Linux操作的软件，速度流畅且解决中文乱码。</li><li>Xshell是一个强大的安全终端模拟软件。</li><li>Xshell可以在Windows界面下用来访问不同系统下的服务器，从而比较好的达到远程控制终端的目的。</li></ol><h3 id="5-3-2Xshell安装配置和使用"><a href="#5-3-2Xshell安装配置和使用" class="headerlink" title="5.3.2Xshell安装配置和使用"></a>5.3.2Xshell安装配置和使用</h3><p><a href="https://jingyan.baidu.com/article/7908e85cd7f3feaf491ad256.html">Xshell安装步骤</a></p><h3 id="5-4远程上传下载文件-Xftp6"><a href="#5-4远程上传下载文件-Xftp6" class="headerlink" title="5.4远程上传下载文件-Xftp6"></a>5.4远程上传下载文件-Xftp6</h3><h4 id="5-4-1介绍"><a href="#5-4-1介绍" class="headerlink" title="5.4.1介绍"></a>5.4.1介绍</h4><p>是一个基于Windows平台的功能强大的SFTP，FTP文件传输软件。使用了Xftp以后，Windows用户能安全地在Linux和WindowsPC之间传输文件。</p><h3 id="5-4-2Xftp6安装配置和使用"><a href="#5-4-2Xftp6安装配置和使用" class="headerlink" title="5.4.2Xftp6安装配置和使用"></a>5.4.2Xftp6安装配置和使用</h3><h2 id="6-Linux中vi和vim编辑器"><a href="#6-Linux中vi和vim编辑器" class="headerlink" title="6.Linux中vi和vim编辑器"></a>6.Linux中vi和vim编辑器</h2><h3 id="6-1基本介绍"><a href="#6-1基本介绍" class="headerlink" title="6.1基本介绍"></a>6.1基本介绍</h3><p>Linux系统会内置vi文本编辑器</p><p>vim具有程序编辑的功能，可以主动的以字体颜色色辨别语法的正确性，方便程序设计。代码补全。</p><h3 id="6-2vi和vim常用的三种模式"><a href="#6-2vi和vim常用的三种模式" class="headerlink" title="6.2vi和vim常用的三种模式"></a>6.2vi和vim常用的三种模式</h3><h4 id="6-2-1正常模式"><a href="#6-2-1正常模式" class="headerlink" title="6.2.1正常模式"></a>6.2.1正常模式</h4><p>以vim打开一个档案就直接进入一般模式了。在这个模式中，你可以使用【上下左右】按键来移动光标，你可以使用【删除字符】或【删除整行】来处理文档内容，也可以使用【复制，粘贴】来处理数据。</p><h4 id="6-2-2插入模式"><a href="#6-2-2插入模式" class="headerlink" title="6.2.2插入模式"></a>6.2.2插入模式</h4><p>按下i,I,o,O,a,A,r,R等字母之后才会进入编辑模式，一般来说按i即可。</p><h4 id="6-2-3命令行模式"><a href="#6-2-3命令行模式" class="headerlink" title="6.2.3命令行模式"></a>6.2.3命令行模式</h4><p>输入Esc在输入：在这个模式当中，可以提供你相关的指令，完成读取，存盘，替换，离开vim，显示符号等。</p><h3 id="6-3vi和vim键盘图"><a href="#6-3vi和vim键盘图" class="headerlink" title="6.3vi和vim键盘图"></a>6.3vi和vim键盘图</h3><p>Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p><p>简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。 vim 则可以说是程序开发者的一项很好用的工具。</p><p>连 vim 的官方网站 (<a href="http://www.vim.org/">http://www.vim.org</a>) 自己也说 vim 是一个程序开发工具而不是文字处理软件。</p><p>vim 键盘图：</p><p><img src="C:\Users\胡海\Desktop\Linux\vi-vim键盘图.png"></p><hr><h3 id="6-4vi-vim-的使用"><a href="#6-4vi-vim-的使用" class="headerlink" title="6.4vi/vim 的使用"></a>6.4vi/vim 的使用</h3><p>基本上 vi/vim 共分为三种模式，分别是<strong>命令模式（Command mode）</strong>，<strong>输入模式（Insert mode）</strong>和<strong>底线命令模式（Last line mode）</strong>。 这三种模式的作用分别是：</p><h4 id="6-4-1命令模式："><a href="#6-4-1命令模式：" class="headerlink" title="6.4.1命令模式："></a>6.4.1命令模式：</h4><p>用户刚刚启动 vi/vim，便进入了命令模式。</p><p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p><p>以下是常用的几个命令：</p><ul><li><strong>i</strong> 切换到输入模式，以输入字符。</li><li><strong>x</strong> 删除当前光标所在处的字符。</li><li><strong>:</strong> 切换到底线命令模式，以在最底一行输入命令。</li></ul><p>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。</p><p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p><h4 id="6-4-2输入模式"><a href="#6-4-2输入模式" class="headerlink" title="6.4.2输入模式"></a>6.4.2输入模式</h4><p>在命令模式下按下i就进入了输入模式。</p><p>在输入模式中，可以使用以下按键：</p><ul><li><strong>字符按键以及Shift组合</strong>，输入字符</li><li><strong>ENTER</strong>，回车键，换行</li><li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li><li><strong>DEL</strong>，删除键，删除光标后一个字符</li><li><strong>方向键</strong>，在文本中移动光标</li><li><strong>HOME</strong>/<strong>END</strong>，移动光标到行首/行尾</li><li><strong>Page Up</strong>/<strong>Page Down</strong>，上/下翻页</li><li><strong>Insert</strong>，切换光标为输入/替换模式，光标将变成竖线/下划线</li><li><strong>ESC</strong>，退出输入模式，切换到命令模式</li></ul><h4 id="6-4-3底线命令模式"><a href="#6-4-3底线命令模式" class="headerlink" title="6.4.3底线命令模式"></a>6.4.3底线命令模式</h4><p>在命令模式下按下:（英文冒号）就进入了底线命令模式。</p><p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p><p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p><ul><li>q 退出程序</li><li>w 保存文件</li></ul><p>按ESC键可随时退出底线命令模式。</p><p>简单的说，我们可以将这三个模式想成底下的图标来表示：</p><p><img src="C:\Users\胡海\Desktop\Linux\vi-vim工作模式.png"></p><hr><h3 id="6-5vi-vim-使用实例"><a href="#6-5vi-vim-使用实例" class="headerlink" title="6.5vi/vim 使用实例"></a>6.5vi/vim 使用实例</h3><h4 id="6-5-1使用-vi-vim-进入一般模式"><a href="#6-5-1使用-vi-vim-进入一般模式" class="headerlink" title="6.5.1使用 vi/vim 进入一般模式"></a>6.5.1使用 vi/vim 进入一般模式</h4><p>如果你想要使用 vi 来建立一个名为 runoob.txt 的文件时，你可以这样做：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$ vim runoob.txt<br></code></pre></td></tr></table></figure><p>直接输入 <strong>vi 文件名</strong> 就能够进入 vi 的一般模式了。请注意，记得 vi 后面一定要加文件名，不管该文件存在与否！</p><h4 id="6-5-2按下-i-进入输入模式-也称为编辑模式-，开始编辑文字"><a href="#6-5-2按下-i-进入输入模式-也称为编辑模式-，开始编辑文字" class="headerlink" title="6.5.2按下 i 进入输入模式(也称为编辑模式)，开始编辑文字"></a>6.5.2按下 i 进入输入模式(也称为编辑模式)，开始编辑文字</h4><p>在一般模式之中，只要按下 i, o, a 等字符就可以进入输入模式了！</p><p>在编辑模式当中，你可以发现在左下角状态栏中会出现 –INSERT- 的字样，那就是可以输入任意字符的提示。</p><p>这个时候，键盘上除了 <strong>Esc</strong> 这个按键之外，其他的按键都可以视作为一般的输入按钮了，所以你可以进行任何的编辑。</p><p>按下 ESC 按钮回到一般模式</p><p>好了，假设我已经按照上面的样式给他编辑完毕了，那么应该要如何退出呢？是的！没错！就是给他按下 <strong>Esc</strong> 这个按钮即可！马上你就会发现画面左下角的 – INSERT – 不见了！</p><h4 id="6-5-3在一般模式中按下-wq-储存后离开-vi"><a href="#6-5-3在一般模式中按下-wq-储存后离开-vi" class="headerlink" title="6.5.3在一般模式中按下 :wq 储存后离开 vi"></a>6.5.3在一般模式中按下 <strong>:wq</strong> 储存后离开 vi</h4><p>OK，我们要存档了，存盘并离开的指令很简单，输入 <strong>:wq</strong> 即可保存离开！</p><p> 这样我们就成功创建了一个 runoob.txt 的文件。</p><hr><h3 id="6-6vi-vim-按键说明"><a href="#6-6vi-vim-按键说明" class="headerlink" title="6.6vi/vim 按键说明"></a>6.6vi/vim 按键说明</h3><p>除了上面简易范例的 i, Esc, :wq 之外，其实 vim 还有非常多的按键可以使用。</p><h4 id="6-6-1：一般模式可用的光标移动、复制粘贴、搜索替换等"><a href="#6-6-1：一般模式可用的光标移动、复制粘贴、搜索替换等" class="headerlink" title="6.6.1：一般模式可用的光标移动、复制粘贴、搜索替换等"></a>6.6.1：一般模式可用的光标移动、复制粘贴、搜索替换等</h4><table><thead><tr><th align="left">移动光标的方法</th><th></th></tr></thead><tbody><tr><td align="left">h 或 向左箭头键(←)</td><td>光标向左移动一个字符</td></tr><tr><td align="left">j 或 向下箭头键(↓)</td><td>光标向下移动一个字符</td></tr><tr><td align="left">k 或 向上箭头键(↑)</td><td>光标向上移动一个字符</td></tr><tr><td align="left">l 或 向右箭头键(→)</td><td>光标向右移动一个字符</td></tr><tr><td align="left">如果你将右手放在键盘上的话，你会发现 hjkl 是排列在一起的，因此可以使用这四个按钮来移动光标。 如果想要进行多次移动的话，例如向下移动 30 行，可以使用 “30j” 或 “30↓” 的组合按键， 亦即加上想要进行的次数(数字)后，按下动作即可！</td><td></td></tr><tr><td align="left">[Ctrl] + [f]</td><td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td></tr><tr><td align="left">[Ctrl] + [b]</td><td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td></tr><tr><td align="left">[Ctrl] + [d]</td><td>屏幕『向下』移动半页</td></tr><tr><td align="left">[Ctrl] + [u]</td><td>屏幕『向上』移动半页</td></tr><tr><td align="left">+</td><td>光标移动到非空格符的下一行</td></tr><tr><td align="left">-</td><td>光标移动到非空格符的上一行</td></tr><tr><td align="left">n<space></td><td>那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20<space> 则光标会向后面移动 20 个字符距离。</td></tr><tr><td align="left">0 或功能键[Home]</td><td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td></tr><tr><td align="left">$ 或功能键[End]</td><td>移动到这一行的最后面字符处(常用)</td></tr><tr><td align="left">H</td><td>光标移动到这个屏幕的最上方那一行的第一个字符</td></tr><tr><td align="left">M</td><td>光标移动到这个屏幕的中央那一行的第一个字符</td></tr><tr><td align="left">L</td><td>光标移动到这个屏幕的最下方那一行的第一个字符</td></tr><tr><td align="left">G</td><td>移动到这个档案的最后一行(常用)</td></tr><tr><td align="left">nG</td><td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</td></tr><tr><td align="left">gg</td><td>移动到这个档案的第一行，相当于 1G 啊！ (常用)</td></tr><tr><td align="left">n<Enter></td><td>n 为数字。光标向下移动 n 行(常用)</td></tr><tr><td align="left">搜索替换</td><td></td></tr><tr><td align="left">/word</td><td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！ (常用)</td></tr><tr><td align="left">?word</td><td>向光标之上寻找一个字符串名称为 word 的字符串。</td></tr><tr><td align="left">n</td><td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td></tr><tr><td align="left">N</td><td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td></tr><tr><td align="left">使用 /word 配合 n 及 N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键词！</td><td></td></tr><tr><td align="left">:n1,n2s/word1/word2/g</td><td>n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则： 『:100,200s/vbird/VBIRD/g』。(常用)</td></tr><tr><td align="left"><strong>:1,$s/word1/word2/g</strong> 或 <strong>:%s/word1/word2/g</strong></td><td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)</td></tr><tr><td align="left"><strong>:1,$s/word1/word2/gc</strong> 或 <strong>:%s/word1/word2/gc</strong></td><td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)</td></tr><tr><td align="left">删除、复制与贴上</td><td></td></tr><tr><td align="left">x, X</td><td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td></tr><tr><td align="left">nx</td><td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td></tr><tr><td align="left">dd</td><td>删除游标所在的那一整行(常用)</td></tr><tr><td align="left">ndd</td><td>n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)</td></tr><tr><td align="left">d1G</td><td>删除光标所在到第一行的所有数据</td></tr><tr><td align="left">dG</td><td>删除光标所在到最后一行的所有数据</td></tr><tr><td align="left">d$</td><td>删除游标所在处，到该行的最后一个字符</td></tr><tr><td align="left">d0</td><td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td></tr><tr><td align="left">yy</td><td>复制游标所在的那一行(常用)</td></tr><tr><td align="left">nyy</td><td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td></tr><tr><td align="left">y1G</td><td>复制游标所在行到第一行的所有数据</td></tr><tr><td align="left">yG</td><td>复制游标所在行到最后一行的所有数据</td></tr><tr><td align="left">y0</td><td>复制光标所在的那个字符到该行行首的所有数据</td></tr><tr><td align="left">y$</td><td>复制光标所在的那个字符到该行行尾的所有数据</td></tr><tr><td align="left">p, P</td><td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用)</td></tr><tr><td align="left">J</td><td>将光标所在行与下一行的数据结合成同一行</td></tr><tr><td align="left">c</td><td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td></tr><tr><td align="left">u</td><td>复原前一个动作。(常用)</td></tr><tr><td align="left">[Ctrl]+r</td><td>重做上一个动作。(常用)</td></tr><tr><td align="left">这个 u 与 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！</td><td></td></tr><tr><td align="left">.</td><td>不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用)</td></tr></tbody></table><h4 id="6-6-2：一般模式切换到编辑模式的可用的按钮说明"><a href="#6-6-2：一般模式切换到编辑模式的可用的按钮说明" class="headerlink" title="6.6.2：一般模式切换到编辑模式的可用的按钮说明"></a>6.6.2：一般模式切换到编辑模式的可用的按钮说明</h4><table><thead><tr><th align="left">进入输入或取代的编辑模式</th><th></th></tr></thead><tbody><tr><td align="left">i, I</td><td>进入输入模式(Insert mode)： i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。 (常用)</td></tr><tr><td align="left">a, A</td><td>进入输入模式(Insert mode)： a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td></tr><tr><td align="left">o, O</td><td>进入输入模式(Insert mode)： 这是英文字母 o 的大小写。o 为在目前光标所在的下一行处输入新的一行； O 为在目前光标所在的上一行处输入新的一行！(常用)</td></tr><tr><td align="left">r, R</td><td>进入取代模式(Replace mode)： r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td></tr><tr><td align="left">上面这些按键中，在 vi 画面的左下角处会出现『–INSERT–』或『–REPLACE–』的字样。 由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字符时， 一定要在左下角处看到 INSERT 或 REPLACE 才能输入喔！</td><td></td></tr><tr><td align="left">[Esc]</td><td>退出编辑模式，回到一般模式中(常用)</td></tr></tbody></table><h4 id="6-6-3：一般模式切换到指令行模式的可用的按钮说明"><a href="#6-6-3：一般模式切换到指令行模式的可用的按钮说明" class="headerlink" title="6.6.3：一般模式切换到指令行模式的可用的按钮说明"></a>6.6.3：一般模式切换到指令行模式的可用的按钮说明</h4><table><thead><tr><th align="left">指令行的储存、离开等指令</th><th></th></tr></thead><tbody><tr><td align="left">:w</td><td>将编辑的数据写入硬盘档案中(常用)</td></tr><tr><td align="left">:w!</td><td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td></tr><tr><td align="left">:q</td><td>离开 vi (常用)</td></tr><tr><td align="left">:q!</td><td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td></tr><tr><td align="left">注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</td><td></td></tr><tr><td align="left">:wq</td><td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td></tr><tr><td align="left">ZZ</td><td>这是大写的 Z 喔！如果修改过，保存当前文件，然后退出！效果等同于(保存并退出)</td></tr><tr><td align="left">ZQ</td><td>不保存，强制退出。效果等同于 **:q!**。</td></tr><tr><td align="left">:w [filename]</td><td>将编辑的数据储存成另一个档案（类似另存新档）</td></tr><tr><td align="left">:r [filename]</td><td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td></tr><tr><td align="left">:n1,n2 w [filename]</td><td>将 n1 到 n2 的内容储存成 filename 这个档案。</td></tr><tr><td align="left">:! command</td><td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的档案信息！</td></tr><tr><td align="left">vim 环境的变更</td><td></td></tr><tr><td align="left">:set nu</td><td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td></tr><tr><td align="left">:set nonu</td><td>与 set nu 相反，为取消行号！</td></tr></tbody></table><p>特别注意，在 vi/vim 中，数字是很有意义的！数字通常代表重复做几次的意思！ 也有可能是代表去到第几个什么什么的意思。</p><p>举例来说，要删除 50 行，则是用 『50dd』 对吧！ 数字加在动作之前，如我要向下移动 20 行呢？那就是『20j』或者是『20↓』即可。</p><h3 id="6-7补充"><a href="#6-7补充" class="headerlink" title="6.7补充"></a>6.7补充</h3><h4 id="vim中批量添加注释"><a href="#vim中批量添加注释" class="headerlink" title="vim中批量添加注释"></a>vim中批量添加注释</h4><p>方法一 ：块选择模式</p><p>批量注释：</p><p><strong>Ctrl + v</strong> 进入块选择模式，然后移动光标选中你要注释的行，再按大写的 <strong>I</strong> 进入行首插入模式输入注释符号如 <strong>//</strong> 或 <strong>#<strong>，输入完毕之后，按两下 <strong>ESC</strong>，</strong>Vim</strong> 会自动将你选中的所有行首都加上注释，保存退出完成注释。</p><p>取消注释：</p><p><strong>Ctrl + v</strong> 进入块选择模式，选中你要删除的行首的注释符号，注意 <strong>//</strong> 要选中两个，选好之后按 <strong>d</strong> 即可删除注释，<strong>ESC</strong> 保存退出。</p><p>方法二: 替换命令</p><p>批量注释。</p><p>使用下面命令在指定的行首添加注释。</p><p>使用名命令格式： <strong>:起始行号,结束行号s/^/注释符/g</strong>（注意冒号）。</p><p>取消注释：</p><p>使用名命令格式： <strong>:起始行号,结束行号s/^注释符//g</strong>（注意冒号）。</p><p>例子：</p><p>1、在 10 - 20 行添加 <strong>//</strong> 注释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">:10,20s#^#//#g<br></code></pre></td></tr></table></figure><p>2、在 10 - 20 行删除 <strong>//</strong> 注释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">:10,20s#^//##g<br></code></pre></td></tr></table></figure><p>3、在 10 - 20 行添加 <strong>#</strong> 注释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">:10,20s/^/#/g<br></code></pre></td></tr></table></figure><p>4、在 <strong>10 - 20</strong> 行删除 # 注释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">:10,20s/#//g<br></code></pre></td></tr></table></figure><h2 id="7-Linux开机-重启-用户登录注销"><a href="#7-Linux开机-重启-用户登录注销" class="headerlink" title="7.Linux开机-重启-用户登录注销"></a>7.Linux开机-重启-用户登录注销</h2><h3 id="7-1关机-amp-重启命令"><a href="#7-1关机-amp-重启命令" class="headerlink" title="7.1关机&amp;重启命令"></a>7.1关机&amp;重启命令</h3><h4 id="7-1-1基本介绍"><a href="#7-1-1基本介绍" class="headerlink" title="7.1.1基本介绍"></a>7.1.1基本介绍</h4><ul><li>shutdown              -h              now                    立刻进行关机</li><li>shutdown              -h               1                         “1分钟后自动关机”</li><li>shutdown              -r               now                    现在重启计算机</li><li>halt                           关机，作用和上面一样</li><li>reboot                      现在重启计算机</li><li>sync                           把内存的数据同步到磁盘</li></ul><h4 id="7-1-2注意细节"><a href="#7-1-2注意细节" class="headerlink" title="7.1.2注意细节"></a>7.1.2注意细节</h4><ul><li>不管是重启还是关闭系统，首先要运行sync命令，把内存中的数据写入到磁盘中</li><li>目前的shutdown/reboot/halt 等命令均已经在关机前进行了sync</li></ul><h3 id="7-2用户登录和注销"><a href="#7-2用户登录和注销" class="headerlink" title="7.2用户登录和注销"></a>7.2用户登录和注销</h3><h4 id="7-2-1基本介绍"><a href="#7-2-1基本介绍" class="headerlink" title="7.2.1基本介绍"></a>7.2.1基本介绍</h4><ol><li>登录时尽量少用root账号登录，因为她是系统管理员，最大的权限，避免操作失误。可以用普通用户登录，登录后再用 “su-用户名”命令来切换成系统管理员身份。</li><li>在提示符下输入 logout 即可注销用户</li></ol><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h2 id="8-Linux用户管理"><a href="#8-Linux用户管理" class="headerlink" title="8.Linux用户管理"></a>8.Linux用户管理</h2><h3 id="8-1基本介绍"><a href="#8-1基本介绍" class="headerlink" title="8.1基本介绍"></a>8.1基本介绍</h3><p>Linux系统是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后用这个账号进入系统。</p><h3 id="8-2用户账号的管理"><a href="#8-2用户账号的管理" class="headerlink" title="8.2用户账号的管理"></a>8.2用户账号的管理</h3><h4 id="8-2-1添加用户，其语法如下："><a href="#8-2-1添加用户，其语法如下：" class="headerlink" title="8.2.1添加用户，其语法如下："></a>8.2.1添加用户，其语法如下：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">useradd 选项 用户名<br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li><p>选项:</p><ul><li>-c comment 指定一段注释性描述。</li><li>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</li><li>-g 用户组 指定用户所属的用户组。</li><li>-G 用户组，用户组 指定用户所属的附加组。</li><li>-s Shell文件 指定用户的登录Shell。</li><li>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</li></ul></li><li><p>用户名:</p><p>指定新账号的登录名。</p></li></ul><h5 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># useradd –d  /home/sam -m sam<br></code></pre></td></tr></table></figure><p>此命令创建了一个用户sam，其中-d和-m选项用来为登录名sam产生一个主目录 /home/sam（/home为默认的用户主目录所在的父目录）。</p><h5 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># useradd -s /bin/sh -g group –G adm,root gem<br></code></pre></td></tr></table></figure><p>此命令新建了一个用户gem，该用户的登录Shell是 <code>/bin/sh</code>，它属于group用户组，同时又属于adm和root用户组，其中group用户组是其主组。</p><p>这里可能新建组：<code>#groupadd group及groupadd adm</code></p><p>增加用户账号就是在/etc/passwd文件中为新用户增加一条记录，同时更新其他系统文件如/etc/shadow, /etc/group等。</p><p>Linux提供了集成的系统管理工具userconf，它可以用来对用户账号进行统一管理。</p><h4 id="8-2-2删除帐号"><a href="#8-2-2删除帐号" class="headerlink" title="8.2.2删除帐号"></a>8.2.2删除帐号</h4><p>如果一个用户的账号不再使用，可以从系统中删除。删除用户账号就是要将/etc/passwd等系统文件中的该用户记录删除，必要时还删除用户的主目录。</p><p>删除一个已有的用户账号使用<code>userdel</code>命令，其格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">userdel 选项 用户名<br></code></pre></td></tr></table></figure><p>常用的选项是 <strong>-r</strong>，它的作用是把用户的主目录一起删除。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># userdel -r sam<br></code></pre></td></tr></table></figure><p>此命令删除用户sam在系统文件中（主要是/etc/passwd, /etc/shadow, /etc/group等）的记录，同时删除用户的主目录。</p><h4 id="8-2-3修改帐号"><a href="#8-2-3修改帐号" class="headerlink" title="8.2.3修改帐号"></a>8.2.3修改帐号</h4><p>修改用户账号就是根据实际情况更改用户的有关属性，如用户号、主目录、用户组、登录Shell等。</p><p>修改已有用户的信息使用<code>usermod</code>命令，其格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">usermod 选项 用户名<br></code></pre></td></tr></table></figure><p>常用的选项包括<code>-c, -d, -m, -g, -G, -s, -u以及-o等</code>，这些选项的意义与<code>useradd</code>命令中的选项一样，可以为用户指定新的资源值。</p><p>另外，有些系统可以使用选项：-l 新用户名</p><p>这个选项指定一个新的账号，即将原来的用户名改为新的用户名。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># usermod -s /bin/ksh -d /home/z –g developer sam<br></code></pre></td></tr></table></figure><p>此命令将用户sam的登录Shell修改为ksh，主目录改为/home/z，用户组改为developer。</p><h3 id="8-3用户密码的管理"><a href="#8-3用户密码的管理" class="headerlink" title="8.3用户密码的管理"></a>8.3用户密码的管理</h3><p>用户管理的一项重要内容是用户密码的管理。用户账号刚创建时没有密码，但是被系统锁定，无法使用，必须为其指定密码后才可以使用，即使是指定空密码。</p><p>指定和修改用户密码的Shell命令是<code>passwd</code>。超级用户可以为自己和其他用户指定密码，普通用户只能用它修改自己的密码。命令的格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">passwd 选项 用户名<br></code></pre></td></tr></table></figure><p>可使用的选项：</p><ul><li>-l 锁定密码，即禁用账号。</li><li>-u 密码解锁。</li><li>-d 使账号无密码。</li><li>-f 强迫用户下次登录时修改密码。</li></ul><p>如果默认用户名，则修改当前用户的密码。</p><p>例如，假设当前用户是sam，则下面的命令修改该用户自己的密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$ passwd <br>Old password:****** <br>New password:******* <br>Re-enter new password:*******<br></code></pre></td></tr></table></figure><p>如果是超级用户，可以用下列形式指定任何用户的密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># passwd sam <br>New password:******* <br>Re-enter new password:*******<br></code></pre></td></tr></table></figure><p>普通用户修改自己的密码时，passwd命令会先询问原密码，验证后再要求用户输入两遍新密码，如果两次输入的密码一致，则将这个密码指定给用户；而超级用户为用户指定密码时，就不需要知道原密码。</p><p>为用户指定空密码时，执行下列形式的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># passwd -d sam<br></code></pre></td></tr></table></figure><p>此命令将用户 sam 的密码删除，这样用户 sam 下一次登录时，系统就不再允许该用户登录了。</p><p>passwd 命令还可以用 -l(lock) 选项锁定某一用户，使其不能登录，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># passwd -l sam<br></code></pre></td></tr></table></figure><hr><h3 id="8-4Linux系统用户组的管理"><a href="#8-4Linux系统用户组的管理" class="headerlink" title="8.4Linux系统用户组的管理"></a>8.4Linux系统用户组的管理</h3><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux 系统对用户组的规定有所不同，如Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。</p><p>用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对/etc/group文件的更新。</p><h4 id="8-4-1、增加一个新的用户组使用groupadd命令。其格式如下："><a href="#8-4-1、增加一个新的用户组使用groupadd命令。其格式如下：" class="headerlink" title="8.4.1、增加一个新的用户组使用groupadd命令。其格式如下："></a>8.4.1、增加一个新的用户组使用groupadd命令。其格式如下：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">groupadd 选项 用户组<br></code></pre></td></tr></table></figure><p>可以使用的选项有：</p><ul><li>-g GID 指定新用户组的组标识号（GID）。</li><li>-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。</li></ul><h5 id="实例1："><a href="#实例1：" class="headerlink" title="实例1："></a>实例1：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># groupadd group1<br></code></pre></td></tr></table></figure><p>此命令向系统中增加了一个新组group1，新组的组标识号是在当前已有的最大组标识号的基础上加1。</p><h5 id="实例2："><a href="#实例2：" class="headerlink" title="实例2："></a>实例2：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># groupadd -g 101 group2<br></code></pre></td></tr></table></figure><p>此命令向系统中增加了一个新组group2，同时指定新组的组标识号是101。</p><h4 id="8-4-2、如果要删除一个已有的用户组，使用groupdel命令，其格式如下："><a href="#8-4-2、如果要删除一个已有的用户组，使用groupdel命令，其格式如下：" class="headerlink" title="8.4.2、如果要删除一个已有的用户组，使用groupdel命令，其格式如下："></a>8.4.2、如果要删除一个已有的用户组，使用groupdel命令，其格式如下：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">groupdel 用户组<br></code></pre></td></tr></table></figure><h5 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># groupdel group1<br></code></pre></td></tr></table></figure><p>此命令从系统中删除组group1。</p><h4 id="8-4-3、修改用户组的属性使用groupmod命令。其语法如下："><a href="#8-4-3、修改用户组的属性使用groupmod命令。其语法如下：" class="headerlink" title="8.4.3、修改用户组的属性使用groupmod命令。其语法如下："></a>8.4.3、修改用户组的属性使用groupmod命令。其语法如下：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">groupmod 选项 用户组<br></code></pre></td></tr></table></figure><p>常用的选项有：</p><ul><li>-g GID 为用户组指定新的组标识号。</li><li>-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</li><li>-n新用户组 将用户组的名字改为新名字</li></ul><h5 id="实例1：-1"><a href="#实例1：-1" class="headerlink" title="实例1："></a>实例1：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># groupmod -g 102 group2<br></code></pre></td></tr></table></figure><p>此命令将组group2的组标识号修改为102。</p><h5 id="实例2：-1"><a href="#实例2：-1" class="headerlink" title="实例2："></a>实例2：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># groupmod –g 10000 -n group3 group2<br></code></pre></td></tr></table></figure><p>此命令将组group2的标识号改为10000，组名修改为group3。</p><h4 id="8-4-4、如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。"><a href="#8-4-4、如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。" class="headerlink" title="8.4.4、如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。"></a>8.4.4、如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。</h4><p>用户可以在登录后，使用命令newgrp切换到其他用户组，这个命令的参数就是目的用户组。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$ newgrp root<br></code></pre></td></tr></table></figure><p>这条命令将当前用户切换到root用户组，前提条件是root用户组确实是该用户的主组或附加组。类似于用户账号的管理，用户组的管理也可以通过集成的系统管理工具来完成。</p><hr><h3 id="8-5、与用户账号有关的系统文件"><a href="#8-5、与用户账号有关的系统文件" class="headerlink" title="8.5、与用户账号有关的系统文件"></a>8.5、与用户账号有关的系统文件</h3><p>完成用户管理的工作有许多种方法，但是每一种方法实际上都是对有关的系统文件进行修改。</p><p>与用户和用户组相关的信息都存放在一些系统文件中，这些文件包括/etc/passwd, /etc/shadow, /etc/group等。</p><p>下面分别介绍这些文件的内容。</p><h4 id="8-5-1、-etc-passwd文件是用户管理工作涉及的最重要的一个文件。"><a href="#8-5-1、-etc-passwd文件是用户管理工作涉及的最重要的一个文件。" class="headerlink" title="8.5.1、/etc/passwd文件是用户管理工作涉及的最重要的一个文件。"></a>8.5.1、/etc/passwd文件是用户管理工作涉及的最重要的一个文件。</h4><p>Linux系统中的每个用户都在/etc/passwd文件中有一个对应的记录行，它记录了这个用户的一些基本属性。</p><p>这个文件对所有用户都是可读的。它的内容类似下面的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">＃ cat /etc/passwd<br><br>root:x:0:0:Superuser:/:<br>daemon:x:1:1:System daemons:/etc:<br>bin:x:2:2:Owner of system commands:/bin:<br>sys:x:3:3:Owner of system files:/usr/sys:<br>adm:x:4:4:System accounting:/usr/adm:<br>uucp:x:5:5:UUCP administrator:/usr/lib/uucp:<br>auth:x:7:21:Authentication administrator:/tcb/files/auth:<br>cron:x:9:16:Cron daemon:/usr/spool/cron:<br>listen:x:37:4:Network daemon:/usr/net/nls:<br>lp:x:71:18:Printer administrator:/usr/spool/lp:<br>sam:x:200:50:Sam san:/home/sam:/bin/sh<br></code></pre></td></tr></table></figure><p>从上面的例子我们可以看到，/etc/passwd中一行记录对应着一个用户，每行记录又被冒号(:)分隔为7个字段，其格式和具体含义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell<br></code></pre></td></tr></table></figure><h5 id="1）”用户名”是代表用户账号的字符串。"><a href="#1）”用户名”是代表用户账号的字符串。" class="headerlink" title="1）”用户名”是代表用户账号的字符串。"></a>1）”用户名”是代表用户账号的字符串。</h5><p>通常长度不超过8个字符，并且由大小写字母和/或数字组成。登录名中不能有冒号(:)，因为冒号在这里是分隔符。</p><p>为了兼容起见，登录名中最好不要包含点字符(.)，并且不使用连字符(-)和加号(+)打头。</p><h5 id="2）“密码”一些系统中，存放着加密后的用户密码字节。"><a href="#2）“密码”一些系统中，存放着加密后的用户密码字节。" class="headerlink" title="2）“密码”一些系统中，存放着加密后的用户密码字节。"></a>2）“密码”一些系统中，存放着加密后的用户密码字节。</h5><p>虽然这个字段存放的只是用户密码的加密串，不是明文，但是由于/etc/passwd文件对所有用户都可读，所以这仍是一个安全隐患。因此，现在许多Linux 系统（如SVR4）都使用了shadow技术，把真正的加密后的用户密码字节存放到/etc/shadow文件中，而在/etc/passwd文件的密码字段中只存放一个特殊的字符，例如“x”或者“*”。</p><h5 id="3）“用户标识号”是一个整数，系统内部用它来标识用户。"><a href="#3）“用户标识号”是一个整数，系统内部用它来标识用户。" class="headerlink" title="3）“用户标识号”是一个整数，系统内部用它来标识用户。"></a>3）“用户标识号”是一个整数，系统内部用它来标识用户。</h5><p>一般情况下它与用户名是一一对应的。如果几个用户名对应的用户标识号是一样的，系统内部将把它们视为同一个用户，但是它们可以有不同的口令、不同的主目录以及不同的登录Shell等。</p><p>通常用户标识号的取值范围是0～65 535。0是超级用户root的标识号，1～99由系统保留，作为管理账号，普通用户的标识号从100开始。在Linux系统中，这个界限是500。</p><h5 id="4）“组标识号”字段记录的是用户所属的用户组。"><a href="#4）“组标识号”字段记录的是用户所属的用户组。" class="headerlink" title="4）“组标识号”字段记录的是用户所属的用户组。"></a>4）“组标识号”字段记录的是用户所属的用户组。</h5><p>它对应着/etc/group文件中的一条记录。</p><h5 id="5-“注释性描述”字段记录着用户的一些个人情况。"><a href="#5-“注释性描述”字段记录着用户的一些个人情况。" class="headerlink" title="5)“注释性描述”字段记录着用户的一些个人情况。"></a>5)“注释性描述”字段记录着用户的一些个人情况。</h5><p>例如用户的真实姓名、电话、地址等，这个字段并没有什么实际的用途。在不同的Linux 系统中，这个字段的格式并没有统一。在许多Linux系统中，这个字段存放的是一段任意的注释性描述文字，用做finger命令的输出。</p><h5 id="6-“主目录”，也就是用户的起始工作目录。"><a href="#6-“主目录”，也就是用户的起始工作目录。" class="headerlink" title="6)“主目录”，也就是用户的起始工作目录。"></a>6)“主目录”，也就是用户的起始工作目录。</h5><p>它是用户在登录到系统之后所处的目录。在大多数系统中，各用户的主目录都被组织在同一个特定的目录下，而用户主目录的名称就是该用户的登录名。各用户对自己的主目录有读、写、执行（搜索）权限，其他用户对此目录的访问权限则根据具体情况设置。</p><h5 id="7-用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即Shell。"><a href="#7-用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即Shell。" class="headerlink" title="7)用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即Shell。"></a>7)用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即Shell。</h5><p>Shell是用户与Linux系统之间的接口。Linux的Shell有许多种，每种都有不同的特点。常用的有sh(Bourne Shell), csh(C Shell), ksh(Korn Shell), tcsh(TENEX/TOPS-20 type C Shell), bash(Bourne Again Shell)等。</p><p>系统管理员可以根据系统情况和用户习惯为用户指定某个Shell。如果不指定Shell，那么系统使用sh为默认的登录Shell，即这个字段的值为/bin/sh。</p><p>用户的登录Shell也可以指定为某个特定的程序（此程序不是一个命令解释器）。</p><p>利用这一特点，我们可以限制用户只能运行指定的应用程序，在该应用程序运行结束后，用户就自动退出了系统。有些Linux 系统要求只有那些在系统中登记了的程序才能出现在这个字段中。</p><h5 id="8-系统中有一类用户称为伪用户（pseudo-users）。"><a href="#8-系统中有一类用户称为伪用户（pseudo-users）。" class="headerlink" title="8)系统中有一类用户称为伪用户（pseudo users）。"></a>8)系统中有一类用户称为伪用户（pseudo users）。</h5><p>这些用户在/etc/passwd文件中也占有一条记录，但是不能登录，因为它们的登录Shell为空。它们的存在主要是方便系统管理，满足相应的系统进程对文件属主的要求。</p><p>常见的伪用户如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">伪 用 户 含 义 <br>bin 拥有可执行的用户命令文件 <br>sys 拥有系统文件 <br>adm 拥有帐户文件 <br>uucp UUCP使用 <br>lp lp或lpd子系统使用 <br>nobody NFS使用<br></code></pre></td></tr></table></figure><h3 id="8-6、添加批量用户"><a href="#8-6、添加批量用户" class="headerlink" title="8.6、添加批量用户"></a>8.6、添加批量用户</h3><p>添加和删除用户对每位Linux系统管理员都是轻而易举的事，比较棘手的是如果要添加几十个、上百个甚至上千个用户时，我们不太可能还使用useradd一个一个地添加，必然要找一种简便的创建大量用户的方法。Linux系统提供了创建大量用户的工具，可以让您立即创建大量用户，方法如下：</p><h4 id="8-6-1先编辑一个文本用户文件。"><a href="#8-6-1先编辑一个文本用户文件。" class="headerlink" title="8.6.1先编辑一个文本用户文件。"></a>8.6.1先编辑一个文本用户文件。</h4><p>每一列按照<code>/etc/passwd</code>密码文件的格式书写，要注意每个用户的用户名、UID、宿主目录都不可以相同，其中密码栏可以留做空白或输入x号。一个范例文件user.txt内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">user001::600:100:user:/home/user001:/bin/bash<br>user002::601:100:user:/home/user002:/bin/bash<br>user003::602:100:user:/home/user003:/bin/bash<br>user004::603:100:user:/home/user004:/bin/bash<br>user005::604:100:user:/home/user005:/bin/bash<br>user006::605:100:user:/home/user006:/bin/bash<br></code></pre></td></tr></table></figure><h4 id="8-6-2以root身份执行命令-usr-sbin-newusers，从刚创建的用户文件user-txt中导入数据，创建用户："><a href="#8-6-2以root身份执行命令-usr-sbin-newusers，从刚创建的用户文件user-txt中导入数据，创建用户：" class="headerlink" title="8.6.2以root身份执行命令 /usr/sbin/newusers，从刚创建的用户文件user.txt中导入数据，创建用户："></a>8.6.2以root身份执行命令 <code>/usr/sbin/newusers</code>，从刚创建的用户文件<code>user.txt</code>中导入数据，创建用户：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># newusers &lt; user.txt<br></code></pre></td></tr></table></figure><p>然后可以执行命令 <code>vipw</code> 或 <code>vi /etc/passwd</code> 检查 <code>/etc/passwd</code> 文件是否已经出现这些用户的数据，并且用户的宿主目录是否已经创建。</p><h4 id="8-6-3执行命令-usr-sbin-pwunconv。"><a href="#8-6-3执行命令-usr-sbin-pwunconv。" class="headerlink" title="8.6.3执行命令/usr/sbin/pwunconv。"></a>8.6.3执行命令/usr/sbin/pwunconv。</h4><p>将 <code>/etc/shadow</code> 产生的 <code>shadow</code> 密码解码，然后回写到 <code>/etc/passwd</code> 中，并将<code>/etc/shadow</code>的<code>shadow</code>密码栏删掉。这是为了方便下一步的密码转换工作，即先取消 <code>shadow password</code> 功能。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># pwunconv<br></code></pre></td></tr></table></figure><h4 id="8-6-4编辑每个用户的密码对照文件。"><a href="#8-6-4编辑每个用户的密码对照文件。" class="headerlink" title="8.6.4编辑每个用户的密码对照文件。"></a>8.6.4编辑每个用户的密码对照文件。</h4><p>格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">用户名:密码<br></code></pre></td></tr></table></figure><p>实例文件 <code>passwd.txt</code> 内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">user001:123456<br>user002:123456<br>user003:123456<br>user004:123456<br>user005:123456<br>user006:123456<br></code></pre></td></tr></table></figure><h4 id="8-6-5以-root-身份执行命令-usr-sbin-chpasswd。"><a href="#8-6-5以-root-身份执行命令-usr-sbin-chpasswd。" class="headerlink" title="8.6.5以 root 身份执行命令 /usr/sbin/chpasswd。"></a>8.6.5以 root 身份执行命令 <code>/usr/sbin/chpasswd</code>。</h4><p>创建用户密码，<code>chpasswd</code> 会将经过 <code>/usr/bin/passwd</code> 命令编码过的密码写入 <code>/etc/passwd</code> 的密码栏。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># chpasswd &lt; passwd.txt<br></code></pre></td></tr></table></figure><h4 id="8-6-6确定密码经编码写入-etc-passwd的密码栏后。"><a href="#8-6-6确定密码经编码写入-etc-passwd的密码栏后。" class="headerlink" title="8.6.6确定密码经编码写入/etc/passwd的密码栏后。"></a>8.6.6确定密码经编码写入/etc/passwd的密码栏后。</h4><p>执行命令 <code>/usr/sbin/pwconv</code> 将密码编码为 <code>shadow password</code>，并将结果写入 <code>/etc/shadow</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># pwconv<br></code></pre></td></tr></table></figure><p>这样就完成了大量用户的创建了，之后您可以到/home下检查这些用户宿主目录的权限设置是否都正确，并登录验证用户密码是否正确。</p><h2 id="9，Linux实用指令"><a href="#9，Linux实用指令" class="headerlink" title="9，Linux实用指令"></a>9，Linux实用指令</h2><h3 id="9-1，指令运行级别"><a href="#9-1，指令运行级别" class="headerlink" title="9.1，指令运行级别"></a>9.1，指令运行级别</h3><p>运行级别说明：</p><p>0：关机</p><p>1：单用户【找回丢失密码】</p><p>2：多用户状态没有网络服务</p><p>3：多用户状态有网络服务</p><p>4：系统未使用保留给用户</p><p>5：图形界面</p><p>6：系统重启</p><p>常用的运行级别是3和5，通过init来切换不同的运行级别，然后关机。</p><h3 id="9-2找回root密码"><a href="#9-2找回root密码" class="headerlink" title="9.2找回root密码"></a>9.2找回root密码</h3><h3 id="9-3处理目录的常用指令"><a href="#9-3处理目录的常用指令" class="headerlink" title="9.3处理目录的常用指令"></a>9.3处理目录的常用指令</h3><h4 id="9-3-1在开始本教程前我们需要先知道什么是绝对路径与相对路径。"><a href="#9-3-1在开始本教程前我们需要先知道什么是绝对路径与相对路径。" class="headerlink" title="9.3.1在开始本教程前我们需要先知道什么是绝对路径与相对路径。"></a>9.3.1在开始本教程前我们需要先知道什么是绝对路径与相对路径。</h4><ul><li><strong>绝对路径：</strong><br>路径的写法，由根目录 <strong>/</strong> 写起，例如： /usr/share/doc 这个目录。</li><li><strong>相对路径：</strong><br>路径的写法，不是由 <strong>/</strong> 写起，例如由 /usr/share/doc 要到 /usr/share/man 底下时，可以写成： <strong>cd ../man</strong> 这就是相对路径的写法。</li></ul><h4 id="9-3-2几个常见的处理目录的命令："><a href="#9-3-2几个常见的处理目录的命令：" class="headerlink" title="9.3.2几个常见的处理目录的命令："></a>9.3.2几个常见的处理目录的命令：</h4><ul><li>ls（英文全拼：list files）: 列出目录及文件名</li><li>cd（英文全拼：change directory）：切换目录</li><li>pwd（英文全拼：print work directory）：显示目前的目录</li><li>mkdir（英文全拼：make directory）：创建一个新的目录</li><li>rmdir（英文全拼：remove directory）：删除一个空的目录</li><li>cp（英文全拼：copy file）: 复制文件或目录</li><li>rm（英文全拼：remove）: 删除文件或目录</li><li>mv（英文全拼：move file）: 移动文件与目录，或修改文件与目录的名称</li></ul><p>你可以使用 <em>man [命令]</em> 来查看各个命令的使用文档，如 ：man cp。</p><h5 id="ls-列出目录"><a href="#ls-列出目录" class="headerlink" title="ls (列出目录)"></a>ls (列出目录)</h5><p>在Linux系统当中， ls 命令可能是最常被运行的。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www ~]# ls [-aAdfFhilnrRSt] 目录名称<br>[root@www ~]# ls [--color=&#123;never,auto,always&#125;] 目录名称<br>[root@www ~]# ls [--full-time] 目录名称<br></code></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-a ：全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来(常用)</li><li>-d ：仅列出目录本身，而不是列出目录内的文件数据(常用)</li><li>-l ：长数据串列出，包含文件的属性与权限等等数据；(常用)</li></ul><p>将家目录下的所有文件列出来(含属性与隐藏档)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www ~]# ls -al ~<br></code></pre></td></tr></table></figure><h5 id="cd-切换目录"><a href="#cd-切换目录" class="headerlink" title="cd (切换目录)"></a>cd (切换目录)</h5><p>cd是Change Directory的缩写，这是用来变换工作目录的命令。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"> cd [相对路径或绝对路径]<br>#使用 mkdir 命令创建 runoob 目录<br>[root@www ~]# mkdir runoob<br><br>#使用绝对路径切换到 runoob 目录<br>[root@www ~]# cd /root/runoob/<br><br>#使用相对路径切换到 runoob 目录<br>[root@www ~]# cd ./runoob/<br><br># 表示回到自己的家目录，亦即是 /root 这个目录<br>[root@www runoob]# cd ~<br><br># 表示去到目前的上一级目录，亦即是 /root 的上一级目录的意思；<br>[root@www ~]# cd ..<br></code></pre></td></tr></table></figure><p>接下来大家多操作几次应该就可以很好的理解 cd 命令的。</p><h5 id="pwd-显示目前所在的目录"><a href="#pwd-显示目前所在的目录" class="headerlink" title="pwd (显示目前所在的目录)"></a>pwd (显示目前所在的目录)</h5><p>pwd 是 <strong>Print Working Directory</strong> 的缩写，也就是显示目前所在目录的命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www ~]# pwd [-P]<br></code></pre></td></tr></table></figure><p>选项与参数：</p><ul><li><strong>-P</strong> ：显示出确实的路径，而非使用连结 (link) 路径。</li></ul><p>实例：单纯显示出目前的工作目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www ~]# pwd<br>/root   &lt;== 显示出目录啦～<br></code></pre></td></tr></table></figure><p>实例显示出实际的工作目录，而非连结档本身的目录名而已。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www ~]# cd /var/mail   &lt;==注意，/var/mail是一个连结档<br>[root@www mail]# pwd<br>/var/mail         &lt;==列出目前的工作目录<br>[root@www mail]# pwd -P<br>/var/spool/mail   &lt;==怎么回事？有没有加 -P 差很多～<br>[root@www mail]# ls -ld /var/mail<br>lrwxrwxrwx 1 root root 10 Sep  4 17:54 /var/mail -&gt; spool/mail<br># 看到这里应该知道为啥了吧？因为 /var/mail 是连结档，连结到 /var/spool/mail <br># 所以，加上 pwd -P 的选项后，会不以连结档的数据显示，而是显示正确的完整路径啊！<br></code></pre></td></tr></table></figure><h5 id="mkdir-创建新目录"><a href="#mkdir-创建新目录" class="headerlink" title="mkdir (创建新目录)"></a>mkdir (创建新目录)</h5><p>如果想要创建新的目录的话，那么就使用mkdir (make directory)吧。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">mkdir [-mp] 目录名称<br></code></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-m ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～</li><li>-p ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！</li></ul><p>实例：请到/tmp底下尝试创建数个新目录看看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www ~]# cd /tmp<br>[root@www tmp]# mkdir test    &lt;==创建一名为 test 的新目录<br>[root@www tmp]# mkdir test1/test2/test3/test4<br>mkdir: cannot create directory `test1/test2/test3/test4&#x27;: <br>No such file or directory       &lt;== 没办法直接创建此目录啊！<br>[root@www tmp]# mkdir -p test1/test2/test3/test4<br></code></pre></td></tr></table></figure><p>加了这个 -p 的选项，可以自行帮你创建多层目录！</p><p>实例：创建权限为 <strong>rwx–x–x</strong> 的目录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www tmp]# mkdir -m 711 test2<br>[root@www tmp]# ls -l<br>drwxr-xr-x  3 root  root 4096 Jul 18 12:50 test<br>drwxr-xr-x  3 root  root 4096 Jul 18 12:53 test1<br>drwx--x--x  2 root  root 4096 Jul 18 12:54 test2<br></code></pre></td></tr></table></figure><p>上面的权限部分，如果没有加上 -m 来强制配置属性，系统会使用默认属性。</p><p>如果我们使用 -m ，如上例我们给予 -m 711 来给予新的目录 drwx–x–x 的权限。</p><h5 id="rmdir-删除空的目录"><a href="#rmdir-删除空的目录" class="headerlink" title="rmdir (删除空的目录)"></a>rmdir (删除空的目录)</h5><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">rmdir [-p] 目录名称<br></code></pre></td></tr></table></figure><p>选项与参数：</p><ul><li><strong>-p ：</strong>连同上一级『空的』目录也一起删除</li></ul><p>删除 runoob 目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www tmp]# rmdir runoob/<br></code></pre></td></tr></table></figure><p>将 mkdir 实例中创建的目录(/tmp 底下)删除掉！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www tmp]# ls -l   &lt;==看看有多少目录存在？<br>drwxr-xr-x  3 root  root 4096 Jul 18 12:50 test<br>drwxr-xr-x  3 root  root 4096 Jul 18 12:53 test1<br>drwx--x--x  2 root  root 4096 Jul 18 12:54 test2<br>[root@www tmp]# rmdir test   &lt;==可直接删除掉，没问题<br>[root@www tmp]# rmdir test1  &lt;==因为尚有内容，所以无法删除！<br>rmdir: `test1&#x27;: Directory not empty<br>[root@www tmp]# rmdir -p test1/test2/test3/test4<br>[root@www tmp]# ls -l        &lt;==您看看，底下的输出中test与test1不见了！<br>drwx--x--x  2 root  root 4096 Jul 18 12:54 test2<br></code></pre></td></tr></table></figure><p>利用 -p 这个选项，立刻就可以将 test1/test2/test3/test4 一次删除。</p><p>不过要注意的是，这个 rmdir 仅能删除空的目录，你可以使用 rm 命令来删除非空目录。</p><h5 id="cp-复制文件或目录"><a href="#cp-复制文件或目录" class="headerlink" title="cp (复制文件或目录)"></a>cp (复制文件或目录)</h5><p>cp 即拷贝文件和目录。</p><p>语法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www ~]# cp [-adfilprsu] 来源档(source) 目标档(destination)<br>[root@www ~]# cp [options] source1 source2 source3 .... directory<br></code></pre></td></tr></table></figure><p>选项与参数：</p><ul><li><strong>-a：</strong>相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)</li><li><strong>-d：</strong>若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</li><li><strong>-f：</strong>为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</li><li><strong>-i：</strong>若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</li><li><strong>-l：</strong>进行硬式连结(hard link)的连结档创建，而非复制文件本身；</li><li><strong>-p：</strong>连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</li><li><strong>-r：</strong>递归持续复制，用於目录的复制行为；(常用)</li><li><strong>-s：</strong>复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</li><li><strong>-u：</strong>若 destination 比 source 旧才升级 destination ！</li></ul><p>用 root 身份，将 root 目录下的 .bashrc 复制到 /tmp 下，并命名为 bashrc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www ~]# cp ~/.bashrc /tmp/bashrc<br>[root@www ~]# cp -i ~/.bashrc /tmp/bashrc<br>cp: overwrite `/tmp/bashrc&#x27;? n  &lt;==n不覆盖，y为覆盖<br></code></pre></td></tr></table></figure><h5 id="rm-移除文件或目录"><a href="#rm-移除文件或目录" class="headerlink" title="rm (移除文件或目录)"></a>rm (移除文件或目录)</h5><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">rm [-fir] 文件或目录<br></code></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</li><li>-i ：互动模式，在删除前会询问使用者是否动作</li><li>-r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！</li><li></li></ul><p>将刚刚在 cp 的实例中创建的 bashrc 删除掉！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www tmp]# rm -i bashrc<br>rm: remove regular file `bashrc&#x27;? y<br></code></pre></td></tr></table></figure><p>如果加上 -i 的选项就会主动询问喔，避免你删除到错误的档名！</p><h5 id="mv-移动文件与目录，或修改名称"><a href="#mv-移动文件与目录，或修改名称" class="headerlink" title="mv (移动文件与目录，或修改名称)"></a>mv (移动文件与目录，或修改名称)</h5><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www ~]# mv [-fiu] source destination<br>[root@www ~]# mv [options] source1 source2 source3 .... directory<br></code></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</li><li>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</li><li>-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)</li></ul><p>复制一文件，创建一目录，将文件移动到目录中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www ~]# cd /tmp<br>[root@www tmp]# cp ~/.bashrc bashrc<br>[root@www tmp]# mkdir mvtest<br>[root@www tmp]# mv bashrc mvtest<br></code></pre></td></tr></table></figure><p>将某个文件移动到某个目录去，就是这样做！</p><p>将刚刚的目录名称更名为 mvtest2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www tmp]# mv mvtest mvtest2<br></code></pre></td></tr></table></figure><hr><h3 id="9-4Linux-查看指令"><a href="#9-4Linux-查看指令" class="headerlink" title="9.4Linux 查看指令"></a>9.4Linux 查看指令</h3><p>Linux系统中使用以下命令来查看文件的内容：</p><ul><li><p>cat 由第一行开始显示文件内容</p></li><li><p>tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</p></li><li><p>nl  显示的时候，顺道输出行号！</p></li><li><p>more 一页一页的显示文件内容</p></li><li><p>less 与 more 类似，但是比 more 更好的是，他可以往前翻页！</p></li><li><p>head 只看头几行</p></li><li><p>tail 只看尾巴几行</p></li><li><p>echo 输出内容到控制台</p></li><li><blockquote><p>指令和&gt;&gt; 指令</p></blockquote></li></ul><p>你可以使用 *man [命令]*来查看各个命令的使用文档，如 ：man cp。</p><h5 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h5><p>由第一行开始显示文件内容</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">cat [-AbEnTv]<br></code></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-A ：相当於 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</li><li>-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！</li><li>-E ：将结尾的断行字节 $ 显示出来；</li><li>-n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；</li><li>-T ：将 [tab] 按键以 ^I 显示出来；</li><li>-v ：列出一些看不出来的特殊字符</li></ul><p>检看 /etc/issue 这个文件的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www ~]# cat /etc/issue<br>CentOS release 6.4 (Final)<br>Kernel \r on an \m<br></code></pre></td></tr></table></figure><h5 id="tac"><a href="#tac" class="headerlink" title="tac"></a>tac</h5><p>tac与cat命令刚好相反，文件内容从最后一行开始显示，可以看出 tac 是 cat 的倒着写！如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www ~]# tac /etc/issue<br><br>Kernel \r on an \m<br>CentOS release 6.4 (Final)<br></code></pre></td></tr></table></figure><h5 id="nl"><a href="#nl" class="headerlink" title="nl"></a>nl</h5><p>显示行号</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">nl [-bnw] 文件<br></code></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-b ：指定行号指定的方式，主要有两种：<br>-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；<br>-b t ：如果有空行，空的那一行不要列出行号(默认值)；</li><li>-n ：列出行号表示的方法，主要有三种：<br>-n ln ：行号在荧幕的最左方显示；<br>-n rn ：行号在自己栏位的最右方显示，且不加 0 ；<br>-n rz ：行号在自己栏位的最右方显示，且加 0 ；</li><li>-w ：行号栏位的占用的位数。</li></ul><p>实例一：用 nl 列出 /etc/issue 的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www ~]# nl /etc/issue<br>     1  CentOS release 6.4 (Final)<br>     2  Kernel \r on an \m<br></code></pre></td></tr></table></figure><h5 id="more"><a href="#more" class="headerlink" title="more"></a>more</h5><p>一页一页翻动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www ~]# more /etc/man_db.config <br>#<br># Generated automatically from man.conf.in by the<br># configure script.<br>#<br># man.conf from man-1.6d<br>....(中间省略)....<br>--More--(28%)  &lt;== 重点在这一行喔！你的光标也会在这里等待你的命令<br></code></pre></td></tr></table></figure><p>在 more 这个程序的运行过程中，你有几个按键可以按的：</p><ul><li>空白键 (space)：代表向下翻一页；</li><li>Enter     ：代表向下翻『一行』；</li><li>/字串     ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</li><li>:f      ：立刻显示出档名以及目前显示的行数；</li><li>q       ：代表立刻离开 more ，不再显示该文件内容。</li><li>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</li></ul><h5 id="less"><a href="#less" class="headerlink" title="less"></a>less</h5><p>一页一页翻动，以下实例输出/etc/man.config文件的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www ~]# less /etc/man.config<br>#<br># Generated automatically from man.conf.in by the<br># configure script.<br>#<br># man.conf from man-1.6d<br>....(中间省略)....<br>:   &lt;== 这里可以等待你输入命令！<br></code></pre></td></tr></table></figure><p>less运行时可以输入的命令有：</p><ul><li>空白键  ：向下翻动一页；</li><li>[pagedown]：向下翻动一页；</li><li>[pageup] ：向上翻动一页；</li><li>/字串   ：向下搜寻『字串』的功能；</li><li>?字串   ：向上搜寻『字串』的功能；</li><li>n     ：重复前一个搜寻 (与 / 或 ? 有关！)</li><li>N     ：反向的重复前一个搜寻 (与 / 或 ? 有关！)</li><li>q     ：离开 less 这个程序；</li></ul><h5 id="head"><a href="#head" class="headerlink" title="head"></a>head</h5><p>取出文件前面几行</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">head [-n number] 文件 <br></code></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-n ：后面接数字，代表显示几行的意思</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www ~]# head /etc/man.config<br></code></pre></td></tr></table></figure><p>默认的情况中，显示前面 10 行！若要显示前 20 行，就得要这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www ~]# head -n 20 /etc/man.config<br></code></pre></td></tr></table></figure><h5 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h5><p>取出文件后面几行</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">tail [-n number] 文件 <br></code></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-n ：后面接数字，代表显示几行的意思</li><li>-f ：表示持续侦测后面所接的档名，要等到按下[ctrl]-c才会结束tail的侦测</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www ~]# tail /etc/man.config<br># 默认的情况中，显示最后的十行！若要显示最后的 20 行，就得要这样：<br>[root@www ~]# tail -n 20 /etc/man.config<br></code></pre></td></tr></table></figure><h5 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h5><p>echo 输出内容到控制台</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">echo [选项][输出内容]<br></code></pre></td></tr></table></figure><blockquote><p>指令和&gt;&gt;指令</p></blockquote><blockquote><p>输出重定向和&gt;&gt;追加</p></blockquote><p>语法：</p><ul><li>ls -l&gt;文件   (功能描述：列表的内容写入文件中(覆盖写))</li><li>ls -al&gt;&gt;文件    (功能描述：列表的内容追加到文章末尾)</li><li>cat   文件1&gt;文件2   (功能描述：将文件1的内容覆盖到文件2)</li><li>echo “内容”&gt;&gt;文件(追加)</li></ul><h3 id="9-5Linux帮助指令"><a href="#9-5Linux帮助指令" class="headerlink" title="9.5Linux帮助指令"></a>9.5Linux帮助指令</h3><h4 id="9-5-1man-获得帮助指令"><a href="#9-5-1man-获得帮助指令" class="headerlink" title="9.5.1man  获得帮助指令"></a>9.5.1man  获得帮助指令</h4><p>基本语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">man[命令或配置文件](功能描述：获得帮助信息)<br></code></pre></td></tr></table></figure><h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><p>查看ls命令的帮助信息     man    ls</p><p>在Linux下，隐藏文件是以    .开头，选项可以组合使用，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ls -al,      ls -al/root<br></code></pre></td></tr></table></figure><h4 id="9-5-2help命令"><a href="#9-5-2help命令" class="headerlink" title="9.5.2help命令"></a>9.5.2help命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">help xxx 只能用于内部命令，<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">xxx --help  用于外部命令<br></code></pre></td></tr></table></figure><h4 id="9-5-3、info命令"><a href="#9-5-3、info命令" class="headerlink" title="9.5.3、info命令"></a>9.5.3、info命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$info ls<br></code></pre></td></tr></table></figure><h3 id="9-6时间日期类"><a href="#9-6时间日期类" class="headerlink" title="9.6时间日期类"></a>9.6时间日期类</h3><h4 id="9-6-1date指令-显示当前日期"><a href="#9-6-1date指令-显示当前日期" class="headerlink" title="9.6.1date指令-显示当前日期"></a>9.6.1date指令-显示当前日期</h4><p>基本语法：</p><ul><li>date          (功能描述：显示当前时间)</li><li>date+%Y    (功能描述：显示当前年份)</li><li>date+%m   (功能描述：显示当前月份)</li><li>date+%d     (功能描述：显示当前是那一天)</li><li>date+%Y-%m-%d %H:%M:%S  (功能描述：显示年月日时分秒)</li></ul><h4 id="9-6-2date指令-设置日期"><a href="#9-6-2date指令-设置日期" class="headerlink" title="9.6.2date指令-设置日期"></a>9.6.2date指令-设置日期</h4><p>基本语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">date  -s   字符串时间<br></code></pre></td></tr></table></figure><h4 id="9-6-3cal指令"><a href="#9-6-3cal指令" class="headerlink" title="9.6.3cal指令"></a>9.6.3cal指令</h4><p>查看日期指令 cal </p><p>基本语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">cal[选项] (功能描述：不加选项，显示本月日历)<br></code></pre></td></tr></table></figure><h3 id="9-7Linux搜索查找指令"><a href="#9-7Linux搜索查找指令" class="headerlink" title="9.7Linux搜索查找指令"></a>9.7Linux搜索查找指令</h3><h4 id="9-7-1find指令"><a href="#9-7-1find指令" class="headerlink" title="9.7.1find指令"></a>9.7.1find指令</h4><p>find指令是将从指定目录向下递归遍历其各个子目录，将满足条件的文件或目录显示在终端。</p><p>基本语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">find [搜索范围][选项]<br></code></pre></td></tr></table></figure><p>选项说明：</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-name&lt;查询方式&gt;</td><td>按照指定的文件名模式查找文件</td></tr><tr><td>-user&lt;用户名&gt;</td><td>查找属于指定文件名所有文件</td></tr><tr><td>-size&lt;文件大小&gt;</td><td>按照指定的文件大小查找文件</td></tr></tbody></table><p>应用实例：</p><h5 id="案例1：按文件名：根据名称查找-home目录下hello-txt文件"><a href="#案例1：按文件名：根据名称查找-home目录下hello-txt文件" class="headerlink" title="案例1：按文件名：根据名称查找/home目录下hello.txt文件"></a>案例1：按文件名：根据名称查找/home目录下hello.txt文件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">find /home -name hello.txt<br></code></pre></td></tr></table></figure><h5 id="案例2：按拥有着：查找-opt目录下，用户名称为nobody的文件"><a href="#案例2：按拥有着：查找-opt目录下，用户名称为nobody的文件" class="headerlink" title="案例2：按拥有着：查找/opt目录下，用户名称为nobody的文件"></a>案例2：按拥有着：查找/opt目录下，用户名称为nobody的文件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">find /opt -user nobody<br></code></pre></td></tr></table></figure><h5 id="案例3：查找整个Linux系统下大于200M的文件-n大于-n小于-n等于，"><a href="#案例3：查找整个Linux系统下大于200M的文件-n大于-n小于-n等于，" class="headerlink" title="案例3：查找整个Linux系统下大于200M的文件(+n大于  -n小于   n等于，)"></a>案例3：查找整个Linux系统下大于200M的文件(+n大于  -n小于   n等于，)</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">find /-size +200M<br></code></pre></td></tr></table></figure><h4 id="9-7-2locate指令"><a href="#9-7-2locate指令" class="headerlink" title="9.7.2locate指令"></a>9.7.2locate指令</h4><p>locate指令可以快速定位文件路径。locate指令利用事先建立的系统中所有文件名及路径的locate数据库实现快速定位文件。</p><p>基本语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">locate 搜索文件<br></code></pre></td></tr></table></figure><p>特别说明：</p><p>由于locate指令基于数据库进行查询，所以第一次运行前，必须使用updaedb指令创建locate数据库。</p><h4 id="9-7-3grep指令和管道指令"><a href="#9-7-3grep指令和管道指令" class="headerlink" title="9.7.3grep指令和管道指令 |"></a>9.7.3grep指令和管道指令 |</h4><p>grep指令过滤查找，管道符“|”，表示将前一个命令处理后的结果输出传送给后面的指令。</p><p>基本语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">grep[选项] 查找内容 源文件<br></code></pre></td></tr></table></figure><p>常用选项:</p><ul><li>-n    显示匹配行及行号</li><li>-i      忽略字母大小写</li></ul><h5 id="案例：请在hello-txt文件中，查找“yes”所在行，并显示行号"><a href="#案例：请在hello-txt文件中，查找“yes”所在行，并显示行号" class="headerlink" title="案例：请在hello.txt文件中，查找“yes”所在行，并显示行号"></a>案例：请在hello.txt文件中，查找“yes”所在行，并显示行号</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">写法一：cat /home/hello.txt |grep &quot;yes&quot;<br>写法二：grep -n &quot;yes&quot; /home/hello.txt<br></code></pre></td></tr></table></figure><h3 id="9-8压缩和解压类"><a href="#9-8压缩和解压类" class="headerlink" title="9.8压缩和解压类"></a>9.8压缩和解压类</h3><h4 id="9-8-1gzip-gunzip指令"><a href="#9-8-1gzip-gunzip指令" class="headerlink" title="9.8.1gzip/gunzip指令"></a>9.8.1gzip/gunzip指令</h4><p>gzip指令用于压缩文件，gunzip指令用于解压</p><p>基本语法：</p><p>gzip  文件   (功能描述：压缩文件，只能压缩*.gz文件)</p><p>gunzip    文件  (功能描述：解压缩文件命令)</p><h5 id="案例1：gzip压缩，将-home下的hello-txt文件进行压缩"><a href="#案例1：gzip压缩，将-home下的hello-txt文件进行压缩" class="headerlink" title="案例1：gzip压缩，将/home下的hello.txt文件进行压缩"></a>案例1：gzip压缩，将/home下的hello.txt文件进行压缩</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">gzip /home/hello.txt<br></code></pre></td></tr></table></figure><h5 id="案例2：gunzip压缩，将-home下的hello-txt-gz文件进行解压缩"><a href="#案例2：gunzip压缩，将-home下的hello-txt-gz文件进行解压缩" class="headerlink" title="案例2：gunzip压缩，将/home下的hello.txt.gz文件进行解压缩"></a>案例2：gunzip压缩，将/home下的hello.txt.gz文件进行解压缩</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">gunzip /home/hello.txt.gz<br></code></pre></td></tr></table></figure><h4 id="9-8-2zip-unzip指令"><a href="#9-8-2zip-unzip指令" class="headerlink" title="9.8.2zip/unzip指令"></a>9.8.2zip/unzip指令</h4><p>zip指令用于压缩文件，unzip指令用于解压</p><p>基本语法：</p><p>zip  [选项] xxx.zip   (功能描述：压缩文件，只能压缩*.gz文件)</p><p>unzip  [选项] xxx.zip   (功能描述：解压缩文件命令)</p><p>zip常用选项：</p><p>-r    递归压缩，及压缩目录</p><p>unzip常用选项：</p><p>-d&lt;目录&gt;  指定解压后文件的存放目录</p><h5 id="案例1：zip压缩，将-home下的所有文件进行压缩成myhone-zip"><a href="#案例1：zip压缩，将-home下的所有文件进行压缩成myhone-zip" class="headerlink" title="案例1：zip压缩，将/home下的所有文件进行压缩成myhone.zip"></a>案例1：zip压缩，将/home下的所有文件进行压缩成myhone.zip</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">zip -r myhome.zip /home/<br></code></pre></td></tr></table></figure><h5 id="案例2：unzip压缩，将myhome-zip解压到-opt-tmp目录下"><a href="#案例2：unzip压缩，将myhome-zip解压到-opt-tmp目录下" class="headerlink" title="案例2：unzip压缩，将myhome.zip解压到/opt/tmp目录下"></a>案例2：unzip压缩，将myhome.zip解压到/opt/tmp目录下</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">mkdir /opt/tmp<br>unzip -d /opt/tmp /myhome.zip<br></code></pre></td></tr></table></figure><h4 id="9-8-3tar指令"><a href="#9-8-3tar指令" class="headerlink" title="9.8.3tar指令"></a>9.8.3tar指令</h4><p>tar指令是打包指令，最后打包后的文件是.tar.gz的文件</p><p>基本语法：</p><p>tar  [选项] xxx.tar.gz   (功能描述：打包目录，压缩后的文件格式.tar.gz)</p><p>选项说明：</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-c</td><td>产生.tar打包文件</td></tr><tr><td>-v</td><td>显示详细信息</td></tr><tr><td>-f</td><td>指定压缩后的文件名</td></tr><tr><td>-z</td><td>打包同时压缩</td></tr><tr><td>-x</td><td>解包.tar文件</td></tr></tbody></table><h5 id="案例1：压缩多个文件，将-home-pig-txt和-home-cat-txt压缩成pc-tar-gz"><a href="#案例1：压缩多个文件，将-home-pig-txt和-home-cat-txt压缩成pc-tar-gz" class="headerlink" title="案例1：压缩多个文件，将/home/pig.txt和/home/cat.txt压缩成pc.tar.gz"></a>案例1：压缩多个文件，将/home/pig.txt和/home/cat.txt压缩成pc.tar.gz</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">tar -zcvf pc.tar.gz /home/pig.txt /home/cat.txt<br></code></pre></td></tr></table></figure><h5 id="案例2：将-home的文件夹压缩成myhome-tar-gz"><a href="#案例2：将-home的文件夹压缩成myhome-tar-gz" class="headerlink" title="案例2：将/home的文件夹压缩成myhome.tar.gz"></a>案例2：将/home的文件夹压缩成myhome.tar.gz</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">tar -zcvf myhom.tar.gz /home/<br></code></pre></td></tr></table></figure><h5 id="案例3：将pc-tar-gz解压到当前目录"><a href="#案例3：将pc-tar-gz解压到当前目录" class="headerlink" title="案例3：将pc.tar.gz解压到当前目录"></a>案例3：将pc.tar.gz解压到当前目录</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">tar -zxf pc.tar.gz<br></code></pre></td></tr></table></figure><h3 id="10Linux权限"><a href="#10Linux权限" class="headerlink" title="10Linux权限"></a>10Linux权限</h3><h4 id="10-1权限的基本介绍"><a href="#10-1权限的基本介绍" class="headerlink" title="10.1权限的基本介绍"></a>10.1权限的基本介绍</h4><p>Linux权限是操作系统用来限制对资源访问的机制，权限一般分为读、写、执行。系统中每个文件都拥有特定的权限、所属用户及所属组，通过这样的机制来限制哪些用户或用户组可以对特定文件进行相应的操作。 Linux每个进程都是以某个用户身份运行，进程的权限与该用户的权限一样，用户的权限越大，则进程拥有的权限就越大。</p><p> Lnux中有的文件及文件夹都有至少权限三种权限，常见的权限如表所示:</p><table><thead><tr><th>权限</th><th>对文件的影响</th><th>对目录的影响</th></tr></thead><tbody><tr><td>r（读取）</td><td>可读取文件内容</td><td>可列出目录内容</td></tr><tr><td>w（写入）</td><td>可修改文件内容</td><td>可在目录中创建删除内容</td></tr><tr><td>x（执行）</td><td>可作为命令执行</td><td>可访问目录内容</td></tr><tr><td>目录必须拥有 x 权限，否则无法查看其内容</td><td></td><td></td></tr></tbody></table><p>Linux权限授权，默认是授权给三种角色，分别是user、group、other，Linux权限与用户之间的关联如下：</p><ul><li>U代表User，G代表Group，O代表Other；</li></ul><p> 每个文件的权限基于UGO进行设置；</p><p>权限三位一组（rwx），同时需授权给三种角色，UGO；</p><p> 每个文件拥有一个所属用户和所属组，对应UGO，不属于该文件所属用户或所属组使用O来表示；</p><p>在Linux系统中，可以通过ls –l 查看peter.net目录的详细属性，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">drwxrwxr-x  2 peter1 peter1 4096 Dec 10 01:36 peter.net<br></code></pre></td></tr></table></figure><p>peter.net目录属性参数详解如下：</p><ul><li> d 表示目录，同一位置如果为-则表示普通文件；</li><li> rwxrwxr-x 表示三种角色的权限，每三位为一种角色，依次为u，g，o权限，如上则表示user的权限为rwx，group的权限为rwx，other的权限为r-x；</li><li> 2表示文件夹的链接数量，可理解为该目录下子目录的数量；</li><li> 从左到右，第一个peter1表示该用户名，第二个peter1则为组名，其他人角色默认不显示；</li><li> 4096表示该文件夹占据的字节数；</li><li> Dec 10 01:36 表示文件创建或者修改的时间；</li><li>peter.net 为目录的名，或者文件名。</li></ul><h4 id="10-2Chmod用户及组权限"><a href="#10-2Chmod用户及组权限" class="headerlink" title="10.2Chmod用户及组权限"></a>10.2Chmod用户及组权限</h4><p>修改某个用户、组对文件夹的权限，用命令chmod实现，其中以代指ugo，、-、=代表加入、删除和等于对应权限，具体案例如下：</p><p>（1） 授予用户对peter.net目录拥有rwx权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">chmod  –R  u+rwx  peter.net<br></code></pre></td></tr></table></figure><p>（2） 授予组对peter.net目录拥有rwx权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">chmod  –R  g+rwx  peter.net<br></code></pre></td></tr></table></figure><p>（3） 授予用户、组、其他人对jpeter.net目录拥有rwx权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">chmod  –R  u+rwx,g+rwx,o+rwx  peter.net<br></code></pre></td></tr></table></figure><p>（4） 撤销用户对peter.net目录拥有w权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">chmod  –R  u-w  peter.net<br></code></pre></td></tr></table></figure><p>（5） 撤销用户、组、其他人对peter.net目录拥有x权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">chmod  –R  u-x,g-x,o-x peter.net<br></code></pre></td></tr></table></figure><p>（6） 授予用户、组、其他人对jpeter.net目录只有rx权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">chmod  –R  u=rx,g=rx,o=rx  peter.net<br></code></pre></td></tr></table></figure><h4 id="10-3Chmod二进制权限"><a href="#10-3Chmod二进制权限" class="headerlink" title="10.3Chmod二进制权限"></a>10.3Chmod二进制权限</h4><p>Linux权限默认使用rwx来表示，为了更简化在系统中对权限进行配置和修改，Linux权限引入二进制表示方法，如下代码：</p><p>Linux权限可以将rwx用二进制来表示，其中有权限用1表示，没有权限用0表示；Linux权限用二进制显示如下：</p><p>rwx=111r-x=101rw-=110r–=100依次类推，转化为十进制，对应十进制结果显示如下：rwx=111=4+2+1=7r-x=101=4+0+1=5rw-=110=4+4+0=6r–=100=4+0+0=4得出结论，用r=4,w=2,x=1来表示权限。</p><p>使用二进制方式来修改权限案例演示如下，其中默认peter.nett目录权限为755：</p><p>（1） 授予用户对peter.net目录拥有rwx权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">chmod  –R  755 peter.net<br></code></pre></td></tr></table></figure><p>（2） 授予组对peter.net目录拥有rwx权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">chmod  –R  775 peter.net<br></code></pre></td></tr></table></figure><p>（3） 授予用户、组、其他人对peter.net目录拥有rwx权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">chmod  –R  777  peter.net<br></code></pre></td></tr></table></figure><h3 id="11Linux定时任务调度"><a href="#11Linux定时任务调度" class="headerlink" title="11Linux定时任务调度"></a>11Linux定时任务调度</h3><h4 id="11-1crond任务调度"><a href="#11-1crond任务调度" class="headerlink" title="11.1crond任务调度"></a>11.1crond任务调度</h4><p>crontab 进行定时任务的设置</p><h5 id="11-1-1概述"><a href="#11-1-1概述" class="headerlink" title="11.1.1概述"></a>11.1.1概述</h5><p>任务调度：</p><p>是指系统在某个时刻执行的特定的命令或程序</p><p>任务调度分类：</p><ol><li>系统工作：有些重要的工作必须周而复始地执行。</li><li>个别用户工作：个别用户可能希望执行某些程序，如备份</li></ol><h5 id="11-1-2基本语法"><a href="#11-1-2基本语法" class="headerlink" title="11.1.2基本语法"></a>11.1.2基本语法</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">crontab [选项]<br></code></pre></td></tr></table></figure><h5 id="11-1-3常用选项"><a href="#11-1-3常用选项" class="headerlink" title="11.1.3常用选项"></a>11.1.3常用选项</h5><table><thead><tr><th>-e</th><th>编辑crontab定时任务</th></tr></thead><tbody><tr><td>-l</td><td>查询 crontab任务</td></tr><tr><td>-r</td><td>删除当前用户所有的crontab任务</td></tr></tbody></table><h5 id="11-1-4快速入门"><a href="#11-1-4快速入门" class="headerlink" title="11.1.4快速入门"></a>11.1.4快速入门</h5><ol><li>设置任务调度文件：/etc/crontab</li><li>设置个人任务调度，执行 crontab -e命令</li><li>接着输入任务到调度文件。如：*/1****  ls -l /etc/&gt;/tmp/to.txt</li></ol><p>###参数细节说明</p><table><thead><tr><th>项目</th><th>含义</th><th>范围</th></tr></thead><tbody><tr><td>第一个“*”</td><td>一小时当中的第几个分钟</td><td>0~59</td></tr><tr><td>第二个“*”</td><td>一天当中的地几个小时</td><td>0~23</td></tr><tr><td>第三个“*”</td><td>一个月当中的第几天</td><td>1~31</td></tr><tr><td>第四个“*”</td><td>一年当中的第几个月</td><td>1~12</td></tr><tr><td>第五个“*”</td><td>一周当中的星期几</td><td>0~7(0和7都代表星期日)</td></tr></tbody></table><p>###特殊符号的说明</p><table><thead><tr><th align="center">特殊符号</th><th>含义</th></tr></thead><tbody><tr><td align="center">*</td><td>代表任何时间。比如第一个“*”就代表一小时中每分钟都执行一次</td></tr><tr><td align="center">‘</td><td>代表不连续的时间。比如“0 8，12，16***命令”，就代表每天的8点0分，12点0分，16点0分都执行一次</td></tr><tr><td align="center">-</td><td>代表连续的范围。比如“0 5 * * 1-6命令”，代表在周一到周六的凌晨5点0分执行命令</td></tr><tr><td align="center">*/n</td><td>代表每隔多久执行一次。比如“*/10  * * * *命令”，代表每隔10分钟就执行一次</td></tr></tbody></table><h5 id="11-1-5crond相关指令"><a href="#11-1-5crond相关指令" class="headerlink" title="11.1.5crond相关指令"></a>11.1.5crond相关指令</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">crontab   -r:     终止任务调度<br><br>crontab   -l:      列出当前有哪些任务调度<br><br>servicecrondrestart[重启任务调度]<br></code></pre></td></tr></table></figure><h4 id="11-2at定时任务"><a href="#11-2at定时任务" class="headerlink" title="11.2at定时任务"></a>11.2at定时任务</h4><h5 id="11-2-1基本介绍"><a href="#11-2-1基本介绍" class="headerlink" title="11.2.1基本介绍"></a>11.2.1基本介绍</h5><ol><li><p>at命令是一 次性定时计划任务, at的守护进程atd会以后台模式运行，检查作业队列来运行。</p></li><li><p>默认情况下，atd守护进程每60秒检查作业队列,有作业时,会检查作业运行时间，如果时间与当前时间匹配，则运行此作业。</p></li><li><p>at命令是一 次性定时计划任务，执行完个任务后不再执行此任务 了</p></li><li><p>在使用at命令的时候 ，-定要保证atd进程的启动，可以使用相关指令来查看。</p></li></ol><h5 id="11-2-2at命令格式"><a href="#11-2-2at命令格式" class="headerlink" title="11.2.2at命令格式"></a>11.2.2at命令格式</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">at  [选项][时间]<br><br>Ctrl + D结束at命令的输入（要输两次）<br></code></pre></td></tr></table></figure><h5 id="11-2-3at命令选项"><a href="#11-2-3at命令选项" class="headerlink" title="11.2.3at命令选项"></a>11.2.3at命令选项</h5><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-m</td><td>当指定的任务被完成时，将给用户发送邮件，即使没有标准输出</td></tr><tr><td>-I</td><td>atq的别名</td></tr><tr><td>-d</td><td>atrm的别名</td></tr><tr><td>-v</td><td>显示任务将被执行的时间</td></tr><tr><td>-c</td><td>打印任务的内容到标准输出</td></tr><tr><td>-V</td><td>显示版本信息</td></tr><tr><td>-q&lt;队列&gt;</td><td>使用指定的队列</td></tr><tr><td>-f&lt;文件&gt;</td><td>从指定文件读入任务而不是从标准输入读入</td></tr><tr><td>-t&lt;时间参数&gt;</td><td>以时间参数的形式提交要运行的任务</td></tr></tbody></table><h5 id="11-2-4at时间定义"><a href="#11-2-4at时间定义" class="headerlink" title="11.2.4at时间定义"></a>11.2.4at时间定义</h5><p>###at指定时间的方法</p><p>1.接受在当天的hh:mm (小时:分钟)式的时间指定。假如该时间已过去，那么就放在第二天执行。例如:04:00</p><p>2.使用midnight (深夜)，noon (中午)，teatime (饮茶时间，-般是下午4点)等比较模糊的词语来指定时间。</p><p>3.采用12小时计时制，即在时间后面加上AM (上午)或PM (下午)来说明是上午还是下午。例如: 12pm。</p><p>4.指定命令执行的具体日期，指定格式为month day(月日)或mm/dd/yy (月/日/年)或dd.mm.yy( 日.月年) ,指定的日期必须跟在指定时间的后面。例如: 04:00 2021-08-1</p><p>5.使用相对计时法。指定格式为: now + count time-units， now就是当前时间, time-units是时间单位，这里能够是minutes (分钟)、hours (小时)、days (天)、weeks (星期)●count是时间的数量，几天，几小时。例如: now + 5 minutes</p><p>6.直接使用today (今天)、tomorrow (明天)来指定完成命令的时间。</p><h3 id="12Linux磁盘分区"><a href="#12Linux磁盘分区" class="headerlink" title="12Linux磁盘分区"></a>12Linux磁盘分区</h3><h4 id="12-1Linux分区"><a href="#12-1Linux分区" class="headerlink" title="12.1Linux分区"></a>12.1Linux分区</h4><h5 id="12-1-1原理介绍"><a href="#12-1-1原理介绍" class="headerlink" title="12.1.1原理介绍"></a>12.1.1原理介绍</h5><p>Linux 磁盘管理好坏直接关系到整个系统的性能问题。</p><p>Linux 磁盘管理常用三个命令为 <strong>df</strong>、<strong>du</strong> 和 <strong>fdisk</strong>。</p><ul><li><strong>df</strong>（英文全称：disk full）：列出文件系统的整体磁盘使用量</li><li><strong>du</strong>（英文全称：disk used）：检查磁盘空间使用量</li><li><strong>fdisk</strong>：用于磁盘分区</li></ul><hr><h4 id="12-2查询系统整体磁盘使用情况"><a href="#12-2查询系统整体磁盘使用情况" class="headerlink" title="12.2查询系统整体磁盘使用情况"></a>12.2查询系统整体磁盘使用情况</h4><h5 id="12-2-1df命令"><a href="#12-2-1df命令" class="headerlink" title="12.2.1df命令"></a>12.2.1df命令</h5><p>df命令参数功能：检查文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">df [-ahikHTm] [目录或文件名]<br></code></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-a ：列出所有的文件系统，包括系统特有的 /proc 等文件系统；</li><li>-k ：以 KBytes 的容量显示各文件系统；</li><li>-m ：以 MBytes 的容量显示各文件系统；</li><li>-h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</li><li>-H ：以 M=1000K 取代 M=1024K 的进位方式；</li><li>-T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；</li><li>-i ：不用硬盘容量，而以 inode 的数量来显示</li></ul><h6 id="实例-1：将系统内所有的文件系统列出来！"><a href="#实例-1：将系统内所有的文件系统列出来！" class="headerlink" title="实例 1：将系统内所有的文件系统列出来！"></a>实例 1：将系统内所有的文件系统列出来！</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www ~]# df<br>Filesystem      1K-blocks      Used Available Use% Mounted on<br>/dev/hdc2         9920624   3823112   5585444  41% /<br>/dev/hdc3         4956316    141376   4559108   4% /home<br>/dev/hdc1          101086     11126     84741  12% /boot<br>tmpfs              371332         0    371332   0% /dev/shm<br></code></pre></td></tr></table></figure><p>在 Linux 底下如果 df 没有加任何选项，那么默认会将系统内所有的 (不含特殊内存内的文件系统与 swap) 都以 1 Kbytes 的容量来列出来！</p><h6 id="实例-2：将容量结果以易读的容量格式显示出来"><a href="#实例-2：将容量结果以易读的容量格式显示出来" class="headerlink" title="实例 2：将容量结果以易读的容量格式显示出来"></a>实例 2：将容量结果以易读的容量格式显示出来</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www ~]# df -h<br>Filesystem            Size  Used Avail Use% Mounted on<br>/dev/hdc2             9.5G  3.7G  5.4G  41% /<br>/dev/hdc3             4.8G  139M  4.4G   4% /home<br>/dev/hdc1              99M   11M   83M  12% /boot<br>tmpfs                 363M     0  363M   0% /dev/shm<br></code></pre></td></tr></table></figure><h6 id="实例-3：将系统内的所有特殊文件格式及名称都列出来"><a href="#实例-3：将系统内的所有特殊文件格式及名称都列出来" class="headerlink" title="实例 3：将系统内的所有特殊文件格式及名称都列出来"></a>实例 3：将系统内的所有特殊文件格式及名称都列出来</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www ~]# df -aT<br>Filesystem    Type 1K-blocks    Used Available Use% Mounted on<br>/dev/hdc2     ext3   9920624 3823112   5585444  41% /<br>proc          proc         0       0         0   -  /proc<br>sysfs        sysfs         0       0         0   -  /sys<br>devpts      devpts         0       0         0   -  /dev/pts<br>/dev/hdc3     ext3   4956316  141376   4559108   4% /home<br>/dev/hdc1     ext3    101086   11126     84741  12% /boot<br>tmpfs        tmpfs    371332       0    371332   0% /dev/shm<br>none   binfmt_misc         0       0         0   -  /proc/sys/fs/binfmt_misc<br>sunrpc  rpc_pipefs         0       0         0   -  /var/lib/nfs/rpc_pipefs<br></code></pre></td></tr></table></figure><h6 id="实例-4：将-etc-底下的可用的磁盘容量以易读的容量格式显示"><a href="#实例-4：将-etc-底下的可用的磁盘容量以易读的容量格式显示" class="headerlink" title="实例 4：将 /etc 底下的可用的磁盘容量以易读的容量格式显示"></a>实例 4：将 /etc 底下的可用的磁盘容量以易读的容量格式显示</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www ~]# df -h /etc<br>Filesystem            Size  Used Avail Use% Mounted on<br>/dev/hdc2             9.5G  3.7G  5.4G  41% /<br></code></pre></td></tr></table></figure><hr><h4 id="12-3查询指定目录的磁盘占用情况"><a href="#12-3查询指定目录的磁盘占用情况" class="headerlink" title="12.3查询指定目录的磁盘占用情况"></a>12.3查询指定目录的磁盘占用情况</h4><h5 id="12-3-1du命令"><a href="#12-3-1du命令" class="headerlink" title="12.3.1du命令"></a>12.3.1du命令</h5><p>Linux du 命令也是查看使用空间的，但是与 df 命令不同的是 Linux du 命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的，这里介绍 Linux du 命令。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">du [-ahskm] 文件或目录名称<br></code></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。</li><li>-h ：以人们较易读的容量格式 (G/M) 显示；</li><li>-s ：列出总量而已，而不列出每个各别的目录占用容量；</li><li>-S ：不包括子目录下的总计，与 -s 有点差别。</li><li>-k ：以 KBytes 列出容量显示；</li><li>-m ：以 MBytes 列出容量显示；</li></ul><h6 id="实例-1：只列出当前目录下的所有文件夹容量（包括隐藏文件夹）"><a href="#实例-1：只列出当前目录下的所有文件夹容量（包括隐藏文件夹）" class="headerlink" title="实例 1：只列出当前目录下的所有文件夹容量（包括隐藏文件夹）:"></a>实例 1：只列出当前目录下的所有文件夹容量（包括隐藏文件夹）:</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www ~]# du<br>8       ./test4     &lt;==每个目录都会列出来<br>8       ./test2<br>....中间省略....<br>12      ./.gconfd   &lt;==包括隐藏文件的目录<br>220     .           &lt;==这个目录(.)所占用的总量<br></code></pre></td></tr></table></figure><p>直接输入 du 没有加任何选项时，则 du 会分析当前所在目录里的子目录所占用的硬盘空间。</p><h6 id="实例-2：将文件的容量也列出来"><a href="#实例-2：将文件的容量也列出来" class="headerlink" title="实例 2：将文件的容量也列出来"></a>实例 2：将文件的容量也列出来</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www ~]# du -a<br>12      ./install.log.syslog   &lt;==有文件的列表了<br>8       ./.bash_logout<br>8       ./test4<br>8       ./test2<br>....中间省略....<br>12      ./.gconfd<br>220     .<br></code></pre></td></tr></table></figure><h6 id="实例-3：检查根目录底下每个目录所占用的容量"><a href="#实例-3：检查根目录底下每个目录所占用的容量" class="headerlink" title="实例 3：检查根目录底下每个目录所占用的容量"></a>实例 3：检查根目录底下每个目录所占用的容量</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www ~]# du -sm /*<br>7       /bin<br>6       /boot<br>.....中间省略....<br>0       /proc<br>.....中间省略....<br>1       /tmp<br>3859    /usr     &lt;==系统初期最大就是他了啦！<br>77      /var<br></code></pre></td></tr></table></figure><p>通配符 * 来代表每个目录。</p><p>与 df 不一样的是，du 这个命令其实会直接到文件系统内去搜寻所有的文件数据。</p><hr><h4 id="12-4Linux增加磁盘"><a href="#12-4Linux增加磁盘" class="headerlink" title="12.4Linux增加磁盘"></a>12.4Linux增加磁盘</h4><h5 id="12-4-1fdisk命令"><a href="#12-4-1fdisk命令" class="headerlink" title="12.4.1fdisk命令"></a>12.4.1fdisk命令</h5><p>fdisk 是 Linux 的磁盘分区表操作工具。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">fdisk [-l] 装置名称<br></code></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-l ：输出后面接的装置所有的分区内容。若仅有 fdisk -l 时， 则系统将会把整个系统内能够搜寻到的装置的分区均列出来。</li><li>-m：显示命令列表</li><li>-p :   显示磁盘分区    </li><li>-n：  新增分区</li><li>-d：  删除分区</li></ul><h6 id="实例-1：列出所有分区信息"><a href="#实例-1：列出所有分区信息" class="headerlink" title="实例 1：列出所有分区信息"></a>实例 1：列出所有分区信息</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@AY120919111755c246621 tmp]# fdisk -l<br><br>Disk /dev/xvda: 21.5 GB, 21474836480 bytes<br>255 heads, 63 sectors/track, 2610 cylinders<br>Units = cylinders of 16065 * 512 = 8225280 bytes<br>Sector size (logical/physical): 512 bytes / 512 bytes<br>I/O size (minimum/optimal): 512 bytes / 512 bytes<br>Disk identifier: 0x00000000<br><br>    Device Boot      Start         End      Blocks   Id  System<br>/dev/xvda1   *           1        2550    20480000   83  Linux<br>/dev/xvda2            2550        2611      490496   82  Linux swap / Solaris<br><br>Disk /dev/xvdb: 21.5 GB, 21474836480 bytes<br>255 heads, 63 sectors/track, 2610 cylinders<br>Units = cylinders of 16065 * 512 = 8225280 bytes<br>Sector size (logical/physical): 512 bytes / 512 bytes<br>I/O size (minimum/optimal): 512 bytes / 512 bytes<br>Disk identifier: 0x56f40944<br><br>    Device Boot      Start         End      Blocks   Id  System<br>/dev/xvdb2               1        2610    20964793+  83  Linux<br></code></pre></td></tr></table></figure><h6 id="实例-2：找出你系统中的根目录所在磁盘，并查阅该硬盘内的相关信息"><a href="#实例-2：找出你系统中的根目录所在磁盘，并查阅该硬盘内的相关信息" class="headerlink" title="实例 2：找出你系统中的根目录所在磁盘，并查阅该硬盘内的相关信息"></a>实例 2：找出你系统中的根目录所在磁盘，并查阅该硬盘内的相关信息</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www ~]# df /            &lt;==注意：重点在找出磁盘文件名而已<br>Filesystem           1K-blocks      Used Available Use% Mounted on<br>/dev/hdc2              9920624   3823168   5585388  41% /<br><br>[root@www ~]# fdisk /dev/hdc  &lt;==仔细看，不要加上数字喔！<br>The number of cylinders for this disk is set to 5005.<br>There is nothing wrong with that, but this is larger than 1024,<br>and could in certain setups cause problems with:<br>1) software that runs at boot time (e.g., old versions of LILO)<br>2) booting and partitioning software from other OSs<br>   (e.g., DOS FDISK, OS/2 FDISK)<br><br>Command (m for help):     &lt;==等待你的输入！<br></code></pre></td></tr></table></figure><p>输入 m 后，就会看到底下这些命令介绍</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Command (m for help): m   &lt;== 输入 m 后，就会看到底下这些命令介绍<br>Command action<br>   a   toggle a bootable flag<br>   b   edit bsd disklabel<br>   c   toggle the dos compatibility flag<br>   d   delete a partition            &lt;==删除一个partition<br>   l   list known partition types<br>   m   print this menu<br>   n   add a new partition           &lt;==新增一个partition<br>   o   create a new empty DOS partition table<br>   p   print the partition table     &lt;==在屏幕上显示分割表<br>   q   quit without saving changes   &lt;==不储存离开fdisk程序<br>   s   create a new empty Sun disklabel<br>   t   change a partition&#x27;s system id<br>   u   change display/entry units<br>   v   verify the partition table<br>   w   write table to disk and exit  &lt;==将刚刚的动作写入分割表<br>   x   extra functionality (experts only)<br></code></pre></td></tr></table></figure><p>离开 fdisk 时按下 <code>q</code>，那么所有的动作都不会生效！相反的， 按下<code>w</code>就是动作生效的意思。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Command (m for help): p  &lt;== 这里可以输出目前磁盘的状态<br><br>Disk /dev/hdc: 41.1 GB, 41174138880 bytes        &lt;==这个磁盘的文件名与容量<br>255 heads, 63 sectors/track, 5005 cylinders      &lt;==磁头、扇区与磁柱大小<br>Units = cylinders of 16065 * 512 = 8225280 bytes &lt;==每个磁柱的大小<br><br>   Device Boot      Start         End      Blocks   Id  System<br>/dev/hdc1   *           1          13      104391   83  Linux<br>/dev/hdc2              14        1288    10241437+  83  Linux<br>/dev/hdc3            1289        1925     5116702+  83  Linux<br>/dev/hdc4            1926        5005    24740100    5  Extended<br>/dev/hdc5            1926        2052     1020096   82  Linux swap / Solaris<br># 装置文件名 启动区否 开始磁柱    结束磁柱  1K大小容量 磁盘分区槽内的系统<br><br>Command (m for help): q<br></code></pre></td></tr></table></figure><p>想要不储存离开吗？按下 q 就对了！不要随便按 w 啊！</p><p>使用 <code>p</code> 可以列出目前这颗磁盘的分割表信息，这个信息的上半部在显示整体磁盘的状态。</p><hr><h4 id="12-5磁盘格式化"><a href="#12-5磁盘格式化" class="headerlink" title="12.5磁盘格式化"></a>12.5磁盘格式化</h4><p>磁盘分割完毕后自然就是要进行文件系统的格式化，格式化的命令非常的简单，使用 <code>mkfs</code>（make filesystem） 命令。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">mkfs [-t 文件系统格式] 装置文件名<br></code></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-t ：可以接文件系统格式，例如 ext3, ext2, vfat 等(系统有支持才会生效)</li></ul><h5 id="实例-1：查看-mkfs-支持的文件格式"><a href="#实例-1：查看-mkfs-支持的文件格式" class="headerlink" title="实例 1：查看 mkfs 支持的文件格式"></a>实例 1：查看 mkfs 支持的文件格式</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www ~]# mkfs[tab][tab]<br>mkfs         mkfs.cramfs  mkfs.ext2    mkfs.ext3    mkfs.msdos   mkfs.vfat<br></code></pre></td></tr></table></figure><p>按下两个[tab]，会发现 mkfs 支持的文件格式如上所示。</p><h5 id="实例-2：将分区-dev-hdc6（可指定你自己的分区）-格式化为-ext3-文件系统："><a href="#实例-2：将分区-dev-hdc6（可指定你自己的分区）-格式化为-ext3-文件系统：" class="headerlink" title="实例 2：将分区 /dev/hdc6（可指定你自己的分区） 格式化为 ext3 文件系统："></a>实例 2：将分区 /dev/hdc6（可指定你自己的分区） 格式化为 ext3 文件系统：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www ~]# mkfs -t ext3 /dev/hdc6<br>mke2fs 1.39 (29-May-2006)<br>Filesystem label=                &lt;==这里指的是分割槽的名称(label)<br>OS type: Linux<br>Block size=4096 (log=2)          &lt;==block 的大小配置为 4K <br>Fragment size=4096 (log=2)<br>251392 inodes, 502023 blocks     &lt;==由此配置决定的inode/block数量<br>25101 blocks (5.00%) reserved for the super user<br>First data block=0<br>Maximum filesystem blocks=515899392<br>16 block groups<br>32768 blocks per group, 32768 fragments per group<br>15712 inodes per group<br>Superblock backups stored on blocks:<br>        32768, 98304, 163840, 229376, 294912<br><br>Writing inode tables: done<br>Creating journal (8192 blocks): done &lt;==有日志记录<br>Writing superblocks and filesystem accounting information: done<br><br>This filesystem will be automatically checked every 34 mounts or<br>180 days, whichever comes first.  Use tune2fs -c or -i to override.<br># 这样就创建起来我们所需要的 Ext3 文件系统了！简单明了！<br></code></pre></td></tr></table></figure><hr><h4 id="12-6磁盘检验"><a href="#12-6磁盘检验" class="headerlink" title="12.6磁盘检验"></a>12.6磁盘检验</h4><p>fsck（file system check）用来检查和维护不一致的文件系统。</p><p>若系统掉电或磁盘发生问题，可利用fsck命令对文件系统进行检查。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">fsck [-t 文件系统] [-ACay] 装置名称<br></code></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-t : 给定档案系统的型式，若在 /etc/fstab 中已有定义或 kernel 本身已支援的则不需加上此参数</li><li>-s : 依序一个一个地执行 fsck 的指令来检查</li><li>-A : 对/etc/fstab 中所有列出来的 分区（partition）做检查</li><li>-C : 显示完整的检查进度</li><li>-d : 打印出 e2fsck 的 debug 结果</li><li>-p : 同时有 -A 条件时，同时有多个 fsck 的检查一起执行</li><li>-R : 同时有 -A 条件时，省略 / 不检查</li><li>-V : 详细显示模式</li><li>-a : 如果检查有错则自动修复</li><li>-r : 如果检查有错则由使用者回答是否修复</li><li>-y : 选项指定检测每个文件是自动输入yes，在不确定那些是不正常的时候，可以执行 # fsck -y 全部检查修复。</li></ul><h5 id="实例-1：查看系统有多少文件系统支持的-fsck-命令："><a href="#实例-1：查看系统有多少文件系统支持的-fsck-命令：" class="headerlink" title="实例 1：查看系统有多少文件系统支持的 fsck 命令："></a>实例 1：查看系统有多少文件系统支持的 fsck 命令：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www ~]# fsck[tab][tab]<br>fsck         fsck.cramfs  fsck.ext2    fsck.ext3    fsck.msdos   fsck.vfat<br></code></pre></td></tr></table></figure><h5 id="实例-2：强制检测-dev-hdc6-分区"><a href="#实例-2：强制检测-dev-hdc6-分区" class="headerlink" title="实例 2：强制检测 /dev/hdc6 分区:"></a>实例 2：强制检测 /dev/hdc6 分区:</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www ~]# fsck -C -f -t ext3 /dev/hdc6 <br>fsck 1.39 (29-May-2006)<br>e2fsck 1.39 (29-May-2006)<br>Pass 1: Checking inodes, blocks, and sizes<br>Pass 2: Checking directory structure<br>Pass 3: Checking directory connectivity<br>Pass 4: Checking reference counts<br>Pass 5: Checking group summary information<br>vbird_logical: 11/251968 files (9.1% non-contiguous), 36926/1004046 blocks<br></code></pre></td></tr></table></figure><p>如果没有加上 -f 的选项，则由于这个文件系统不曾出现问题，检查的经过非常快速！若加上 -f 强制检查，才会一项一项的显示过程。</p><hr><h4 id="12-7磁盘挂载与卸除"><a href="#12-7磁盘挂载与卸除" class="headerlink" title="12.7磁盘挂载与卸除"></a>12.7磁盘挂载与卸除</h4><p>Linux 的磁盘挂载使用 <code>mount</code> 命令，卸载使用 <code>umount</code> 命令。</p><p>磁盘挂载语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">mount [-t 文件系统] [-L Label名] [-o 额外选项] [-n]  装置文件名  挂载点<br></code></pre></td></tr></table></figure><h5 id="实例-：用默认的方式，将刚刚创建的-dev-hdc6-挂载到-mnt-hdc6-上面！"><a href="#实例-：用默认的方式，将刚刚创建的-dev-hdc6-挂载到-mnt-hdc6-上面！" class="headerlink" title="实例 ：用默认的方式，将刚刚创建的 /dev/hdc6 挂载到 /mnt/hdc6 上面！"></a>实例 ：用默认的方式，将刚刚创建的 /dev/hdc6 挂载到 /mnt/hdc6 上面！</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www ~]# mkdir /mnt/hdc6<br>[root@www ~]# mount /dev/hdc6 /mnt/hdc6<br>[root@www ~]# df<br>Filesystem           1K-blocks      Used Available Use% Mounted on<br>.....中间省略.....<br>/dev/hdc6              1976312     42072   1833836   3% /mnt/hdc6<br></code></pre></td></tr></table></figure><p>磁盘卸载命令 <code>umount</code> 语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">umount [-fn] 装置文件名或挂载点<br></code></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-f ：强制卸除！可用在类似网络文件系统 (NFS) 无法读取到的情况下；</li><li>-n ：不升级 /etc/mtab 情况下卸除。</li></ul><p>卸载/dev/hdc6</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www ~]# umount /dev/hdc6   <br></code></pre></td></tr></table></figure><h3 id="13Linux网络环境配置"><a href="#13Linux网络环境配置" class="headerlink" title="13Linux网络环境配置"></a>13Linux网络环境配置</h3><h4 id="13-1自动获取IP"><a href="#13-1自动获取IP" class="headerlink" title="13.1自动获取IP"></a>13.1自动获取IP</h4><p>说明：登陆后，通过界面的设置自动获取IP，</p><p>优点：Linux启动后会自动获取IP地址，</p><p>缺点：每次自动获取的IP地址可能不一样。</p><h4 id="13-2指定IP"><a href="#13-2指定IP" class="headerlink" title="13.2指定IP"></a>13.2指定IP</h4><p>说明：直接修改配置文件来指定IP，并可以连接到外网。</p><h5 id="13-2-1编辑："><a href="#13-2-1编辑：" class="headerlink" title="13.2.1编辑："></a>13.2.1编辑：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">vi /etc/sysconfig/network-scripts/ifcfg-ens33<br></code></pre></td></tr></table></figure><h5 id="13-2-2要求：将IP地址配置为静态，比如：IP地址位192-168-200-130"><a href="#13-2-2要求：将IP地址配置为静态，比如：IP地址位192-168-200-130" class="headerlink" title="13.2.2要求：将IP地址配置为静态，比如：IP地址位192.168.200.130"></a>13.2.2要求：将IP地址配置为静态，比如：IP地址位192.168.200.130</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ifcfg-ens33文件说明：<br>DEVICE=eth0       #接口名(设备，网卡)<br>HWADDR=00:0C:2x:6x:0x:xx    #MAC地址<br>TYPE=Ethemet        #网络类型<br>UUID=926a57ba-92c6-4231-bacb-f27e5e6a9f44 #随机id<br>#系统启动时网络接口是否有效<br>ONBOOT=yes<br>#IP的配置方式[none][static][bootp|dhcp]<br>BOOTRROTO=static<br>#IP地址<br>IPADDR=192.168.200.130<br>#网关<br>GATEWAY=192.168.200.2<br>#域名解析器<br>DNSI=192.168.200.2<br></code></pre></td></tr></table></figure><h5 id="13-2-3重启网络服务或重启系统生效"><a href="#13-2-3重启网络服务或重启系统生效" class="headerlink" title="13.2.3重启网络服务或重启系统生效"></a>13.2.3重启网络服务或重启系统生效</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">service network restart <br>或者：<br>reboot<br></code></pre></td></tr></table></figure><h3 id="14Linux进程管理"><a href="#14Linux进程管理" class="headerlink" title="14Linux进程管理"></a>14Linux进程管理</h3><h4 id="14-1基本介绍"><a href="#14-1基本介绍" class="headerlink" title="14.1基本介绍"></a>14.1基本介绍</h4><ol><li>在Linux中，每个执行的程序都称为一个进程。每一个进程都飞配一个id号(pid。进程号)。</li><li>每个进程都可能以两种方式存在。前台与后台，所谓前台就是用户目前的屏幕上可以进行操作的，后台进程则是实际在操作，</li><li>一般系统的服务都是以后台进程的方式存在，而且都会常驻在系统中，知道关机才结束。</li></ol><h4 id="14-2显示系统执行的进程"><a href="#14-2显示系统执行的进程" class="headerlink" title="14.2显示系统执行的进程"></a>14.2显示系统执行的进程</h4><h5 id="14-2-1基本介绍"><a href="#14-2-1基本介绍" class="headerlink" title="14.2.1基本介绍"></a>14.2.1基本介绍</h5><p>ps命令是用来查看当前系统中，有那些正在执行，以及他们的执行状况。可以不加任何参数。</p><h5 id="14-2-2ps详解"><a href="#14-2-2ps详解" class="headerlink" title="14.2.2ps详解"></a>14.2.2ps详解</h5><p>指令： ps-aux|grep xxx,比如我看看有没有sshd服务</p><p>指令说明：</p><ul><li>System V 展示风格</li><li>USER：用户名称</li><li>PID：进程号</li><li>%CPU：进程占用CPU的百分比</li><li>%MEM：进程占用物理内存的百分比</li><li>VSZ：进程占用的虚拟内存大小(单位：KB)</li><li>RSS：进程占用的物理内存大小(单位：KB)</li><li>TT：终端名称：缩写</li><li>STAT：进程状态，其中S-睡眠，s-表示进程是会话的先导进程，N-表示进程拥有比普通优先级更低的优先级，R-正在运行，D-短期等待，Z-僵死进程，T-被跟踪或者被停止。</li><li>STARTED：进程的启动时间</li><li>TIME：CPU时间，及进程使用CPU的总时间</li><li>COMMAND：启动进程所用的命令和参数，如果过长会被截断显示</li></ul><h4 id="14-3终止进程kill和killall"><a href="#14-3终止进程kill和killall" class="headerlink" title="14.3终止进程kill和killall"></a>14.3终止进程kill和killall</h4><h5 id="14-3-1介绍"><a href="#14-3-1介绍" class="headerlink" title="14.3.1介绍"></a>14.3.1介绍</h5><p>若是某个进程执行一半需要停止时，或是已占用很大的系统资源时，可以考虑停止该进程</p><h5 id="14-3-2基本语法"><a href="#14-3-2基本语法" class="headerlink" title="14.3.2基本语法"></a>14.3.2基本语法</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">kill [] 进程号(功能描述：通过进程号终止该进程)<br>killall 进程名称 (功能描述：通过进程名称终止该进程)<br></code></pre></td></tr></table></figure><h4 id="14-4查看进程树"><a href="#14-4查看进程树" class="headerlink" title="14.4查看进程树"></a>14.4查看进程树</h4><h5 id="14-4-1基本语法"><a href="#14-4-1基本语法" class="headerlink" title="14.4.1基本语法"></a>14.4.1基本语法</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">pstree [选项]，可以更加直观的来看进程信息<br></code></pre></td></tr></table></figure><h5 id="14-4-2常用选项"><a href="#14-4-2常用选项" class="headerlink" title="14.4.2常用选项"></a>14.4.2常用选项</h5><ul><li>-p :  显示进程的PID</li><li>-u :  显示进程的所属用户</li></ul><h4 id="14-5服务管理"><a href="#14-5服务管理" class="headerlink" title="14.5服务管理"></a>14.5服务管理</h4><h5 id="14-5-1介绍"><a href="#14-5-1介绍" class="headerlink" title="14.5.1介绍"></a>14.5.1介绍</h5><p>服务本质就是进程，但是运行在后台的，通常会监听某个端口，等待其他程序的请求，因此我们称为守护进程，</p><h5 id="14-5-2service管理指令"><a href="#14-5-2service管理指令" class="headerlink" title="14.5.2service管理指令"></a>14.5.2service管理指令</h5><ol><li>service 服务器名 [ start|stop|restart|reload|status]</li><li>service指令管理的服务在 /etc/init.d查看</li></ol><h5 id="14-5-3查看服务名"><a href="#14-5-3查看服务名" class="headerlink" title="14.5.3查看服务名"></a>14.5.3查看服务名</h5><p>方法一：使用setup-&gt;系统服务就可以看到全部</p><p>方法二：/etc/init.d查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ls -l /etc/init.d<br></code></pre></td></tr></table></figure><h5 id="14-5-4chkconfig指令"><a href="#14-5-4chkconfig指令" class="headerlink" title="14.5.4chkconfig指令"></a>14.5.4chkconfig指令</h5><h6 id="14-5-4-1介绍："><a href="#14-5-4-1介绍：" class="headerlink" title="14.5.4.1介绍："></a>14.5.4.1介绍：</h6><p>通过chkconfig命令可以给服务器的各个运行级别设置自启动/关闭</p><h6 id="14-5-4-2基本语法"><a href="#14-5-4-2基本语法" class="headerlink" title="14.5.4.2基本语法"></a>14.5.4.2基本语法</h6><ol><li>查看服务 chkconfig -list[|grep xxx]</li><li>chkconfig 服务名 -list</li><li>chkconfig -level 5 服务名 on/off</li></ol><h5 id="14-5-5打开或关闭指定端口"><a href="#14-5-5打开或关闭指定端口" class="headerlink" title="14.5.5打开或关闭指定端口"></a>14.5.5打开或关闭指定端口</h5><p>在真实的环境中，往往需要将防火墙打开，如果打开那麽外部请求数据包就不能跟服务器监听端口通讯。这时需要打开指定端口。</p><h6 id="14-5-5-1firewall指令"><a href="#14-5-5-1firewall指令" class="headerlink" title="14.5.5.1firewall指令"></a>14.5.5.1firewall指令</h6><p>firewalld是防火墙的另一种程序，与iptables相同，但是使用起来更加简单。一些firewall常用命令：</p><ul><li>firewall-cmd –state      防火墙状态</li><li>service firewalld start     打开防火墙</li><li>service firewalld stop     关闭防火墙</li><li>systemctl disable firewalld      禁止开机自启</li><li>systemctl enable firewalld     允许开机自启</li><li>firewall-cmd –list-all     查看当前的firewall的信息和配置</li></ul><p>例如：</p><p>一、先使用如下指令打开防火墙端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">firewall-cmd --zone=public --add-ports=10306/tcp --permanent<br><br></code></pre></td></tr></table></figure><p>二、重启防火墙，让新增的端口生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">firewall-cmd --reload<br><br></code></pre></td></tr></table></figure><p>三、查看防火墙打开的端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">firewall-cmd --list-ports<br><br></code></pre></td></tr></table></figure><p>四、启动服务，让服务监听这个10306端口</p><h4 id="14-6动态监控进程"><a href="#14-6动态监控进程" class="headerlink" title="14.6动态监控进程"></a>14.6动态监控进程</h4><h5 id="14-6-1介绍"><a href="#14-6-1介绍" class="headerlink" title="14.6.1介绍"></a>14.6.1介绍</h5><p>top命令经常用来监控linux的系统状况，是常用的性能分析工具，能够实时显示系统中各个进程的资源占用情况。top与ps相似，他们都是用来显示正在执行的进程，top再执行一段时间可以更新正在运行的进程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">top的使用方式 top [-d number] | top [-bnp]<br></code></pre></td></tr></table></figure><h5 id="14-6-2参数解释："><a href="#14-6-2参数解释：" class="headerlink" title="14.6.2参数解释："></a>14.6.2参数解释：</h5><ul><li>-d：number代表秒数，表示top命令显示的页面更新一次的间隔。默认是5秒。</li><li>-b：以批次的方式执行top。</li><li> -n：与-b配合使用，表示需要进行几次top命令的输出结果。 </li><li>-p：指定特定的pid进程号进行观察。</li><li>-i ：使top不显示任何闲置或者僵死进程</li></ul><p>在top命令显示的页面还可以输入以下按键执行相应的功能（注意大小写区分的）：</p><ul><li>?：显示在top当中可以输入的命令 </li><li>P：以CPU的使用资源排序显示</li><li> M：以内存的使用资源排序显示 </li><li>N：以pid排序显示</li><li> T：由进程使用的时间累计排序显示 </li><li>k：给某一个pid一个信号。可以用来杀死进程</li><li> r：给某个pid重新定制一个nice值（即优先级）</li><li> q：退出top（用ctrl+c也可以退出top）</li></ul><h4 id="14-7监控网络状态"><a href="#14-7监控网络状态" class="headerlink" title="14.7监控网络状态"></a>14.7监控网络状态</h4><h5 id="14-7-1查看系统网络情况netstat"><a href="#14-7-1查看系统网络情况netstat" class="headerlink" title="14.7.1查看系统网络情况netstat"></a>14.7.1查看系统网络情况netstat</h5><h6 id="14-7-1-1基本语法"><a href="#14-7-1-1基本语法" class="headerlink" title="14.7.1.1基本语法"></a>14.7.1.1基本语法</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">netstat [选项]<br></code></pre></td></tr></table></figure><h6 id="14-7-1-2选项说明"><a href="#14-7-1-2选项说明" class="headerlink" title="14.7.1.2选项说明"></a>14.7.1.2选项说明</h6><ul><li>-an    按一定顺序排列输出</li><li>-p    显示那个进程在调用</li></ul><h5 id="14-7-2检测主机连接命令ping"><a href="#14-7-2检测主机连接命令ping" class="headerlink" title="14.7.2检测主机连接命令ping"></a>14.7.2检测主机连接命令ping</h5><p>是一种网络检测工具，它主要是用来检测远程主机是否正常，或是两部主机间的网络或网卡故障。如ping对方的IP地址</p><h3 id="15Linux中RPM与YUM"><a href="#15Linux中RPM与YUM" class="headerlink" title="15Linux中RPM与YUM"></a>15Linux中RPM与YUM</h3><h4 id="15-1RPM包文件默认安装位置："><a href="#15-1RPM包文件默认安装位置：" class="headerlink" title="15.1RPM包文件默认安装位置："></a>15.1RPM包文件默认安装位置：</h4><ul><li>/etc/    配置文件默认安装目录</li><li>/usr/bin/    可执行的命令安装目录</li><li>/usr/lib/    所依赖的函数库文件保存位置</li><li>/usr/share/doc/    软件帮助文档保存位置</li><li>/usr/share/man/    软件手册保存位置</li></ul><h4 id="15-2相关命令"><a href="#15-2相关命令" class="headerlink" title="15.2相关命令"></a>15.2相关命令</h4><p>命令用途：RPM包的管理工具。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">rpm　-qa|grep xx<br>命令语法：rpm [选项] [包全名]|[包名]|[系统文件名]<br></code></pre></td></tr></table></figure><h4 id="15-3常用选项："><a href="#15-3常用选项：" class="headerlink" title="15.3常用选项："></a>15.3常用选项：</h4><ul><li><p>-i：安装（install）；</p></li><li><p>-U：升级（upgrade）；</p></li><li><p>-e：卸载（erase）；</p></li><li><p>-v：显示安装过程详细信息（verbose）；</p></li><li><p>-h：显示安装进度（hash）；</p></li><li><p>–nodeps：不检查依赖性； </p></li><li><p>-q：查询（query）；</p></li><li><p>-i：查询软件包信息（information）；</p></li><li><p>-l：查询包中文件的默认安装位置（list）；</p></li><li><p>-f：查询系统文件属于哪个软件包（file）；</p></li><li><p>-R：查询软件包的依赖性（requires）；</p></li><li><p>-a：查询所有（all）；</p></li><li><p>-p：查询未安装包信息（package）；</p></li><li><p>-V：校验指定RPM包中的文件（verify）； </p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">标识意义<br>S文件大小是否改变<br>M文件的类型（参照文件类型对照表）或文件的权限是否改变<br>5文件MD5校验值是否改变<br>D设备中的从代码是否改变<br>L文件路径是否改变<br>U文件的所有者是否改变<br>G文件的所属组是否改变<br>T文件的修改时间是否改变<br></code></pre></td></tr></table></figure><h6 id="校验的文件类型对照表如下。"><a href="#校验的文件类型对照表如下。" class="headerlink" title="校验的文件类型对照表如下。"></a>校验的文件类型对照表如下。</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">标识类型<br>c配置文件（config file）<br>d普通文档（documentation）<br>g“鬼”文件（ghost file），指不该出现在这个RPM包中的文件<br>l授权文件（license file）<br>r描述文件（read me）<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//查询所有已安装的httpd软件包<br>rpm -qa | grep httpd<br>//查询已安装的httpd软件包的详细信息<br>rpm -qi  httpd<br>//查询未安装的httpd-2.2.15-29.el6.centos.x86_64.rpm软件包的详细信息<br>rpm -qip  httpd-2.2.15-29.el6.centos.x86_64.rpm<br>//查询已安装的httpd软件包中文件的安装位置<br>rpm -ql  httpd<br>//查询未安装的httpd-2.2.15-29.el6.centos.x86_64.rpm软件包中文件的安装位置<br>rpm -qlp  httpd-2.2.15-29.el6.centos.x86_64.rpm<br>//查询系统文件/usr/sbin/httpd所属的软件包<br>rpm -qf /usr/sbin/httpd<br>//查询已安装的httpd软件包的依赖性<br>rpm -qR httpd<br>//查询未安装的httpd-2.2.15-29.el6.centos.x86_64.rpm软件包的依赖性<br>rpm -qRp httpd-2.2.15-29.el6.centos.x86_64.rpm<br>//校验已安装的httpd软件包<br>rpm -V httpd<br>//校验未安装的httpd-2.2.15-29.el6.centos.x86_64.rpm软件包<br>rpm -Vp httpd-2.2.15-29.el6.centos.x86_64.rpm<br></code></pre></td></tr></table></figure><p>注：在使用rpm命令时，若操作的包是未安装的软件包时，需使用包全名，而且要注意路径；若操作的是已经安装的软件包时，使用包名，系统会去/var/lib/rpm/中的数据库中搜索。</p><h4 id="15-4Linux-yum-命令"><a href="#15-4Linux-yum-命令" class="headerlink" title="15.4Linux yum 命令"></a>15.4Linux yum 命令</h4><p>yum（ Yellow dog Updater, Modified）是一个在 Fedora 和 RedHat 以及 SUSE 中的 Shell 前端软件包管理器。</p><p>基于 RPM 包管理，能够从指定的服务器自动下载 RPM 包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。</p><p>yum 提供了查找、安装、删除某一个、一组甚至全部软件包的命令，而且命令简洁而又好记。</p><h5 id="15-4-1yum-语法"><a href="#15-4-1yum-语法" class="headerlink" title="15.4.1yum 语法"></a>15.4.1yum 语法</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">yum [options] [command] [package ...]<br></code></pre></td></tr></table></figure><ul><li><strong>options：</strong>可选，选项包括-h（帮助），-y（当安装过程提示选择全部为 “yes”），-q（不显示安装的过程）等等。</li><li><strong>command：</strong>要进行的操作。</li><li><strong>package：</strong>安装的包名。</li></ul><hr><h5 id="15-4-2yum常用命令"><a href="#15-4-2yum常用命令" class="headerlink" title="15.4.2yum常用命令"></a>15.4.2yum常用命令</h5><ul><li>\1. 列出所有可更新的软件清单命令：<strong>yum check-update</strong></li><li>\2. 更新所有软件命令：<strong>yum update</strong></li><li>\3. 仅安装指定的软件命令：<strong>yum install <package_name></strong></li><li>\4. 仅更新指定的软件命令：<strong>yum update <package_name></strong></li><li>\5. 列出所有可安裝的软件清单命令：<strong>yum list</strong></li><li>\6. 删除软件包命令：<strong>yum remove <package_name></strong></li><li>\7. 查找软件包命令：<strong>yum search <keyword></strong></li><li>\8. 清除缓存命令:<ul><li><strong>yum clean packages</strong>: 清除缓存目录下的软件包</li><li><strong>yum clean headers</strong>: 清除缓存目录下的 headers</li><li><strong>yum clean oldheaders</strong>: 清除缓存目录下旧的 headers</li><li><strong>yum clean, yum clean all (= yum clean packages; yum clean oldheaders)</strong> :清除缓存目录下的软件包及旧的 headers</li></ul></li></ul><h6 id="实例-1安装-pam-devel"><a href="#实例-1安装-pam-devel" class="headerlink" title="实例 1安装 pam-devel"></a>实例 1安装 pam-devel</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www ~]# yum install pam-devel<br>Setting up Install Process<br>Parsing package install arguments<br>Resolving Dependencies  &lt;==先检查软件的属性相依问题<br>--&gt; Running transaction check<br>---&gt; Package pam-devel.i386 0:0.99.6.2-4.el5 set to be updated<br>--&gt; Processing Dependency: pam = 0.99.6.2-4.el5 for package: pam-devel<br>--&gt; Running transaction check<br>---&gt; Package pam.i386 0:0.99.6.2-4.el5 set to be updated<br>filelists.xml.gz          100% |=========================| 1.6 MB    00:05<br>filelists.xml.gz          100% |=========================| 138 kB    00:00<br>-&gt; Finished Dependency Resolution<br>……(省略)<br></code></pre></td></tr></table></figure><h6 id="实例-2移除-pam-devel"><a href="#实例-2移除-pam-devel" class="headerlink" title="实例 2移除 pam-devel"></a>实例 2移除 pam-devel</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www ~]# yum remove pam-devel<br>Setting up Remove Process<br>Resolving Dependencies  &lt;==同样的，先解决属性相依的问题<br>--&gt; Running transaction check<br>---&gt; Package pam-devel.i386 0:0.99.6.2-4.el5 set to be erased<br>--&gt; Finished Dependency Resolution<br>Dependencies Resolved<br>=============================================================================<br> Package                 Arch       Version          Repository        Size<br>=============================================================================<br>Removing:<br> pam-devel               i386       0.99.6.2-4.el5   installed         495 k<br><br>Transaction Summary<br>=============================================================================<br>Install      0 Package(s)<br>Update       0 Package(s)<br>Remove       1 Package(s)  &lt;==还好，并没有属性相依的问题，单纯移除一个软件<br><br>Is this ok [y/N]: y<br>Downloading Packages:<br>Running rpm_check_debug<br>Running Transaction Test<br>Finished Transaction Test<br>Transaction Test Succeeded<br>Running Transaction<br>  Erasing   : pam-devel                    ######################### [1/1]<br><br>Removed: pam-devel.i386 0:0.99.6.2-4.el5<br>Complete!<br></code></pre></td></tr></table></figure><h6 id="实例-3利用-yum-的功能，找出以-pam-为开头的软件名称有哪些？"><a href="#实例-3利用-yum-的功能，找出以-pam-为开头的软件名称有哪些？" class="headerlink" title="实例 3利用 yum 的功能，找出以 pam 为开头的软件名称有哪些？"></a>实例 3利用 yum 的功能，找出以 pam 为开头的软件名称有哪些？</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www ~]# yum list pam*<br>Installed Packages<br>pam.i386                  0.99.6.2-3.27.el5      installed<br>pam_ccreds.i386           3-5                    installed<br>pam_krb5.i386             2.2.14-1               installed<br>pam_passwdqc.i386         1.0.2-1.2.2            installed<br>pam_pkcs11.i386           0.5.3-23               installed<br>pam_smb.i386              1.1.7-7.2.1            installed<br>Available Packages &lt;==底下则是『可升级』的或『未安装』的<br>pam.i386                  0.99.6.2-4.el5         base<br>pam-devel.i386            0.99.6.2-4.el5         base<br>pam_krb5.i386             2.2.14-10              base<br></code></pre></td></tr></table></figure><hr><h4 id="15-5国内-yum-源"><a href="#15-5国内-yum-源" class="headerlink" title="15.5国内 yum 源"></a>15.5国内 yum 源</h4><p>网易（163）yum源是国内最好的yum源之一 ，无论是速度还是软件版本，都非常的不错。</p><p>将yum源设置为163 yum，可以提升软件包安装和更新的速度，同时避免一些常见软件版本无法找到。</p><h5 id="15-5-1安装步骤"><a href="#15-5-1安装步骤" class="headerlink" title="15.5.1安装步骤"></a>15.5.1安装步骤</h5><p>首先备份/etc/yum.repos.d/CentOS-Base.repo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup<br></code></pre></td></tr></table></figure><p>下载对应版本 repo 文件, 放入 /etc/yum.repos.d/ (操作前请做好相应备份)</p><ul><li><a href="http://mirrors.163.com/.help/CentOS5-Base-163.repo">CentOS5</a> ：<a href="http://mirrors.163.com/.help/CentOS5-Base-163.repo">http://mirrors.163.com/.help/CentOS5-Base-163.repo</a></li><li><a href="http://mirrors.163.com/.help/CentOS6-Base-163.repo">CentOS6</a> ：<a href="http://mirrors.163.com/.help/CentOS6-Base-163.repo">http://mirrors.163.com/.help/CentOS6-Base-163.repo</a></li><li><a href="http://mirrors.163.com/.help/CentOS7-Base-163.repo">CentOS7</a> ：<a href="http://mirrors.163.com/.help/CentOS7-Base-163.repo">http://mirrors.163.com/.help/CentOS7-Base-163.repo</a></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">wget http://mirrors.163.com/.help/CentOS6-Base-163.repo<br>mv CentOS6-Base-163.repo CentOS-Base.repo<br></code></pre></td></tr></table></figure><p>运行以下命令生成缓存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">yum clean all<br>yum makecache<br></code></pre></td></tr></table></figure><h2 id="—————————————————–"><a href="#—————————————————–" class="headerlink" title="—————————————————–"></a>—————————————————–</h2><h2 id="16大数据定制篇-shell编程"><a href="#16大数据定制篇-shell编程" class="headerlink" title="16大数据定制篇-shell编程"></a>16大数据定制篇-shell编程</h2><h3 id="16-1Shell-介绍"><a href="#16-1Shell-介绍" class="headerlink" title="16.1Shell 介绍"></a>16.1Shell 介绍</h3><p>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。</p><p>Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。</p><p>Ken Thompson 的 sh 是第一种 Unix Shell，Windows Explorer 是一个典型的图形界面 Shell。</p><h3 id="16-2Shell-脚本"><a href="#16-2Shell-脚本" class="headerlink" title="16.2Shell 脚本"></a>16.2Shell 脚本</h3><p>Shell 脚本（shell script），是一种为 shell 编写的脚本程序。</p><p>业界所说的 shell 通常都是指 shell 脚本，但读者朋友要知道，shell 和 shell script 是两个不同的概念。</p><p>由于习惯的原因，简洁起见，本文出现的 “shell编程” 都是指 shell 脚本编程，不是指开发 shell 自身。</p><hr><h3 id="16-3Shell-环境"><a href="#16-3Shell-环境" class="headerlink" title="16.3Shell 环境"></a>16.3Shell 环境</h3><p>Shell 编程跟 JavaScript、php 编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。</p><p>Linux 的 Shell 种类众多，常见的有：</p><ul><li>Bourne Shell（/usr/bin/sh或/bin/sh）</li><li>Bourne Again Shell（/bin/bash）</li><li>C Shell（/usr/bin/csh）</li><li>K Shell（/usr/bin/ksh）</li><li>Shell for Root（/sbin/sh）</li><li>……</li></ul><p>本教程关注的是 Bash，也就是 Bourne Again Shell，由于易用和免费，Bash 在日常工作中被广泛使用。同时，Bash 也是大多数Linux 系统默认的 Shell。</p><p>在一般情况下，人们并不区分 Bourne Shell 和 Bourne Again Shell，所以，像 <strong>#!/bin/sh</strong>，它同样也可以改为 <strong>#!/bin/bash</strong>。</p><p><strong>#!</strong> 告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 程序。</p><p>echo 命令用于向窗口输出文本。</p><h3 id="16-4Shell-脚本有两种方法："><a href="#16-4Shell-脚本有两种方法：" class="headerlink" title="16.4Shell 脚本有两种方法："></a>16.4Shell 脚本有两种方法：</h3><h4 id="16-4-1、作为可执行程序"><a href="#16-4-1、作为可执行程序" class="headerlink" title="16.4.1、作为可执行程序"></a>16.4.1、作为可执行程序</h4><p>将上面的代码保存为 test.sh，并 cd 到相应目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">chmod +x ./test.sh  #使脚本具有执行权限<br>./test.sh  #执行脚本<br></code></pre></td></tr></table></figure><p>注意，一定要写成 <strong>./test.sh</strong>，而不是 <strong>test.sh</strong>，运行其它二进制的程序也一样，直接写 test.sh，linux 系统会去 PATH 里寻找有没有叫 test.sh 的，而只有 /bin, /sbin, /usr/bin，/usr/sbin 等在 PATH 里，你的当前目录通常不在 PATH 里，所以写成 test.sh 是会找不到命令的，要用 ./test.sh 告诉系统说，就在当前目录找。</p><h4 id="16-4-2、作为解释器参数"><a href="#16-4-2、作为解释器参数" class="headerlink" title="16.4.2、作为解释器参数"></a>16.4.2、作为解释器参数</h4><p>这种运行方式是，直接运行解释器，其参数就是 shell 脚本的文件名，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">/bin/sh test.sh<br>/bin/php test.php<br></code></pre></td></tr></table></figure><p>这种方式运行的脚本，不需要在第一行指定解释器信息，写了也没用。</p><h3 id="16-5Shell-变量"><a href="#16-5Shell-变量" class="headerlink" title="16.5Shell 变量"></a>16.5Shell 变量</h3><p>定义变量时，变量名不加美元符号（$，PHP语言中变量需要），如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">your_name=&quot;runoob.com&quot;<br></code></pre></td></tr></table></figure><p>注意，变量名和等号之间不能有空格，这可能和你熟悉的所有编程语言都不一样。同时，变量名的命名须遵循如下规则：</p><ul><li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</li><li>中间不能有空格，可以使用下划线（_）。</li><li>不能使用标点符号。</li><li>不能使用bash里的关键字（可用help命令查看保留关键字）。</li></ul><p>有效的 Shell 变量名示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">RUNOOB<br>LD_LIBRARY_PATH<br>_var<br>var2<br></code></pre></td></tr></table></figure><p>无效的变量命名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">?var=123<br>user*name=runoob<br></code></pre></td></tr></table></figure><p>除了显式地直接赋值，还可以用语句给变量赋值，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">for file in `ls /etc`<br>或<br>for file in $(ls /etc)<br></code></pre></td></tr></table></figure><p>以上语句将 /etc 下目录的文件名循环出来。</p><hr><h4 id="16-5-1使用变量"><a href="#16-5-1使用变量" class="headerlink" title="16.5.1使用变量"></a>16.5.1使用变量</h4><p>使用一个定义过的变量，只要在变量名前面加美元符号即可，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">your_name=&quot;qinjx&quot;<br>echo $your_name<br>echo $&#123;your_name&#125;<br></code></pre></td></tr></table></figure><p>变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">for skill in Ada Coffe Action Java; do<br>    echo &quot;I am good at $&#123;skill&#125;Script&quot;<br>done<br></code></pre></td></tr></table></figure><p>如果不给skill变量加花括号，写成echo “I am good at $skillScript”，解释器就会把$skillScript当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。</p><p>推荐给所有变量加上花括号，这是个好的编程习惯。</p><p>已定义的变量，可以被重新定义，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">your_name=&quot;tom&quot;<br>echo $your_name<br>your_name=&quot;alibaba&quot;<br>echo $your_name<br></code></pre></td></tr></table></figure><p>这样写是合法的，但注意，第二次赋值的时候不能写$your_name=”alibaba”，使用变量的时候才加美元符（$）。</p><h4 id="16-5-2只读变量"><a href="#16-5-2只读变量" class="headerlink" title="16.5.2只读变量"></a>16.5.2只读变量</h4><p>使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。</p><p>下面的例子尝试更改只读变量，结果报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#!/bin/bash<br>myUrl=&quot;https://www.google.com&quot;<br>readonly myUrl<br>myUrl=&quot;https://www.runoob.com&quot;<br></code></pre></td></tr></table></figure><p>运行脚本，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">/bin/sh: NAME: This variable is read only.<br></code></pre></td></tr></table></figure><h4 id="16-5-3删除变量"><a href="#16-5-3删除变量" class="headerlink" title="16.5.3删除变量"></a>16.5.3删除变量</h4><p>使用 unset 命令可以删除变量。语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">unset variable_name<br></code></pre></td></tr></table></figure><p>变量被删除后不能再次使用。unset 命令不能删除只读变量。</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#!/bin/sh<br>myUrl=&quot;https://www.runoob.com&quot;<br>unset myUrl<br>echo $myUrl<br></code></pre></td></tr></table></figure><p>以上实例执行将没有任何输出。</p><h3 id="16-6变量类型"><a href="#16-6变量类型" class="headerlink" title="16.6变量类型"></a>16.6变量类型</h3><p>运行shell时，会同时存在三种变量：</p><ul><li><strong>1) 局部变量</strong> 局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。</li><li><strong>2) 环境变量</strong> 所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。</li><li><strong>3) shell变量</strong> shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行</li></ul><hr><h3 id="16-7Shell-字符串"><a href="#16-7Shell-字符串" class="headerlink" title="16.7Shell 字符串"></a>16.7Shell 字符串</h3><p>字符串是shell编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了），字符串可以用单引号，也可以用双引号，也可以不用引号。</p><h4 id="16-7-1单引号"><a href="#16-7-1单引号" class="headerlink" title="16.7.1单引号"></a>16.7.1单引号</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">str=&#x27;this is a string&#x27;<br></code></pre></td></tr></table></figure><p>单引号字符串的限制：</p><ul><li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；</li><li>单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。</li></ul><h4 id="16-7-2双引号"><a href="#16-7-2双引号" class="headerlink" title="16.7.2双引号"></a>16.7.2双引号</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">your_name=&#x27;runoob&#x27;<br>str=&quot;Hello, I know you are \&quot;$your_name\&quot;! \n&quot;<br>echo -e $str<br></code></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Hello, I know you are &quot;runoob&quot;! <br></code></pre></td></tr></table></figure><p>双引号的优点：</p><ul><li>双引号里可以有变量</li><li>双引号里可以出现转义字符</li></ul><h4 id="16-7-3拼接字符串"><a href="#16-7-3拼接字符串" class="headerlink" title="16.7.3拼接字符串"></a>16.7.3拼接字符串</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">your_name=&quot;runoob&quot;<br># 使用双引号拼接<br>greeting=&quot;hello, &quot;$your_name&quot; !&quot;<br>greeting_1=&quot;hello, $&#123;your_name&#125; !&quot;<br>echo $greeting  $greeting_1<br># 使用单引号拼接<br>greeting_2=&#x27;hello, &#x27;$your_name&#x27; !&#x27;<br>greeting_3=&#x27;hello, $&#123;your_name&#125; !&#x27;<br>echo $greeting_2  $greeting_3<br></code></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">hello, runoob ! hello, runoob !<br>hello, runoob ! hello, $&#123;your_name&#125; !<br></code></pre></td></tr></table></figure><h5 id="16-7-3-1获取字符串长度"><a href="#16-7-3-1获取字符串长度" class="headerlink" title="16.7.3.1获取字符串长度"></a>16.7.3.1获取字符串长度</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">string=&quot;abcd&quot;<br>echo $&#123;#string&#125; #输出 4<br></code></pre></td></tr></table></figure><h5 id="16-7-3-2提取子字符串"><a href="#16-7-3-2提取子字符串" class="headerlink" title="16.7.3.2提取子字符串"></a>16.7.3.2提取子字符串</h5><p>以下实例从字符串第 <strong>2</strong> 个字符开始截取 <strong>4</strong> 个字符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">string=&quot;runoob is a great site&quot;<br>echo $&#123;string:1:4&#125; # 输出 unoo<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：第一个字符的索引值为 <strong>0</strong>。</p><h5 id="16-7-3-3查找子字符串"><a href="#16-7-3-3查找子字符串" class="headerlink" title="16.7.3.3查找子字符串"></a>16.7.3.3查找子字符串</h5><p>查找字符 <strong>i</strong> 或 <strong>o</strong> 的位置(哪个字母先出现就计算哪个)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">string=&quot;runoob is a great site&quot;<br>echo `expr index &quot;$string&quot; io`  # 输出 4<br></code></pre></td></tr></table></figure><p><strong>注意：</strong> 以上脚本中 <strong>`</strong> 是反引号，而不是单引号 **’**，不要看错了哦。</p><hr><h3 id="16-8Shell-数组"><a href="#16-8Shell-数组" class="headerlink" title="16.8Shell 数组"></a>16.8Shell 数组</h3><p>bash支持一维数组（不支持多维数组），并且没有限定数组的大小。</p><p>类似于 C 语言，数组元素的下标由 0 开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于 0。</p><h4 id="16-8-1定义数组"><a href="#16-8-1定义数组" class="headerlink" title="16.8.1定义数组"></a>16.8.1定义数组</h4><p>在 Shell 中，用括号来表示数组，数组元素用”空格”符号分割开。定义数组的一般形式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">数组名=(值1 值2 ... 值n)<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">array_name=(value0 value1 value2 value3)<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">array_name=(<br>value0<br>value1<br>value2<br>value3<br>)<br></code></pre></td></tr></table></figure><p>还可以单独定义数组的各个分量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">array_name[0]=value0<br>array_name[1]=value1<br>array_name[n]=valuen<br></code></pre></td></tr></table></figure><p>可以不使用连续的下标，而且下标的范围没有限制。</p><h4 id="16-8-2读取数组"><a href="#16-8-2读取数组" class="headerlink" title="16.8.2读取数组"></a>16.8.2读取数组</h4><p>读取数组元素值的一般格式是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$&#123;数组名[下标]&#125;<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">valuen=$&#123;array_name[n]&#125;<br></code></pre></td></tr></table></figure><p>使用 <strong>@</strong> 符号可以获取数组中的所有元素，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">echo $&#123;array_name[@]&#125;<br></code></pre></td></tr></table></figure><h4 id="16-8-3获取数组的长度"><a href="#16-8-3获取数组的长度" class="headerlink" title="16.8.3获取数组的长度"></a>16.8.3获取数组的长度</h4><p>获取数组长度的方法与获取字符串长度的方法相同，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># 取得数组元素的个数<br>length=$&#123;#array_name[@]&#125;<br># 或者<br>length=$&#123;#array_name[*]&#125;<br># 取得数组单个元素的长度<br>lengthn=$&#123;#array_name[n]&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="16-9Shell-注释"><a href="#16-9Shell-注释" class="headerlink" title="16.9Shell 注释"></a>16.9Shell 注释</h3><p>以 <strong>#</strong> 开头的行就是注释，会被解释器忽略。</p><p>通过每一行加一个 <strong>#</strong> 号设置多行注释，像这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">##### 用户配置区 开始 #####<br>#<br>#<br># 这里可以添加脚本描述信息<br># <br>#<br>##### 用户配置区 结束  #####<br></code></pre></td></tr></table></figure><p>如果在开发过程中，遇到大段的代码需要临时注释起来，过一会儿又取消注释，怎么办呢？</p><p>每一行加个#符号太费力了，可以把这一段要注释的代码用一对花括号括起来，定义成一个函数，没有地方调用这个函数，这块代码就不会执行，达到了和注释一样的效果。</p><h4 id="16-9-1多行注释"><a href="#16-9-1多行注释" class="headerlink" title="16.9.1多行注释"></a>16.9.1多行注释</h4><p>多行注释还可以使用以下格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">:&lt;&lt;EOF<br>注释内容...<br>注释内容...<br>注释内容...<br>EOF<br></code></pre></td></tr></table></figure><p>EOF 也可以使用其他符号:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">:&lt;&lt;&#x27;<br>注释内容...<br>注释内容...<br>注释内容...<br>&#x27;<br><br>:&lt;&lt;!<br>注释内容...<br>注释内容...<br>注释内容...<br>!<br></code></pre></td></tr></table></figure><h3 id="16-10Shell-传递参数"><a href="#16-10Shell-传递参数" class="headerlink" title="16.10Shell 传递参数"></a>16.10Shell 传递参数</h3><p>我们可以在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：**$n<strong>。</strong>n** 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……</p><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p>以下实例我们向脚本传递三个参数，并分别输出，其中 <strong>$0</strong> 为执行的文件名（包含文件路径）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">echo &quot;Shell 传递参数实例！&quot;;<br>echo &quot;执行的文件名：$0&quot;;<br>echo &quot;第一个参数为：$1&quot;;<br>echo &quot;第二个参数为：$2&quot;;<br>echo &quot;第三个参数为：$3&quot;;<br></code></pre></td></tr></table></figure><p>为脚本设置可执行权限，并执行脚本，输出结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$ chmod +x test.sh <br>$ ./test.sh 1 2 3<br>Shell 传递参数实例！<br>执行的文件名：./test.sh<br>第一个参数为：1<br>第二个参数为：2<br>第三个参数为：3<br></code></pre></td></tr></table></figure><p>另外，还有几个特殊字符用来处理参数：</p><table><thead><tr><th align="left">参数处理</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">$#</td><td align="left">传递到脚本的参数个数</td></tr><tr><td align="left">$*</td><td align="left">以一个单字符串显示所有向脚本传递的参数。 如”$*”用「”」括起来的情况、以”$1 $2 … $n”的形式输出所有参数。</td></tr><tr><td align="left">$$</td><td align="left">脚本运行的当前进程ID号</td></tr><tr><td align="left">$!</td><td align="left">后台运行的最后一个进程的ID号</td></tr><tr><td align="left">$@</td><td align="left">与$*相同，但是使用时加引号，并在引号中返回每个参数。 如”$@”用「”」括起来的情况、以”$1” “$2” … “$n” 的形式输出所有参数。</td></tr><tr><td align="left">$-</td><td align="left">显示Shell使用的当前选项，与<a href="https://www.runoob.com/linux/linux-comm-set.html">set命令</a>功能相同。</td></tr><tr><td align="left">$?</td><td align="left">显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">echo &quot;Shell 传递参数实例！&quot;;<br>echo &quot;第一个参数为：$1&quot;;<br><br>echo &quot;参数个数为：$#&quot;;<br>echo &quot;传递的参数作为一个字符串显示：$*&quot;;<br></code></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$ chmod +x test.sh <br>$ ./test.sh 1 2 3<br>Shell 传递参数实例！<br>第一个参数为：1<br>参数个数为：3<br>传递的参数作为一个字符串显示：1 2 3<br></code></pre></td></tr></table></figure><p>$* 与 $@ 区别：</p><ul><li>相同点：都是引用所有参数。</li><li>不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 “ * “ 等价于 “1 2 3”（传递了一个参数），而 “@” 等价于 “1” “2” “3”（传递了三个参数）。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">echo &quot;-- \$* 演示 ---&quot;<br>for i in &quot;$*&quot;; do<br>    echo $i<br>done<br><br>echo &quot;-- \$@ 演示 ---&quot;<br>for i in &quot;$@&quot;; do<br>    echo $i<br>done<br></code></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$ chmod +x test.sh <br>$ ./test.sh 1 2 3<br>-- $* 演示 ---<br>1 2 3<br>-- $@ 演示 ---<br>1<br>2<br>3<br></code></pre></td></tr></table></figure><h3 id="16-11Shell-数组"><a href="#16-11Shell-数组" class="headerlink" title="16.11Shell 数组"></a>16.11Shell 数组</h3><p>数组中可以存放多个值。Bash Shell 只支持一维数组（不支持多维数组），初始化时不需要定义数组大小（与 PHP 类似）。</p><p>与大部分编程语言类似，数组元素的下标由 0 开始。</p><h4 id="16-11-1定义数组"><a href="#16-11-1定义数组" class="headerlink" title="16.11.1定义数组"></a>16.11.1定义数组</h4><p>Shell 数组用括号来表示，元素用”空格”符号分割开，语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">array_name=(value1 value2 ... valuen)<br></code></pre></td></tr></table></figure><h5 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">my_array=(A B &quot;C&quot; D)<br></code></pre></td></tr></table></figure><p>我们也可以使用下标来定义数组:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">array_name[0]=value0<br>array_name[1]=value1<br>array_name[2]=value2<br></code></pre></td></tr></table></figure><h4 id="16-11-2读取数组"><a href="#16-11-2读取数组" class="headerlink" title="16.11.2读取数组"></a>16.11.2读取数组</h4><p>读取数组元素值的一般格式是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$&#123;array_name[index]&#125;<br></code></pre></td></tr></table></figure><h5 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">my_array=(A B &quot;C&quot; D)<br><br>echo &quot;第一个元素为: $&#123;my_array[0]&#125;&quot;<br>echo &quot;第二个元素为: $&#123;my_array[1]&#125;&quot;<br>echo &quot;第三个元素为: $&#123;my_array[2]&#125;&quot;<br>echo &quot;第四个元素为: $&#123;my_array[3]&#125;&quot;<br></code></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$ chmod +x test.sh <br>$ ./test.sh<br>第一个元素为: A<br>第二个元素为: B<br>第三个元素为: C<br>第四个元素为: D<br></code></pre></td></tr></table></figure><h4 id="16-11-3获取数组中的所有元素"><a href="#16-11-3获取数组中的所有元素" class="headerlink" title="16.11.3获取数组中的所有元素"></a>16.11.3获取数组中的所有元素</h4><p>使用@ 或 * 可以获取数组中的所有元素，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">my_array[0]=A<br>my_array[1]=B<br>my_array[2]=C<br>my_array[3]=D<br><br>echo &quot;数组的元素为: $&#123;my_array[*]&#125;&quot;<br>echo &quot;数组的元素为: $&#123;my_array[@]&#125;&quot;<br></code></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$ chmod +x test.sh <br>$ ./test.sh<br>数组的元素为: A B C D<br>数组的元素为: A B C D<br></code></pre></td></tr></table></figure><h4 id="16-11-4获取数组的长度"><a href="#16-11-4获取数组的长度" class="headerlink" title="16.11.4获取数组的长度"></a>16.11.4获取数组的长度</h4><p>获取数组长度的方法与获取字符串长度的方法相同，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">my_array[0]=A<br>my_array[1]=B<br>my_array[2]=C<br>my_array[3]=D<br><br>echo &quot;数组元素个数为: $&#123;#my_array[*]&#125;&quot;<br>echo &quot;数组元素个数为: $&#123;#my_array[@]&#125;&quot;<br></code></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$ chmod +x test.sh <br>$ ./test.sh<br>数组元素个数为: 4<br>数组元素个数为: 4<br></code></pre></td></tr></table></figure><h3 id="16-12Shell-基本运算符"><a href="#16-12Shell-基本运算符" class="headerlink" title="16.12Shell 基本运算符"></a>16.12Shell 基本运算符</h3><p>Shell 和其他编程语言一样，支持多种运算符，包括：</p><ul><li>算数运算符</li><li>关系运算符</li><li>布尔运算符</li><li>字符串运算符</li><li>文件测试运算符</li></ul><p>原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。</p><p>expr 是一款表达式计算工具，使用它能完成表达式的求值操作。</p><p>例如，两个数相加(<strong>注意使用的是反引号 *<em>`*</em> 而不是单引号 *<em>‘*</em></strong>)：</p><hr><h4 id="16-12-1算术运算符"><a href="#16-12-1算术运算符" class="headerlink" title="16.12.1算术运算符"></a>16.12.1算术运算符</h4><p>下表列出了常用的算术运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">加法</td><td align="left"><code>expr $a + $b</code> 结果为 30。</td></tr><tr><td align="left">-</td><td align="left">减法</td><td align="left"><code>expr $a - $b</code> 结果为 -10。</td></tr><tr><td align="left">*</td><td align="left">乘法</td><td align="left"><code>expr $a \* $b</code> 结果为  200。</td></tr><tr><td align="left">/</td><td align="left">除法</td><td align="left"><code>expr $b / $a</code> 结果为 2。</td></tr><tr><td align="left">%</td><td align="left">取余</td><td align="left"><code>expr $b % $a</code> 结果为 0。</td></tr><tr><td align="left">=</td><td align="left">赋值</td><td align="left">a=$b 将把变量 b 的值赋给 a。</td></tr><tr><td align="left">==</td><td align="left">相等。用于比较两个数字，相同则返回 true。</td><td align="left">[ $a == $b ] 返回 false。</td></tr><tr><td align="left">!=</td><td align="left">不相等。用于比较两个数字，不相同则返回 true。</td><td align="left">[ $a != $b ] 返回 true。</td></tr></tbody></table><p><strong>注意：</strong>条件表达式要放在方括号之间，并且要有空格，例如: <strong>[$a==$b]</strong> 是错误的，必须写成 **[ $a == $b ]**。</p><h5 id="实例-算术运算符实例如下："><a href="#实例-算术运算符实例如下：" class="headerlink" title="实例.算术运算符实例如下："></a>实例.算术运算符实例如下：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a=10<br>b=20<br>#加<br>val=`expr $a + $b`<br>echo &quot;a + b : $val&quot;<br>#减<br>val=`expr $a - $b`<br>echo &quot;a - b : $val&quot;<br>#乘<br>val=`expr $a \* $b`<br>echo &quot;a * b : $val&quot;<br>#除<br>val=`expr $b / $a`<br>echo &quot;b / a : $val&quot;<br>#取模<br>val=`expr $b % $a`<br>echo &quot;b % a : $val&quot;<br><br>if [ $a == $b ]<br>then<br>  echo &quot;a 等于 b&quot;<br>fi<br>if [ $a != $b ]<br>then<br>  echo &quot;a 不等于 b&quot;<br>fi<br></code></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a + b : 30<br>a - b : -10<br>a * b : 200<br>b / a : 2<br>b % a : 0<br>a 不等于 b<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong></p><ul><li>乘号(*)前边必须加反斜杠()才能实现乘法运算；</li><li>if…then…fi 是条件语句，后续将会讲解。</li></ul></blockquote><hr><h4 id="16-12-2关系运算符"><a href="#16-12-2关系运算符" class="headerlink" title="16.12.2关系运算符"></a>16.12.2关系运算符</h4><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p><p>下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">-eq</td><td align="left">检测两个数是否相等，相等返回 true。</td><td align="left">[ $a -eq $b ] 返回 false。</td></tr><tr><td align="left">-ne</td><td align="left">检测两个数是否不相等，不相等返回 true。</td><td align="left">[ $a -ne $b ] 返回 true。</td></tr><tr><td align="left">-gt</td><td align="left">检测左边的数是否大于右边的，如果是，则返回 true。</td><td align="left">[ $a -gt $b ] 返回 false。</td></tr><tr><td align="left">-lt</td><td align="left">检测左边的数是否小于右边的，如果是，则返回 true。</td><td align="left">[ $a -lt $b ] 返回 true。</td></tr><tr><td align="left">-ge</td><td align="left">检测左边的数是否大于等于右边的，如果是，则返回 true。</td><td align="left">[ $a -ge $b ] 返回 false。</td></tr><tr><td align="left">-le</td><td align="left">检测左边的数是否小于等于右边的，如果是，则返回 true。</td><td align="left">[ $a -le $b ] 返回 true。</td></tr></tbody></table><h5 id="实例-关系运算符实例如下："><a href="#实例-关系运算符实例如下：" class="headerlink" title="实例.关系运算符实例如下："></a>实例.关系运算符实例如下：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a=10<br>b=20<br><br>if [ $a -eq $b ]<br>then<br>  echo &quot;$a -eq $b : a 等于 b&quot;<br>else<br>  echo &quot;$a -eq $b: a 不等于 b&quot;<br>fi<br>if [ $a -ne $b ]<br>then<br>  echo &quot;$a -ne $b: a 不等于 b&quot;<br>else<br>  echo &quot;$a -ne $b : a 等于 b&quot;<br>fi<br>if [ $a -gt $b ]<br>then<br>  echo &quot;$a -gt $b: a 大于 b&quot;<br>else<br>  echo &quot;$a -gt $b: a 不大于 b&quot;<br>fi<br>if [ $a -lt $b ]<br>then<br>  echo &quot;$a -lt $b: a 小于 b&quot;<br>else<br>  echo &quot;$a -lt $b: a 不小于 b&quot;<br>fi<br>if [ $a -ge $b ]<br>then<br>  echo &quot;$a -ge $b: a 大于或等于 b&quot;<br>else<br>  echo &quot;$a -ge $b: a 小于 b&quot;<br>fi<br>if [ $a -le $b ]<br>then<br>  echo &quot;$a -le $b: a 小于或等于 b&quot;<br>else<br>  echo &quot;$a -le $b: a 大于 b&quot;<br>fi<br></code></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">10 -eq 20: a 不等于 b<br>10 -ne 20: a 不等于 b<br>10 -gt 20: a 不大于 b<br>10 -lt 20: a 小于 b<br>10 -ge 20: a 小于 b<br>10 -le 20: a 小于或等于 b<br></code></pre></td></tr></table></figure><hr><h4 id="16-12-3布尔运算符"><a href="#16-12-3布尔运算符" class="headerlink" title="16.12.3布尔运算符"></a>16.12.3布尔运算符</h4><p>下表列出了常用的布尔运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">!</td><td align="left">非运算，表达式为 true 则返回 false，否则返回 true。</td><td align="left">[ ! false ] 返回 true。</td></tr><tr><td align="left">-o</td><td align="left">或运算，有一个表达式为 true 则返回 true。</td><td align="left">[ $a -lt 20 -o $b -gt 100 ] 返回 true。</td></tr><tr><td align="left">-a</td><td align="left">与运算，两个表达式都为 true 才返回 true。</td><td align="left">[ $a -lt 20 -a $b -gt 100 ] 返回 false。</td></tr></tbody></table><h5 id="实例-布尔运算符实例如下："><a href="#实例-布尔运算符实例如下：" class="headerlink" title="实例.布尔运算符实例如下："></a>实例.布尔运算符实例如下：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a=10<br>b=20<br><br>if [ $a != $b ]<br>then<br>  echo &quot;$a != $b : a 不等于 b&quot;<br>else<br>  echo &quot;$a == $b: a 等于 b&quot;<br>fi<br>if [ $a -lt 100 -a $b -gt 15 ]<br>then<br>  echo &quot;$a 小于 100 且 $b 大于 15 : 返回 true&quot;<br>else<br>  echo &quot;$a 小于 100 且 $b 大于 15 : 返回 false&quot;<br>fi<br>if [ $a -lt 100 -o $b -gt 100 ]<br>then<br>  echo &quot;$a 小于 100 或 $b 大于 100 : 返回 true&quot;<br>else<br>  echo &quot;$a 小于 100 或 $b 大于 100 : 返回 false&quot;<br>fi<br>if [ $a -lt 5 -o $b -gt 100 ]<br>then<br>  echo &quot;$a 小于 5 或 $b 大于 100 : 返回 true&quot;<br>else<br>  echo &quot;$a 小于 5 或 $b 大于 100 : 返回 false&quot;<br>fi<br></code></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">10 != 20 : a 不等于 b<br>10 小于 100 且 20 大于 15 : 返回 true<br>10 小于 100 或 20 大于 100 : 返回 true<br>10 小于 5 或 20 大于 100 : 返回 false<br></code></pre></td></tr></table></figure><hr><h4 id="16-12-4逻辑运算符"><a href="#16-12-4逻辑运算符" class="headerlink" title="16.12.4逻辑运算符"></a>16.12.4逻辑运算符</h4><p>以下介绍 Shell 的逻辑运算符，假定变量 a 为 10，变量 b 为 20:</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">&amp;&amp;</td><td align="left">逻辑的 AND</td><td align="left">[[ $a -lt 100 &amp;&amp; $b -gt 100 ]] 返回 false</td></tr><tr><td align="left">||</td><td align="left">逻辑的 OR</td><td align="left">[[ $a -lt 100 || $b -gt 100 ]] 返回 true</td></tr></tbody></table><h5 id="实例-逻辑运算符实例如下："><a href="#实例-逻辑运算符实例如下：" class="headerlink" title="实例.逻辑运算符实例如下："></a>实例.逻辑运算符实例如下：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a=10<br>b=20<br><br>if [[ $a -lt 100 &amp;&amp; $b -gt 100 ]]<br>then<br>  echo &quot;返回 true&quot;<br>else<br>  echo &quot;返回 false&quot;<br>fi<br><br>if [[ $a -lt 100 || $b -gt 100 ]]<br>then<br>  echo &quot;返回 true&quot;<br>else<br>  echo &quot;返回 false&quot;<br>fi<br></code></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">返回 false<br>返回 true<br></code></pre></td></tr></table></figure><hr><h4 id="16-12-5字符串运算符"><a href="#16-12-5字符串运算符" class="headerlink" title="16.12.5字符串运算符"></a>16.12.5字符串运算符</h4><p>下表列出了常用的字符串运算符，假定变量 a 为 “abc”，变量 b 为 “efg”：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">检测两个字符串是否相等，相等返回 true。</td><td align="left">[ $a = $b ] 返回 false。</td></tr><tr><td align="left">!=</td><td align="left">检测两个字符串是否不相等，不相等返回 true。</td><td align="left">[ $a != $b ] 返回 true。</td></tr><tr><td align="left">-z</td><td align="left">检测字符串长度是否为0，为0返回 true。</td><td align="left">[ -z $a ] 返回 false。</td></tr><tr><td align="left">-n</td><td align="left">检测字符串长度是否不为 0，不为 0 返回 true。</td><td align="left">[ -n “$a” ] 返回 true。</td></tr><tr><td align="left">$</td><td align="left">检测字符串是否为空，不为空返回 true。</td><td align="left">[ $a ] 返回 true。</td></tr></tbody></table><h5 id="实例-字符串运算符实例如下："><a href="#实例-字符串运算符实例如下：" class="headerlink" title="实例.字符串运算符实例如下："></a>实例.字符串运算符实例如下：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a=&quot;abc&quot;<br>b=&quot;efg&quot;<br><br>if [ $a = $b ]<br>then<br>  echo &quot;$a = $b : a 等于 b&quot;<br>else<br>  echo &quot;$a = $b: a 不等于 b&quot;<br>fi<br>if [ $a != $b ]<br>then<br>  echo &quot;$a != $b : a 不等于 b&quot;<br>else<br>  echo &quot;$a != $b: a 等于 b&quot;<br>fi<br>if [ -z $a ]<br>then<br>  echo &quot;-z $a : 字符串长度为 0&quot;<br>else<br>  echo &quot;-z $a : 字符串长度不为 0&quot;<br>fi<br>if [ -n &quot;$a&quot; ]<br>then<br>  echo &quot;-n $a : 字符串长度不为 0&quot;<br>else<br>  echo &quot;-n $a : 字符串长度为 0&quot;<br>fi<br>if [ $a ]<br>then<br>  echo &quot;$a : 字符串不为空&quot;<br>else<br>  echo &quot;$a : 字符串为空&quot;<br>fi<br></code></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">abc = efg: a 不等于 b<br>abc != efg : a 不等于 b<br>-z abc : 字符串长度不为 0<br>-n abc : 字符串长度不为 0<br>abc : 字符串不为空<br></code></pre></td></tr></table></figure><h3 id="16-13Shell-echo命令"><a href="#16-13Shell-echo命令" class="headerlink" title="16.13Shell echo命令"></a>16.13Shell echo命令</h3><p>Shell 的 echo 指令与 PHP 的 echo 指令类似，都是用于字符串的输出。命令格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">echo string<br></code></pre></td></tr></table></figure><p>您可以使用echo实现更复杂的输出格式控制。</p><h4 id="16-13-1-显示普通字符串"><a href="#16-13-1-显示普通字符串" class="headerlink" title="16.13.1.显示普通字符串:"></a>16.13.1.显示普通字符串:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">echo &quot;It is a test&quot;<br></code></pre></td></tr></table></figure><p>这里的双引号完全可以省略，以下命令与上面实例效果一致：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">echo It is a test<br></code></pre></td></tr></table></figure><h4 id="16-13-2-显示转义字符"><a href="#16-13-2-显示转义字符" class="headerlink" title="16.13.2.显示转义字符"></a>16.13.2.显示转义字符</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">echo &quot;\&quot;It is a test\&quot;&quot;<br></code></pre></td></tr></table></figure><p>结果将是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&quot;It is a test&quot;<br></code></pre></td></tr></table></figure><p>同样，双引号也可以省略</p><h4 id="16-13-3-显示变量"><a href="#16-13-3-显示变量" class="headerlink" title="16.13.3.显示变量"></a>16.13.3.显示变量</h4><p>read 命令从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#!/bin/sh<br>read name <br>echo &quot;$name It is a test&quot;<br></code></pre></td></tr></table></figure><p>以上代码保存为 test.sh，name 接收标准输入的变量，结果将是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@www ~]# sh test.sh<br>OK                     #标准输入<br>OK It is a test        #输出<br></code></pre></td></tr></table></figure><h4 id="16-13-4-显示换行"><a href="#16-13-4-显示换行" class="headerlink" title="16.13.4.显示换行"></a>16.13.4.显示换行</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">echo -e &quot;OK! \n&quot; # -e 开启转义<br>echo &quot;It is a test&quot;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">OK!<br><br>It is a test<br></code></pre></td></tr></table></figure><h4 id="16-13-5-显示不换行"><a href="#16-13-5-显示不换行" class="headerlink" title="16.13.5.显示不换行"></a>16.13.5.显示不换行</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#!/bin/sh<br>echo -e &quot;OK! \c&quot; # -e 开启转义 \c 不换行<br>echo &quot;It is a test&quot;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">OK! It is a test<br></code></pre></td></tr></table></figure><h4 id="16-13-6-显示结果定向至文件"><a href="#16-13-6-显示结果定向至文件" class="headerlink" title="16.13.6.显示结果定向至文件"></a>16.13.6.显示结果定向至文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">echo &quot;It is a test&quot; &gt; myfile<br></code></pre></td></tr></table></figure><h4 id="16-13-7-原样输出字符串，不进行转义或取变量-用单引号"><a href="#16-13-7-原样输出字符串，不进行转义或取变量-用单引号" class="headerlink" title="16.13.7.原样输出字符串，不进行转义或取变量(用单引号)"></a>16.13.7.原样输出字符串，不进行转义或取变量(用单引号)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">echo &#x27;$name\&quot;&#x27;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$name\&quot;<br></code></pre></td></tr></table></figure><h4 id="16-13-8-显示命令执行结果"><a href="#16-13-8-显示命令执行结果" class="headerlink" title="16.13.8.显示命令执行结果"></a>16.13.8.显示命令执行结果</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">echo `date`<br></code></pre></td></tr></table></figure><p><strong>注意：</strong> 这里使用的是反引号 <strong>`</strong>, 而不是单引号 **’**。</p><p>结果将显示当前日期</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Thu Jul 4 10:08:46 CST 2021<br></code></pre></td></tr></table></figure><h3 id="16-14Shell-printf-命令"><a href="#16-14Shell-printf-命令" class="headerlink" title="16.14Shell printf 命令"></a>16.14Shell printf 命令</h3><p>printf 命令模仿 C 程序库（library）里的 printf() 程序。</p><p>printf 由 POSIX 标准所定义，因此使用 printf 的脚本比使用 echo 移植性好。</p><p>printf 使用引用文本或空格分隔的参数，外面可以在 <strong>printf</strong> 中使用格式化字符串，还可以制定字符串的宽度、左右对齐方式等。默认的 printf 不会像 <strong>echo</strong> 自动添加换行符，我们可以手动添加 <strong>\n</strong>。</p><p>printf 命令的语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">printf  format-string  [arguments...]<br></code></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><strong>format-string:</strong> 为格式控制字符串</li><li><strong>arguments:</strong> 为参数列表。</li></ul><p>接下来,我来用一个脚本来体现 printf 的强大功能：</p><h5 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">printf &quot;%-10s %-8s %-4s\n&quot;  姓名 性别 体重kg  <br>printf &quot;%-10s %-8s %-4.2f\n&quot; 郭靖 男 66.1234<br>printf &quot;%-10s %-8s %-4.2f\n&quot; 杨过 男 48.6543<br>printf &quot;%-10s %-8s %-4.2f\n&quot; 郭芙 女 47.9876<br></code></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">姓名     性别   体重kg<br>郭靖     男      66.12<br>杨过     男      48.65<br>郭芙     女      47.99<br></code></pre></td></tr></table></figure><h5 id="s-c-d-f-都是格式替代符，"><a href="#s-c-d-f-都是格式替代符，" class="headerlink" title="%s %c %d %f     都是格式替代符，"></a>%s %c %d %f     都是格式替代符，</h5><ul><li>％s     输出一个字符串，</li><li>％d     整型输出，</li><li>％c     输出一个字符，</li><li>％f     输出实数，以小数形式输出。</li><li>%-10s     指一个宽度为 10 个字符（**-** 表示左对齐，没有则表示右对齐），任何字符都会被显示在 10 个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。</li><li>%-4.2f     指格式化为小数，其中 .2指保留2位小数。</li></ul><h3 id="16-15Shell-test-命令"><a href="#16-15Shell-test-命令" class="headerlink" title="16.15Shell test 命令"></a>16.15Shell test 命令</h3><p>Shell中的 test 命令用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试。</p><hr><h4 id="16-15-1数值测试"><a href="#16-15-1数值测试" class="headerlink" title="16.15.1数值测试"></a>16.15.1数值测试</h4><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-eq</td><td align="left">等于则为真</td></tr><tr><td align="left">-ne</td><td align="left">不等于则为真</td></tr><tr><td align="left">-gt</td><td align="left">大于则为真</td></tr><tr><td align="left">-ge</td><td align="left">大于等于则为真</td></tr><tr><td align="left">-lt</td><td align="left">小于则为真</td></tr><tr><td align="left">-le</td><td align="left">小于等于则为真</td></tr></tbody></table><hr><h4 id="16-15-2字符串测试"><a href="#16-15-2字符串测试" class="headerlink" title="16.15.2字符串测试"></a>16.15.2字符串测试</h4><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">等于则为真</td></tr><tr><td align="left">!=</td><td align="left">不相等则为真</td></tr><tr><td align="left">-z 字符串</td><td align="left">字符串的长度为零则为真</td></tr><tr><td align="left">-n 字符串</td><td align="left">字符串的长度不为零则为真</td></tr></tbody></table><h3 id="16-16Shell-流程控制"><a href="#16-16Shell-流程控制" class="headerlink" title="16.16Shell 流程控制"></a>16.16Shell 流程控制</h3><p>和 Java、PHP 等语言不一样，sh 的流程控制不可为空，如(以下为 PHP 流程控制写法)：</p><h4 id="16-16-1-if-else"><a href="#16-16-1-if-else" class="headerlink" title="16.16.1 if else"></a>16.16.1 if else</h4><h5 id="16-16-1-1-fi"><a href="#16-16-1-1-fi" class="headerlink" title="16.16.1.1 fi"></a>16.16.1.1 fi</h5><p>if 语句语法格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">if condition<br>then<br>    command1 <br>    command2<br>    ...<br>    commandN <br>fi<br></code></pre></td></tr></table></figure><p>写成一行（适用于终端命令提示符）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">if [ $(ps -ef | grep -c &quot;ssh&quot;) -gt 1 ]; then echo &quot;true&quot;; fi<br></code></pre></td></tr></table></figure><p>末尾的 fi 就是 if 倒过来拼写，后面还会遇到类似的。</p><h5 id="16-16-1-2-if-else"><a href="#16-16-1-2-if-else" class="headerlink" title="16.16.1.2 if else"></a>16.16.1.2 if else</h5><p>if else 语法格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">if condition<br>then<br>    command1 <br>    command2<br>    ...<br>    commandN<br>else<br>    command<br>fi<br></code></pre></td></tr></table></figure><h5 id="16-16-1-3-if-else-if-else"><a href="#16-16-1-3-if-else-if-else" class="headerlink" title="16.16.1.3 if else-if else"></a>16.16.1.3 if else-if else</h5><p>if else-if else 语法格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">if condition1<br>then<br>    command1<br>elif condition2 <br>then <br>    command2<br>else<br>    commandN<br>fi<br></code></pre></td></tr></table></figure><p>以下实例判断两个变量是否相等：</p><h4 id="16-16-2-for-循环"><a href="#16-16-2-for-循环" class="headerlink" title="16.16.2 for 循环"></a>16.16.2 for 循环</h4><p>与其他编程语言类似，Shell支持for循环。</p><p>for循环一般格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">for var in item1 item2 ... itemN<br>do<br>    command1<br>    command2<br>    ...<br>    commandN<br>done<br></code></pre></td></tr></table></figure><p>写成一行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">for var in item1 item2 ... itemN; do command1; command2… done;<br></code></pre></td></tr></table></figure><p>当变量值在列表里，for 循环即执行一次所有命令，使用变量名获取列表中的当前取值。命令可为任何有效的 shell 命令和语句。in 列表可以包含替换、字符串和文件名。</p><p>in列表是可选的，如果不用它，for循环使用命令行的位置参数。</p><h4 id="16-16-3-while-语句"><a href="#16-16-3-while-语句" class="headerlink" title="16.16.3 while 语句"></a>16.16.3 while 语句</h4><p>while 循环用于不断执行一系列命令，也用于从输入文件中读取数据。其语法格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">while condition<br>do<br>    command<br>done<br></code></pre></td></tr></table></figure><p>while循环可用于读取键盘信息。下面的例子中，输入信息被设置为变量FILM，按<Ctrl-D>结束循环。</p><h4 id="16-16-4-无限循环"><a href="#16-16-4-无限循环" class="headerlink" title="16.16.4 无限循环"></a>16.16.4 无限循环</h4><p>无限循环语法格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">while :<br>do<br>    command<br>done<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">while true<br>do<br>    command<br>done<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">for (( ; ; ))<br></code></pre></td></tr></table></figure><hr><h4 id="16-16-5-until-循环"><a href="#16-16-5-until-循环" class="headerlink" title="16.16.5 until 循环"></a>16.16.5 until 循环</h4><p>until 循环执行一系列命令直至条件为 true 时停止。</p><p>until 循环与 while 循环在处理方式上刚好相反。</p><p>一般 while 循环优于 until 循环，但在某些时候—也只是极少数情况下，until 循环更加有用。</p><p>until 语法格式:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">until condition<br>do<br>    command<br>done<br></code></pre></td></tr></table></figure><p>condition 一般为条件表达式，如果返回值为 false，则继续执行循环体内的语句，否则跳出循环。</p><hr><h4 id="16-16-6-case-…-esac"><a href="#16-16-6-case-…-esac" class="headerlink" title="16.16.6 case … esac"></a>16.16.6 case … esac</h4><p><strong>case … esac</strong> 为多选择语句，与其他语言中的 switch … case 语句类似，是一种多分枝选择结构，每个 case 分支用右圆括号开始，用两个分号 <strong>;;</strong> 表示 break，即执行结束，跳出整个 case … esac 语句，esac（就是 case 反过来）作为结束标记。</p><p>可以用 case 语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。</p><p><strong>case … esac</strong> 语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">case 值 in<br>模式1)<br>    command1<br>    command2<br>    ...<br>    commandN<br>    ;;<br>模式2）<br>    command1<br>    command2<br>    ...<br>    commandN<br>    ;;<br>esac<br></code></pre></td></tr></table></figure><p>case 工作方式如上所示，取值后面必须为单词 <strong>in</strong>，每一模式必须以右括号结束。取值可以为变量或常数，匹配发现取值符合某一模式后，其间所有命令开始执行直至 **;;**。</p><p>取值将检测匹配的每一个模式。一旦模式匹配，则执行完匹配模式相应命令后不再继续其他模式。如果无一匹配模式，使用星号 * 捕获该值，再执行后面的命令。</p><hr><h4 id="16-16-7-跳出循环"><a href="#16-16-7-跳出循环" class="headerlink" title="16.16.7 跳出循环"></a>16.16.7 跳出循环</h4><p>在循环过程中，有时候需要在未达到循环结束条件时强制跳出循环，Shell使用两个命令来实现该功能：break和continue。</p><h5 id="16-16-7-1-break命令"><a href="#16-16-7-1-break命令" class="headerlink" title="16.16.7.1 break命令"></a>16.16.7.1 break命令</h5><p>break命令允许跳出所有循环（终止执行后面的所有循环）。</p><h5 id="16-16-7-2-continue"><a href="#16-16-7-2-continue" class="headerlink" title="16.16.7.2 continue"></a>16.16.7.2 continue</h5><p>continue命令与break命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。</p><h3 id="16-17-Shell-函数"><a href="#16-17-Shell-函数" class="headerlink" title="16.17 Shell 函数"></a>16.17 Shell 函数</h3><p>linux shell 可以用户定义函数，然后在shell脚本中可以随便调用。</p><p>shell中函数的定义格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[ function ] funname [()]<br>&#123;<br>  action;<br>  [return int;]<br>&#125;<br></code></pre></td></tr></table></figure><p>说明：</p><ul><li>1、可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。</li><li>2、参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255</li></ul><p>函数返回值在调用该函数后通过 $? 来获得。</p><p>注意：所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。</p><hr><h4 id="16-17-1-函数参数"><a href="#16-17-1-函数参数" class="headerlink" title="16.17.1 函数参数"></a>16.17.1 函数参数</h4><p>在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数…</p><table><thead><tr><th align="left">参数处理</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">$#</td><td align="left">传递到脚本或函数的参数个数</td></tr><tr><td align="left">$*</td><td align="left">以一个单字符串显示所有向脚本传递的参数</td></tr><tr><td align="left">$$</td><td align="left">脚本运行的当前进程ID号</td></tr><tr><td align="left">$!</td><td align="left">后台运行的最后一个进程的ID号</td></tr><tr><td align="left">$@</td><td align="left">与$*相同，但是使用时加引号，并在引号中返回每个参数。</td></tr><tr><td align="left">$-</td><td align="left">显示Shell使用的当前选项，与set命令功能相同。</td></tr><tr><td align="left">$?</td><td align="left">显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td></tr></tbody></table><h3 id="16-18-Shell-输入-输出重定向"><a href="#16-18-Shell-输入-输出重定向" class="headerlink" title="16.18 Shell 输入/输出重定向"></a>16.18 Shell 输入/输出重定向</h3><p>大多数 UNIX 系统命令从你的终端接受输入并将所产生的输出发送回到您的终端。一个命令通常从一个叫标准输入的地方读取输入，默认情况下，这恰好是你的终端。同样，一个命令通常将其输出写入到标准输出，默认情况下，这也是你的终端。</p><p>重定向命令列表如下：</p><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">command &gt; file</td><td align="left">将输出重定向到 file。</td></tr><tr><td align="left">command &lt; file</td><td align="left">将输入重定向到 file。</td></tr><tr><td align="left">command &gt;&gt; file</td><td align="left">将输出以追加的方式重定向到 file。</td></tr><tr><td align="left">n &gt; file</td><td align="left">将文件描述符为 n 的文件重定向到 file。</td></tr><tr><td align="left">n &gt;&gt; file</td><td align="left">将文件描述符为 n 的文件以追加的方式重定向到 file。</td></tr><tr><td align="left">n &gt;&amp; m</td><td align="left">将输出文件 m 和 n 合并。</td></tr><tr><td align="left">n &lt;&amp; m</td><td align="left">将输入文件 m 和 n 合并。</td></tr><tr><td align="left">&lt;&lt; tag</td><td align="left">将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td></tr></tbody></table><blockquote><p>需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。</p></blockquote><hr><h4 id="16-18-1-输出重定向"><a href="#16-18-1-输出重定向" class="headerlink" title="16.18.1 输出重定向"></a>16.18.1 输出重定向</h4><p>重定向一般通过在命令间插入特定的符号来实现。特别的，这些符号的语法如下所示:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">command1 &gt; file1<br></code></pre></td></tr></table></figure><p>上面这个命令执行command1然后将输出的内容存入file1。</p><p>注意任何file1内的已经存在的内容将被新内容替代。如果要将新内容添加在文件末尾，请使用&gt;&gt;操作符。</p><hr><h4 id="16-18-2-输入重定向"><a href="#16-18-2-输入重定向" class="headerlink" title="16.18.2 输入重定向"></a>16.18.2 输入重定向</h4><p>和输出重定向一样，Unix 命令也可以从文件获取输入，语法为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">command1 &lt; file1<br></code></pre></td></tr></table></figure><p>这样，本来需要从键盘获取输入的命令会转移到文件读取内容。</p><p>注意：输出重定向是大于号(&gt;)，输入重定向是小于号(&lt;)。</p>]]></content>
      
      
      <categories>
          
          <category> Linux学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS高级应用</title>
      <link href="/2021/06/23/HTML/CSS%E9%AB%98%E7%BA%A7%E5%BA%94%E7%94%A8/"/>
      <url>/2021/06/23/HTML/CSS%E9%AB%98%E7%BA%A7%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一-过渡"><a href="#一-过渡" class="headerlink" title="一.过渡"></a>一.过渡</h2><h4 id="1-transition-property属性"><a href="#1-transition-property属性" class="headerlink" title="1.transition-property属性"></a>1.transition-property属性</h4><p>transition-property属性用于指定应用过渡效果的css属性的名称，其过渡效果通常在用户将指针移动到元素上时发生。。基本语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">transition-property:none | all | property;<br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">none</td><td align="center">莫有属性会获得过渡效果</td></tr><tr><td align="center">all</td><td align="center">所有属性会获得过渡效果</td></tr><tr><td align="center">property</td><td align="center">用户指定应用过渡效果的css属性的名称，多个名称之间用逗号隔开。</td></tr></tbody></table><span id="more"></span><h4 id="2-transition-duration属性"><a href="#2-transition-duration属性" class="headerlink" title="2.transition-duration属性"></a>2.transition-duration属性</h4><p>transition-duration属性用于定义过渡效果花费的时间，默认值为0，常用单位为秒(s)或毫秒(ms)，其基本语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">transition-duration:time;<br></code></pre></td></tr></table></figure><h4 id="3-transition-timing-function属性"><a href="#3-transition-timing-function属性" class="headerlink" title="3.transition-timing-function属性"></a>3.transition-timing-function属性</h4><p>transition-timing-function属性规定过渡效果的速度曲线，默认为“ease”，其基本语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">transition-timing-function:linear | ease | ease-in | ease-out | ease-in-out | cubic-bezier(n,n,n,n);<br></code></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>linear</td><td>指定以相同速度开始至结束的过渡效果，等同于cubic-bezier(0,0,1,1))</td></tr><tr><td>ease</td><td>指定以慢速开始，然后加快，最后慢慢结束的过渡效果，等同于 cubic-bezier(0.25,0.1,0.25,1)</td></tr><tr><td>ease-in</td><td>指定以慢速开始，然后逐渐加快（淡入效果）的过渡效果，等同于 cubic-bezier(0.42,0,1,1)</td></tr><tr><td>ease-out</td><td>指定以慢速结束（淡出效果）的过渡效果，等同于 cubic-bezier (0,0,0.58,1)</td></tr><tr><td>ease-in-out</td><td>指定以慢速开始和结束的过渡效果，等同于cubic-bezier(0.42,0，0.58，1)</td></tr><tr><td>cubic-bezier(n,n,n,n)</td><td>定义用于加速或者减速的贝塞尔曲线的形状，它们的值在0~1</td></tr></tbody></table><h4 id="4-transition-delay属性"><a href="#4-transition-delay属性" class="headerlink" title="4.transition-delay属性"></a>4.transition-delay属性</h4><p>transition-delay属性规定过渡效果从何时开始，默认值为0，其语法格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">transition-delay:time;<br></code></pre></td></tr></table></figure><h4 id="5-transition属性"><a href="#5-transition属性" class="headerlink" title="5.transition属性"></a>5.transition属性</h4><p>transition属性是一个复合属性，用于在一个属性中设置transition-property，transition-duration，transition-timing-function，transition-delay四个过度属性，其语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">transition: property duration timing-function delay;<br></code></pre></td></tr></table></figure><p>注：</p><p>参数必须按照此顺序，不能颠倒。</p><h2 id="二-变形"><a href="#二-变形" class="headerlink" title="二.变形"></a>二.变形</h2><h3 id="1-认识transform"><a href="#1-认识transform" class="headerlink" title="1.认识transform"></a>1.认识transform</h3><p>CSS3的变形属性可以让元素在一个坐标系统中变形。这个属性包含一系列变形函数，可以进行元素的移动，旋转和缩放。其基本语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">transform:none | transform-functions;<br></code></pre></td></tr></table></figure><p>上述语法格式中，transform属性的默认值为none，适用于内联元素和块元素，表示不进行变形。</p><p>1.matrix():定义矩形变换，即基于X和Y坐标重新定位元素的位置。</p><p>2.translate():移动元素对象，即基于X和Y坐标重新定位元素。</p><p>3.scale():缩放元素对象，可以是任意元素对象尺寸发生变化，取值包括正数，负数和小数。</p><p>4.rotate();旋转元素对象，取值为一个度数值。</p><p>5.skew();倾斜元素对象，取值为一个度数值。</p><h3 id="2-2D转换"><a href="#2-2D转换" class="headerlink" title="2.2D转换"></a>2.2D转换</h3><h4 id="1-平移"><a href="#1-平移" class="headerlink" title="1.平移"></a>1.平移</h4><p>使用translate()方法能重新定义元素的坐标，实现平移效果。其基本语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">transform:translate (x-value,y-value);<br></code></pre></td></tr></table></figure><h4 id="2-缩放"><a href="#2-缩放" class="headerlink" title="2.缩放"></a>2.缩放</h4><p>scale()方法用于缩放元素大小，该函数包含两个参数值。其基本语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">transform:scale(x-axis,y-axis);<br></code></pre></td></tr></table></figure><h4 id="3-倾斜"><a href="#3-倾斜" class="headerlink" title="3.倾斜"></a>3.倾斜</h4><p>skew()方法能狗让元素倾斜显示，基本如法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">transform:skew(x-axis,y-axis);<br></code></pre></td></tr></table></figure><h4 id="4-旋转"><a href="#4-旋转" class="headerlink" title="4.旋转"></a>4.旋转</h4><p>rotate()方法能够旋转指定元素对象，当传入负值时，逆时针旋转。其基本语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">transform:rotate(angle);<br></code></pre></td></tr></table></figure><h4 id="5-更改变换的中心点"><a href="#5-更改变换的中心点" class="headerlink" title="5.更改变换的中心点"></a>5.更改变换的中心点</h4><p>通过transform设置的属性都是以元素的中心点为基准进行的，如果需要改变这个中心的，可以使用transform-origin属性，其基本语法元素如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">transform-origin:x-axis y-axis z-axis;<br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">x-axis</td><td align="center">定义视图被置于X轴的何处，可能的值为：1.left 2.center 3.right 4.length 5.%</td></tr><tr><td align="center">y-axis</td><td align="center">定义视图被置于Y轴的何处，可能的值为：1.top 2.center 3.bottom 4.length 5.%</td></tr><tr><td align="center">z-axis</td><td align="center">定义视图被置于Z轴的何处，可能的值为：1.length</td></tr></tbody></table><h3 id="3-3D旋转"><a href="#3-3D旋转" class="headerlink" title="3.3D旋转"></a>3.3D旋转</h3><h4 id="1-rotateX-方法"><a href="#1-rotateX-方法" class="headerlink" title="1.rotateX()方法"></a>1.rotateX()方法</h4><p>rotateX()函数用于指定元素围绕X轴旋转，其基本语法元素如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">rotate:rotateX(a);<br></code></pre></td></tr></table></figure><h4 id="2-rotateY-方法"><a href="#2-rotateY-方法" class="headerlink" title="2.rotateY()方法"></a>2.rotateY()方法</h4><p>rotateY()函数用于指定元素围绕X轴旋转，其基本语法元素如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">rotate:rotateY(a);<br></code></pre></td></tr></table></figure><h4 id="3-rotate3D-方法"><a href="#3-rotate3D-方法" class="headerlink" title="3.rotate3D()方法"></a>3.rotate3D()方法</h4><p>其基本语法元素如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">rotate3d:(x,y,z,angle);<br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">属性名称</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">transform</td><td align="center">向元素应用2D或3D转换</td></tr><tr><td align="center">transform-origin</td><td align="center">允许改变被转换元素的位置</td></tr><tr><td align="center">transform-style</td><td align="center">规定被嵌套元素如何在3D空间中显示</td></tr><tr><td align="center">perspective</td><td align="center">规定3D元素中的透视效果</td></tr><tr><td align="center">perspective-origin</td><td align="center">规定3D元素的底部位置</td></tr><tr><td align="center">perspective-visibility</td><td align="center">定义元素在不面对屏幕时是否可见</td></tr></tbody></table><h2 id="3-动画"><a href="#3-动画" class="headerlink" title="3.动画"></a>3.动画</h2><h3 id="1-keyframes"><a href="#1-keyframes" class="headerlink" title="1.@keyframes"></a>1.@keyframes</h3><p>使用动画之前必须先定义一个关键帧，一个关键帧表示一个动画过程中的一个状态。其语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">@keyframes animationname&#123;<br>@keyframes-selector&#123;css-styles;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>1.animationname:表示当前动画的名称，不能为空。</p><p>2.@keyframes-selector：关键帧选择器，即指定当前关键帧要应用到整个动画中的位置，值可以是百分比，from或者to。</p><p>3.css-styles:定义执行到当前动画帧是对应的动画状态，多个属性间用分号分隔。</p><h3 id="2-animation-name：属性"><a href="#2-animation-name：属性" class="headerlink" title="2.animation-name：属性"></a>2.animation-name：属性</h3><p>animation-name属性用于定义要应用的动画名称，为@keyframes动画规定名称。其基本语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">animation-name:keyframename | none;<br></code></pre></td></tr></table></figure><p>适用于所有块内元素和行内元素。</p><h3 id="3-animation-duration属性"><a href="#3-animation-duration属性" class="headerlink" title="3.animation-duration属性"></a>3.animation-duration属性</h3><p>animation-duration属性用于定义整个动画效果完成所需要的时间，以秒或毫秒计，其基本语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">animation-duration:time;<br></code></pre></td></tr></table></figure><h3 id="4-animation-timing-function属性"><a href="#4-animation-timing-function属性" class="headerlink" title="4.animation-timing-function属性"></a>4.animation-timing-function属性</h3><p>animation-timing-function属性用来规定动画速度的曲线，可以定义使用哪种方式来执行动画效果。基本语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">animation-timing-function:value;<br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">linear</td><td align="center">动画从头到尾的速度是相同的</td></tr><tr><td align="center">ease</td><td align="center">默认。动画以低速开始，然后加快，以慢速结尾</td></tr><tr><td align="center">ease-in</td><td align="center">动画以低速开始</td></tr><tr><td align="center">ease-out</td><td align="center">动画以低速结束</td></tr><tr><td align="center">ease-in-out</td><td align="center">动画以低速开始和结束</td></tr><tr><td align="center">cubic-bezier(n,n,n,n)</td><td align="center">在该函数中自己的值。可能的值是从0到1的数值</td></tr></tbody></table><h3 id="5-animation-delay属性"><a href="#5-animation-delay属性" class="headerlink" title="5.animation-delay属性"></a>5.animation-delay属性</h3><p>animation-delay属性用于定义执行动画效果之前延迟的时间，及动画神魔时候开始。基本语法为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">animation-delay:time;<br></code></pre></td></tr></table></figure><h3 id="6-animation-iteration-count属性"><a href="#6-animation-iteration-count属性" class="headerlink" title="6.animation-iteration-count属性"></a>6.animation-iteration-count属性</h3><p>animation-iteration-count属性用于定义动画的播放次数，基本语法为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">animation-iteration-count:number | infinite;<br></code></pre></td></tr></table></figure><h3 id="7-animation-direction属性"><a href="#7-animation-direction属性" class="headerlink" title="7.animation-direction属性"></a>7.animation-direction属性</h3><p>animation-direction属性定义当前动画的播放方向，及动画播放完成后是否逆向交替循环，基本语法格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">animation-direction:normal | alternate;<br></code></pre></td></tr></table></figure><h3 id="8-animation-属性"><a href="#8-animation-属性" class="headerlink" title="8.animation 属性"></a>8.animation 属性</h3><p>将所有属性放在一起定义，其基本语法格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">anmiation:animation-name animation-duration animation-timing-function animation-delay animation-iteration-count animation-direction<br></code></pre></td></tr></table></figure><p>必须指定animation-name和animation-duration属性，否则持续时间为0，永远不会动画播放。</p>]]></content>
      
      
      <categories>
          
          <category> HTML学习 </category>
          
          <category> css学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
            <tag> CSS高级应用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多媒体技术</title>
      <link href="/2021/06/23/HTML/%E5%A4%9A%E5%AA%92%E4%BD%93%E6%8A%80%E6%9C%AF/"/>
      <url>/2021/06/23/HTML/%E5%A4%9A%E5%AA%92%E4%BD%93%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="一-在HTML中嵌入视频"><a href="#一-在HTML中嵌入视频" class="headerlink" title="一.在HTML中嵌入视频"></a>一.在HTML中嵌入视频</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;video src=&quot;视频文件路径&quot; controls=&quot;controls&quot;&gt;&lt;/video&gt;<br></code></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>autoplay</td><td>autoplay</td><td>当页面载入完成后自动播放视频。</td></tr><tr><td>loop</td><td>loop</td><td>视频结束时重新开始播放。</td></tr><tr><td>preload</td><td>auto/meta/ none</td><td>如果出现该属性，则视频在页面加载时进行加载，并预备播 放。如果使用”autoplay”，则忽略该属性。</td></tr><tr><td>poster</td><td>url</td><td>当视频缓冲不足时，该属性值链接一个图像，并将该图像按 照一定的比例显示出来。</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;video src=&quot;视频文件路径&quot; controls=&quot;controls&quot; autoplay=&quot;autoplay&quot; loop=&quot;loop&quot;&gt;&lt;/video&gt;<br></code></pre></td></tr></table></figure><span id="more"></span><h3 id="2-在HTML中嵌入音频"><a href="#2-在HTML中嵌入音频" class="headerlink" title="2.在HTML中嵌入音频"></a>2.在HTML中嵌入音频</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;audio src=&quot;音频文件路径&quot; controls=&quot;controls&quot;&gt;&lt;/audio&gt;<br></code></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>autoplay</td><td>autoplay</td><td>当页面载入完成后自动播放视频。</td></tr><tr><td>loop</td><td>loop</td><td>视频结束时重新开始播放。</td></tr><tr><td>preload</td><td>auto/meta/ none</td><td>如果出现该属性，则视频在页面加载时进行加载，并预备播 放。如果使用”autoplay”，则忽略该属性。</td></tr><tr><td>poster</td><td>url</td><td>当视频缓冲不足时，该属性值链接一个图像，并将该图像按 照一定的比例显示出来。</td></tr></tbody></table><h3 id="3-视频和音频的方法"><a href="#3-视频和音频的方法" class="headerlink" title="3.视频和音频的方法"></a>3.视频和音频的方法</h3><h4 id="1-video和audio的方法"><a href="#1-video和audio的方法" class="headerlink" title="1.video和audio的方法"></a>1.video和audio的方法</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>load()</td><td>加载媒体文件，为播放做准备。通常用于播放前的预加载，也会用于重新 加载媒体文件</td></tr><tr><td>play()</td><td>播放媒体文件。如果视频没有加载，则加载并播放；如果视频是暂停的， 则变为播放</td></tr><tr><td>pause()</td><td>暂停播放媒体文件</td></tr><tr><td>canPlayType()</td><td>测试浏览器是否支持指定的媒体类型</td></tr></tbody></table><h4 id="2-video和audio的事件"><a href="#2-video和audio的事件" class="headerlink" title="2.video和audio的事件"></a>2.video和audio的事件</h4><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td>play</td><td>当执行方法 play0时勉发</td></tr><tr><td>playing</td><td>正在播放时射发</td></tr><tr><td>pause</td><td></td></tr><tr><td>tianeupdate</td><td>当播放位置被改变时就发</td></tr><tr><td>eeded</td><td>当播放结束后停上播放时能发</td></tr><tr><td>waiting</td><td>在等待加载下一优时触发</td></tr><tr><td>rarcchange</td><td>在当前播放速率改变时角发</td></tr><tr><td>volumechange</td><td>在音量改变时发</td></tr><tr><td>canplay</td><td>以当前播战速率，需要缓冲时魅发</td></tr><tr><td>canplaythrough</td><td>以当前播放速率，不需要缓冲时发</td></tr><tr><td>durationchange</td><td>当活放时长改变时烛发</td></tr><tr><td>loadstart</td><td>在浏览器开始在网上子找数据时触发</td></tr><tr><td>progress</td><td>当浏览器正在获取媒体文件时魁发</td></tr><tr><td>supcnd</td><td>当浏览著暂停获取媒体文件，且文件获取并没有正常结束时触发</td></tr><tr><td>abort</td><td>当中止获取媒体数据时触发。但这种中止不是由错误引起的</td></tr><tr><td>error</td><td>当获取媒体过程中出铝时触发</td></tr><tr><td>cmpbjed</td><td>当所在网络变为初始化状态时地发</td></tr><tr><td>stalled</td><td>浏象器尝试获取媒体数据失收时祛发</td></tr><tr><td>loadedmetadata</td><td>在加载完媒体元数据时热发</td></tr><tr><td>loadeddata</td><td>在加载完当前位置的媒体播放数据时触发</td></tr><tr><td>seeking</td><td>浏览器正在请求数据时勉发</td></tr><tr><td>seeked</td><td>浏览器停止请求数据时触发</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> HTML学习 </category>
          
          <category> css学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
            <tag> 多媒体技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表单的应用</title>
      <link href="/2021/06/23/HTML/%E8%A1%A8%E5%8D%95%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2021/06/23/HTML/%E8%A1%A8%E5%8D%95%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一-认知表单"><a href="#一-认知表单" class="headerlink" title="一.认知表单"></a>一.认知表单</h2><h3 id="1-创建表单"><a href="#1-创建表单" class="headerlink" title="1.创建表单"></a>1.创建表单</h3><p>在HTML中，<from></from>标记被用于定义表单域，及创建一个表单，基本语法如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;url地址&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;提交方式&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;表单名称&quot;</span>&gt;</span><br>       各种表单控件<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><span id="more"></span><h3 id="2-表单属性"><a href="#2-表单属性" class="headerlink" title="2.表单属性"></a>2.表单属性</h3><h4 id="1-actions属性"><a href="#1-actions属性" class="headerlink" title="1.actions属性"></a>1.actions属性</h4><p>在表单收集到信息后，需要将信息传递给服务器进行处理，action属性用于指定接收并处理表单数据的服务器程序的url地址。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;form action=&quot;form action.asp&quot;&gt;<br></code></pre></td></tr></table></figure><p>  表示当提交表单时，表单数据会传送到名为”form_action.asp”的页面去处理。action 的属性值可以是相对路径或绝对路径，还可以为接收数据的E-mail邮箱地址。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;form action=mailto:htmlcss@163.com&gt;<br></code></pre></td></tr></table></figure><h4 id="2-method-属性"><a href="#2-method-属性" class="headerlink" title="2.method 属性"></a>2.method 属性</h4><p>method属性用于设置表单数据的提交方式，其取值为get或post。在HTML5中，可以通过form标记的method属性指明表单处理服务器处理数据的方法，示例代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;form action=&quot;form action.asp&quot; method=&quot;get&quot;&gt;<br></code></pre></td></tr></table></figure><h4 id="3-name属性"><a href="#3-name属性" class="headerlink" title="3.name属性"></a>3.name属性</h4><p>name属性用于指定表单的名称，以区分同一个页面中的多个表单。</p><h4 id="4-autocomplete-属性"><a href="#4-autocomplete-属性" class="headerlink" title="4.autocomplete 属性"></a>4.autocomplete 属性</h4><p>autocomplete属性用于指定表单是否有自动完成功能。所谓“自动完成”是指将表单控件输入的内容记录下来，当再次输入时，会将输入的历史记录显示在一个下拉列表里，以实现自动完成输入。</p><h5 id="autocomplete属性有2个值，对它们的解释如下。"><a href="#autocomplete属性有2个值，对它们的解释如下。" class="headerlink" title="autocomplete属性有2个值，对它们的解释如下。"></a>autocomplete属性有2个值，对它们的解释如下。</h5><p>1.on：表单有自动完成功能。<br>2.off：表单无自动完成功能。</p><h4 id="5-novalidate属性"><a href="#5-novalidate属性" class="headerlink" title="5.novalidate属性"></a>5.novalidate属性</h4><p>novalidate属性指定在提交表单时取消对表单进行有效的检查。为表单设置该属性，可以关闭整个表单的验证，这样可以使form内的所有表单控件不被验证。</p><h3 id="3-input元素及属性"><a href="#3-input元素及属性" class="headerlink" title="3.input元素及属性"></a>3.input元素及属性</h3><p>input元素常见属性如下表：</p><table><thead><tr><th>属性</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td></td><td>text</td><td>单行文本输入框</td></tr><tr><td></td><td>password</td><td>密码输入框</td></tr><tr><td></td><td>radio</td><td>单选按钮</td></tr><tr><td></td><td>checkbox</td><td>复选框</td></tr><tr><td></td><td>button</td><td>普通按钮</td></tr><tr><td></td><td>submit</td><td>提交按钮</td></tr><tr><td>type</td><td>reset</td><td>重置按钮</td></tr><tr><td></td><td>image</td><td>图像形式的提交按钮</td></tr><tr><td></td><td>hidden</td><td>隐藏域</td></tr><tr><td></td><td>file</td><td>文件域</td></tr><tr><td></td><td>email</td><td>E-mail 地址的输入域</td></tr><tr><td></td><td>url</td><td>URL地址的输入域</td></tr><tr><td></td><td>number</td><td>数值的输入域</td></tr></tbody></table><table><thead><tr><th>属性</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td></td><td>range</td><td>一定范围内数字值得输入域</td></tr><tr><td></td><td>Date pickers (date, month, week. time,datetime,datetime-local)</td><td>日期和时间的输入类型</td></tr><tr><td></td><td>search</td><td>搜索域</td></tr><tr><td></td><td>color</td><td>颜色输入类型</td></tr><tr><td></td><td>tel</td><td>电话号码输入类型</td></tr><tr><td>name</td><td>由用户自定义</td><td>控件的名称</td></tr><tr><td>value</td><td>由用户自定义</td><td>input 控件中的默认文本值</td></tr><tr><td>size</td><td>正整数</td><td>input 控件在页面中的显示宽度</td></tr><tr><td>readonly</td><td>readonly</td><td>该控件内容为只读（不能编辑修改）</td></tr><tr><td>disabled</td><td>disabled</td><td>第一次加载页面时禁用该控件(显示为 灰色）</td></tr><tr><td>checked</td><td>checked</td><td>定义选择控件默认被选中的项</td></tr><tr><td>maxlength</td><td>正整数</td><td>控件允许输入的最多字符数</td></tr><tr><td>autocomplete</td><td>on/off</td><td>设定是否自动完成表单字段内容</td></tr><tr><td>autofocus</td><td>autofocus</td><td>指定页面加载后是否自动获取焦点</td></tr><tr><td>form</td><td>form元素的id</td><td>设定字段隶属于哪一个或多个表单</td></tr><tr><td>list</td><td>datalist 元素的id</td><td>指定字段的候选数据值列表</td></tr><tr><td>multiple</td><td>multiple</td><td>指定输入框是否可以选择多个值</td></tr><tr><td>min、max和 step</td><td>数值</td><td>规定输入框所允许的最大值、最小值及 间隔</td></tr><tr><td>pattern</td><td>字符串</td><td>验证输入的内容是否与定义的正则表 达式匹配</td></tr><tr><td>placeholder</td><td>字符串</td><td>为input类型的输入框提供一种提示</td></tr><tr><td>required</td><td>required</td><td>规定输入框填写的内容不能为空</td></tr></tbody></table><h3 id="2-input元素的其他属性"><a href="#2-input元素的其他属性" class="headerlink" title="2.input元素的其他属性"></a>2.input元素的其他属性</h3><h4 id="1-autofocus属性"><a href="#1-autofocus属性" class="headerlink" title="1.autofocus属性"></a>1.autofocus属性</h4><p>autofocus属性用于指定页面加载后是否获得焦点。</p><h4 id="2-list属性"><a href="#2-list属性" class="headerlink" title="2.list属性"></a>2.list属性</h4><p>list属性用于指定输入框所绑定的datalist属性，其值是某个datalist元素的id。</p><h4 id="3-multiple属性"><a href="#3-multiple属性" class="headerlink" title="3.multiple属性"></a>3.multiple属性</h4><p>multiple属性指定输入框可以选择多个值，该属性是用于Email和file类型的元素。</p><h4 id="4-pattern属性"><a href="#4-pattern属性" class="headerlink" title="4.pattern属性"></a>4.pattern属性</h4><p>pattern属性用于验证input类型输入框中，用户输入的内容是否与所定义的正则表达式相匹配。</p><table><thead><tr><th>正则表达式</th><th>说明</th></tr></thead><tbody><tr><td>^[0-9]*$</td><td>数字</td></tr><tr><td>^\d{n}$</td><td>n位的数字</td></tr><tr><td>^\d{n,}$</td><td>至少n位的数字</td></tr><tr><td>^\d{m,n}$</td><td>m-n位的数字</td></tr><tr><td>^(0 | [1-9][0-9]*)$</td><td>零和非零开头的数字</td></tr><tr><td>^([1-9][0-9]*)+(.<a href="1%EF%BC%8C2">0-9</a>)?$</td><td>非零开头的最多带两位小数的数字</td></tr><tr><td>“(-|+)?\d+(.\d+)?$</td><td>正数、负数和小数</td></tr><tr><td>^\d+S或“[1-9]\d*|0$</td><td>非负整数</td></tr><tr><td>^-[1-9]\d*|0S或~((-\d+）|(0+))$</td><td>非正整数</td></tr><tr><td>^u4e00-\u9fa5]{0，}￥</td><td>汉字</td></tr><tr><td>^[A-Za-z0-9]+$或“[A-Za-z0-9]{4,40}$</td><td>英文和数字</td></tr><tr><td>^[A-Za-z]+$</td><td>由26个英文字母组成的字符串</td></tr><tr><td>^[A-Za-z0-9]+$</td><td>由数字和26个英文字母组成的字符串</td></tr><tr><td>^\w+S或\w{3，20}$</td><td>由数字、26个英文字母或者下划线组 成的字符串</td></tr><tr><td>^[\u4E00-\u9FA5A-Za-z0-9_]+$</td><td>中文、英文、数字包括下划线</td></tr><tr><td>^\w+(l-+.J\w+)*@\w+([-J\w＋)<em>.\w+(l-.j\w+)</em>$</td><td>E-mail 地址</td></tr><tr><td>[a-zA-z]+://[\s]<em>或“http://([\w-]+.)+[w-J+( [w-./2%&amp;=]</em>)?$</td><td>URL地址</td></tr><tr><td>^\d（15)\d（18)$</td><td>身份证号（15位、18位数字）</td></tr><tr><td>^([0-9])(7，18](x|X）?S或~\d（8,18）|[0-9x][818)1 <a href="8,18">0-9X</a>?$</td><td>以数字、字母x结尾的短身份证号码</td></tr><tr><td>^[a-zA-Z][a-zA-Z0-9_]（4,15)$</td><td>账号是否合法(字母开头，允许5~ 16字节，允许字母数字下划线）</td></tr><tr><td>^[a-zA-Z]\w(5,17)$</td><td>密码(以字母开头，长度为6～18. 只能包含字母、数字和下划线）</td></tr></tbody></table><h4 id="5-placeholder属性"><a href="#5-placeholder属性" class="headerlink" title="5.placeholder属性"></a>5.placeholder属性</h4><p>placeholder属性用于为input类型的输入框提供相关提示信息，以描述输入框期待用户输入何种内容。在输入框为空时显示出现，而当输入框获得焦点时则消失。</p><h4 id="6-required属性"><a href="#6-required属性" class="headerlink" title="6.required属性"></a>6.required属性</h4><p>required属性用于规定输入框填写的内容不能为空，否则不允许用户提交表单。</p><h3 id="四-其他表单元素"><a href="#四-其他表单元素" class="headerlink" title="四.其他表单元素"></a>四.其他表单元素</h3><h3 id="1-textarea元素"><a href="#1-textarea元素" class="headerlink" title="1.textarea元素"></a>1.textarea元素</h3><p>当定义input控件的type属性值为text时，可以创建一个单行文本输入框。通过textarea控件可以轻松地创建多行文本输入框，其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;每行中的字符数&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;显示的行数&quot;</span>&gt;</span><br>       文本内容<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">属性</th><th align="center">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">name</td><td align="center">由用户定义</td><td align="center">控件的名称</td></tr><tr><td align="center">readonly</td><td align="center">readonly</td><td align="center">该控件内容为只读(不可编辑)</td></tr><tr><td align="center">disabled</td><td align="center">disabled</td><td align="center">第一次加载页面时禁用该控件</td></tr></tbody></table><h3 id="2-select元素"><a href="#2-select元素" class="headerlink" title="2.select元素"></a>2.select元素</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;select name=&quot;&quot; id=&quot;&quot;&gt;<br>       &lt;option value=&quot;&quot;&gt;&lt;/option&gt;<br>       &lt;option value=&quot;&quot;&gt;&lt;/option&gt;<br>       &lt;option value=&quot;&quot;&gt;&lt;/option&gt;<br>   &lt;/select&gt;<br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">标记名</th><th align="center">常用属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">select</td><td align="center">size</td><td align="center">指定下拉菜单的可见选项数</td></tr><tr><td align="center"></td><td align="center">multiple</td><td align="center">定义 multiple=”multiple”时，下拉菜单将具有多选择的功能，方法为按住Ctrl键同时选择多项</td></tr><tr><td align="center"><option></td><td align="center">selected</td><td align="center">定义selected=”selected”时，当前相机默认选择项。</td></tr></tbody></table><h4 id="3-keygen-元素"><a href="#3-keygen-元素" class="headerlink" title="3 .keygen 元素"></a>3 .keygen 元素</h4><p>keygen元素用于表单的密钥生成器，能够使用户验证更为安全、可靠。当提交表单时会生成两个键：一个是私钥，它存储在客户端；另一个是公钥，它被发送到服务器，验证用户的客户端证书。如果新的浏览器能够对keygen元素的支持度再增强一些，则有望使其成为一种有用的安全标准。</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>autofocus</td><td>使 keygen 字段在页面加载时获得焦点</td></tr><tr><td>challenge</td><td>如果使用，则将keygen的值设置为在提交时询问</td></tr><tr><td>disabled</td><td>禁用 keytag 字段</td></tr><tr><td>form</td><td>定义该keygen 字段所属的一个或多个表单</td></tr><tr><td>keytype</td><td>定义keytype。rsa生成RSA密钥</td></tr><tr><td>name</td><td>定义 keygen 元素的唯一名称。name属性用于在提交表单时搜集字段的值</td></tr></tbody></table><h4 id="4-output元素"><a href="#4-output元素" class="headerlink" title="4.output元素"></a>4.output元素</h4><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>for</td><td>定义输出域相关的一个或多个元素</td></tr><tr><td>form</td><td>定义输入字段所属的一个或多个表单</td></tr><tr><td>name</td><td>定义对象的唯一名称</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> HTML学习 </category>
          
          <category> css学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
            <tag> 表单的应用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浮动与定位</title>
      <link href="/2021/06/22/HTML/%E6%B5%AE%E5%8A%A8%E4%B8%8E%E5%AE%9A%E4%BD%8D/"/>
      <url>/2021/06/22/HTML/%E6%B5%AE%E5%8A%A8%E4%B8%8E%E5%AE%9A%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="一-元素的浮动"><a href="#一-元素的浮动" class="headerlink" title="一.元素的浮动"></a>一.元素的浮动</h2><h3 id="1-元素的浮动元素float"><a href="#1-元素的浮动元素float" class="headerlink" title="1.元素的浮动元素float"></a>1.元素的浮动元素float</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">选择器&#123;<br>float：属性值;<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">left</td><td align="center">元素向左浮动</td></tr><tr><td align="center">right</td><td align="center">元素向右浮动</td></tr><tr><td align="center">none</td><td align="center">元素不浮动</td></tr></tbody></table><span id="more"></span><h3 id="2-清除浮动"><a href="#2-清除浮动" class="headerlink" title="2.清除浮动"></a>2.清除浮动</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">选择器&#123;<br>clear：属性值;<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">left</td><td align="center">不允许元素向左浮动</td></tr><tr><td align="center">right</td><td align="center">不允许元素向右浮动</td></tr><tr><td align="center">both</td><td align="center">同时清除两侧元素不浮动</td></tr></tbody></table><p>注：clear属性只能清楚元素左右两侧浮动的影响。并不能清楚子元素浮动对父元素的影响。</p><h5 id="1-使用空标记清除浮动"><a href="#1-使用空标记清除浮动" class="headerlink" title="1.使用空标记清除浮动"></a>1.使用空标记清除浮动</h5><p>可以是<div>,<p>,<hr />等。</p><h5 id="2-使用overflow属性清除浮动"><a href="#2-使用overflow属性清除浮动" class="headerlink" title="2.使用overflow属性清除浮动"></a>2.使用overflow属性清除浮动</h5><h5 id="3-使用after伪对象清除浮动"><a href="#3-使用after伪对象清除浮动" class="headerlink" title="3.使用after伪对象清除浮动"></a>3.使用after伪对象清除浮动</h5><p>(1)必须为清除浮动的元素伪对象设置”height：0；“样式，</p><p>(2)必须在伪对象中设置content属性，属性值可以为空。</p><h3 id="2-overflow属性"><a href="#2-overflow属性" class="headerlink" title="2.overflow属性"></a>2.overflow属性</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">选择器&#123;<br>overflow：属性值;<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">visible</td><td align="center">内容不会被修剪，会呈现在元素框之外（默认）</td></tr><tr><td align="center">hidden</td><td align="center">溢出内容会被修剪，并且被修剪得内容是不显示的。</td></tr><tr><td align="center">auto</td><td align="center">在需要时产生滚动条，即自适应所要显示的内容。</td></tr><tr><td align="center">scroll</td><td align="center">溢出内容会被修剪，且浏览器会始终显示滚动条。</td></tr></tbody></table><h3 id="三-元素的定位"><a href="#三-元素的定位" class="headerlink" title="三.元素的定位"></a>三.元素的定位</h3><h4 id="1-元素的定位属性"><a href="#1-元素的定位属性" class="headerlink" title="1.元素的定位属性"></a>1.元素的定位属性</h4><h5 id="1-定位模式"><a href="#1-定位模式" class="headerlink" title="1.定位模式"></a>1.定位模式</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">选择器&#123;<br>position:属性值;<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">static</td><td align="center">静态定位（默认）</td></tr><tr><td align="center">relative</td><td align="center">相对定位，相对于其源文档流的位置进行定位。</td></tr><tr><td align="center">absolute</td><td align="center">绝对定位，相对于其上一个已经定位的父元素进行定位。</td></tr><tr><td align="center">fixed</td><td align="center">固定定位，相对于浏览器窗口进行对位。</td></tr></tbody></table><h5 id="2-边偏移"><a href="#2-边偏移" class="headerlink" title="2.边偏移"></a>2.边偏移</h5><table><thead><tr><th align="center">边偏移属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">top</td><td align="center">顶端偏移量，定义元素相对于其父元素上边线的距离。</td></tr><tr><td align="center">bottom</td><td align="center">底端偏移量，定义元素相对于其父元素下边线的距离。</td></tr><tr><td align="center">left</td><td align="center">左端偏移量，定义元素相对于其父元素左边线的距离。</td></tr><tr><td align="center">right</td><td align="center">右端偏移量，定义元素相对于其父元素右边线的距离。</td></tr></tbody></table><h4 id="2-静态定位static"><a href="#2-静态定位static" class="headerlink" title="2.静态定位static"></a>2.静态定位static</h4><p>静态定位是元素默认定位方式，当position属性的取值为static时。可以将元素定位于静态位置。</p><h5 id="3-相对定位relative"><a href="#3-相对定位relative" class="headerlink" title="3.相对定位relative"></a>3.相对定位relative</h5><p>相对定位是将元素相对于它在标准文档流中的位置进行定位，当position属性的取值为relation时。可以将元素定位于相对位置。对元素设置相对定位后，可以通过边偏移属性改变元素的位置，但它在文档流中的位置依然保留。</p><h5 id="4-绝对定位absolute"><a href="#4-绝对定位absolute" class="headerlink" title="4.绝对定位absolute"></a>4.绝对定位absolute</h5><p>绝对定位是将元素依据最近的已经定位的父元素进行定位，若所有父元素都莫有定位，则依据body根元素进行定位。</p><h5 id="5-固定定位fixed"><a href="#5-固定定位fixed" class="headerlink" title="5.固定定位fixed"></a>5.固定定位fixed</h5><p>固定定位以浏览器窗口为参照物来定义网页元素。当元素设置固定定位后，他将脱离标准文档流的控制，始终一句浏览器窗口来定义自己的显示位置。</p><h5 id="6-z-index层叠等级属性"><a href="#6-z-index层叠等级属性" class="headerlink" title="6.z-index层叠等级属性"></a>6.z-index层叠等级属性</h5><p>z-index默认值为0，值越大，定位元素越居上。</p><p>注:</p><p>z-index属性仅对定位元素生效。</p><h3 id="四-元素的来性和转换"><a href="#四-元素的来性和转换" class="headerlink" title="四.元素的来性和转换"></a>四.元素的来性和转换</h3><h4 id="1-元素的类型"><a href="#1-元素的类型" class="headerlink" title="1.元素的类型"></a>1.元素的类型</h4><h4 id="1-块元素"><a href="#1-块元素" class="headerlink" title="1.块元素"></a>1.块元素</h4><p>块元素在页面中以区域块的形式出现，其特点是，每个块元素通常都会独自占据一整行或多整行，可以对其设置宽度、高度、对齐等属性，常用于网页布局和网页结构的搭建。<br>常见的块元素有<h1>~<h6>、<p>、<div>、<ul>、<ol>、<li>等，其中<div>标记是最典型的块元素。</p><h4 id="2-行内元素"><a href="#2-行内元素" class="headerlink" title="2.行内元素"></a>2.行内元素</h4><p>行内元素也称内联元素或内嵌元素，其特点是，不必在新的一行开始，同时，也不强迫其他元素在新的一行显示。一个行内元素通常会和它前后的其他行内元素显示在同一行中，它们不占有独立的区域，仅仅靠自身的字体大小和图像尺寸来支撑结构，一般不可以设置宽度、高度、对齐等属性，常用于控制页面中文本的样式。<br>常见的行内元素有<strong>、<b>、<em>、<i>、<del><s>、<ins>、<u>、<a>、<span>等，其中<span>标记是最典型的行内元素。</p><h4 id="2-元素的转换"><a href="#2-元素的转换" class="headerlink" title="2.元素的转换"></a>2.元素的转换</h4><p>网页是由多个块元素和行内元素构成的盒子排列而成的。如果希望行内元素具有块元素的某些特性，如可以设置宽高，或者需要块元素具有行内元素的某些特性，如不独占一行排列，可以使用display属性对元素的类型进行转换。</p><p>1.display属性常用的属性值及含义如下。<br>2.inline:此元素将显示为行内元素(行内元素默认的 display属性值)。<br>3.block:此元素将显示为块元素(块元素默认的display属性值)。<br>4.inline-block:此元素将显示为行内块元素，可以对其设置宽高和对齐等属性，但是该元素不会独占一行。<br>5.none：此元素将被隐藏，不显示，也不占用页面空间，相当于该元素不存在。</p>]]></content>
      
      
      <categories>
          
          <category> HTML学习 </category>
          
          <category> css学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
            <tag> css浮动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS盒子模型</title>
      <link href="/2021/06/22/HTML/CSS%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
      <url>/2021/06/22/HTML/CSS%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="一-盒子模型的相关属性"><a href="#一-盒子模型的相关属性" class="headerlink" title="一.盒子模型的相关属性"></a>一.盒子模型的相关属性</h2><h3 id="1-边框属性"><a href="#1-边框属性" class="headerlink" title="1.边框属性"></a>1.边框属性</h3><table><thead><tr><th align="center">设置内容</th><th align="center">样式属性</th><th align="center">常用属性值</th></tr></thead><tbody><tr><td align="center">边框样式</td><td align="center">border-style：上边 【右边 下边 左边】；</td><td align="center">none 无（默认），solid 单实线，dashed 虚线，dotted 点线，double 双实线</td></tr><tr><td align="center">边框宽度</td><td align="center">border-swidth：上边 【右边 下边 左边】；</td><td align="center">像素值</td></tr><tr><td align="center">边框颜色</td><td align="center">border-color：上边 【右边 下边 左边】；</td><td align="center">颜色值，#十六进制，rgb(r,g,b),</td></tr><tr><td align="center">综合设置边框</td><td align="center">border：四边宽度 四边样式 四边颜色</td><td align="center"></td></tr><tr><td align="center">圆角边框</td><td align="center">border-radius：水平半径参数/垂直半径参数</td><td align="center">像素值或百分比</td></tr><tr><td align="center">图片边框</td><td align="center">border-images：图片路径 裁切方式/边框宽度/边框扩展距离 重复方式</td><td align="center"></td></tr></tbody></table><span id="more"></span><h5 id="图片边框"><a href="#图片边框" class="headerlink" title="图片边框"></a>图片边框</h5><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">border-image-soursse</td><td align="center">指定图片路径</td></tr><tr><td align="center">border-image-slice</td><td align="center">指定边框图像顶部，右部，底部，左侧内测偏移</td></tr><tr><td align="center">border-image-width</td><td align="center">指定边框宽度</td></tr><tr><td align="center">border-image-outset</td><td align="center">指定边框背景向盒子外部延伸的距离</td></tr><tr><td align="center">border-image-repeat</td><td align="center">指定背景图片的平埔方式</td></tr></tbody></table><h2 id="二-边框属性"><a href="#二-边框属性" class="headerlink" title="二.边框属性"></a>二.边框属性</h2><h3 id="1-内边距"><a href="#1-内边距" class="headerlink" title="1.内边距"></a>1.内边距</h3><p>1.padding-top:上边距离；</p><p>2.padding-left:左边距离；</p><p>3.padding-right：右边距离；</p><p>4.padding-bottom：底部距离；</p><p>5.padding：上内边距 【右内 下内 左内】；</p><h3 id="2-外边距"><a href="#2-外边距" class="headerlink" title="2.外边距"></a>2.外边距</h3><p>1.margin-top:上边距离；</p><p>2.margin-left:左边距离；</p><p>3.margin-right：右边距离；</p><p>4.margin-bottom：底部距离；</p><p>5.margin：上内边距 【右内 下内 左内】；</p><h3 id="3-box-shadow属性"><a href="#3-box-shadow属性" class="headerlink" title="3.box-shadow属性"></a>3.box-shadow属性</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">box-shadow:像素值1，像数值2，像素值3 像素值4 颜色值 阴影类型；<br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">参素值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">像素值1</td><td align="center">表示元素水平阴影位置，必选</td></tr><tr><td align="center">像素值2</td><td align="center">表示元素垂直阴影位置，必选</td></tr><tr><td align="center">像素值3</td><td align="center">阴影模糊半径，可选</td></tr><tr><td align="center">像素值4</td><td align="center">阴影扩展半径，不可为负，可选</td></tr><tr><td align="center">颜色值</td><td align="center">阴影颜色 可选</td></tr><tr><td align="center">阴影类型</td><td align="center">内阴影(inset)/外阴影(默认)，可选</td></tr></tbody></table><h3 id="4-box-sizing属性"><a href="#4-box-sizing属性" class="headerlink" title="4.box-sizing属性"></a>4.box-sizing属性</h3><p>box-sizing属性用于定义盒子的宽度值和高度值是否包括元素的内边距和边距，其基本语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">box-sizing:content-box/border-box;<br></code></pre></td></tr></table></figure><p>1.content-box：浏览器对盒子模型的解释遵循w3c标准，当定义width和height时，它的参数值不包括border和padding。</p><p>2.border-box：当定义width和height时，border和padding的参数值被包括在width和height之内。</p><h2 id="三-背景属性"><a href="#三-背景属性" class="headerlink" title="三.背景属性"></a>三.背景属性</h2><h4 id="1-背景与图片不透明度的设置"><a href="#1-背景与图片不透明度的设置" class="headerlink" title="1.背景与图片不透明度的设置"></a>1.背景与图片不透明度的设置</h4><h5 id="1-RGBA模式"><a href="#1-RGBA模式" class="headerlink" title="1.RGBA模式"></a>1.RGBA模式</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">rgba(r,g,b,alpha);<br></code></pre></td></tr></table></figure><p>alpha参数是一个介于0.0和1.0之间的数字。</p><h5 id="2-opacity属性"><a href="#2-opacity属性" class="headerlink" title="2.opacity属性"></a>2.opacity属性</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">opacity:opacityValue;<br></code></pre></td></tr></table></figure><p>opacity用于定义元素的不透明度，介于0~1之间。</p><h5 id="3-设置背景图片片平铺"><a href="#3-设置背景图片片平铺" class="headerlink" title="3.设置背景图片片平铺"></a>3.设置背景图片片平铺</h5><p>1.repeat：沿水平与垂直两个方向平铺（默认值）。</p><p>2.no-repeat：不平铺。</p><p>3.repeat-x：只沿水平方向平铺。</p><p>4.repeat-y：只沿垂直方向平铺。</p><h5 id="5-设置背景图片的位置"><a href="#5-设置背景图片的位置" class="headerlink" title="5.设置背景图片的位置"></a>5.设置背景图片的位置</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">body&#123;<br>background-image：url(图片地址);<br>background-repeat:no-repeat;<br>background-position:right top;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="6-设置背景图像固定"><a href="#6-设置背景图像固定" class="headerlink" title="6.设置背景图像固定"></a>6.设置背景图像固定</h5><p>1.scroll：图像随页面元素一起滚动（默认值）。</p><p>2.fixed：图像固定在屏幕上，不随页面元素滚动。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">background-attachment：fixed；<br></code></pre></td></tr></table></figure><h5 id="7-设置背景图像的大小"><a href="#7-设置背景图像的大小" class="headerlink" title="7.设置背景图像的大小"></a>7.设置背景图像的大小</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">background-size:属性值1 属性值2;<br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">属性值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">像素值</td><td align="center">设置背景图像的高和宽，一宽二高，如果写一个，第二个默认为auto。</td></tr><tr><td align="center">百分比</td><td align="center">以父元素的百分比来设置背景图像的宽和高。同上。</td></tr><tr><td align="center">cover</td><td align="center">把背景图像扩展至足够大，是北京图像完全覆盖背景区域。背景图像的某些部分也许无法显示在背景定位区域。</td></tr><tr><td align="center">contain</td><td align="center">把图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域。</td></tr></tbody></table><h5 id="8-设置背景的显示区域"><a href="#8-设置背景的显示区域" class="headerlink" title="8.设置背景的显示区域"></a>8.设置背景的显示区域</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">background-origin:属性值;<br></code></pre></td></tr></table></figure><p>1.padding-box:背景图像相对于内边距区域来定义。</p><p>2.border-box：背景图像相对于边框来定位。</p><p>3.content-box：背景图像相对于内容来定位。</p><h5 id="9-设置背景图像的裁剪区域"><a href="#9-设置背景图像的裁剪区域" class="headerlink" title="9.设置背景图像的裁剪区域"></a>9.设置背景图像的裁剪区域</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">background-clip:属性值;<br></code></pre></td></tr></table></figure><p>1.border-box：默认值，从边框区域向外裁剪。</p><p>2.padding-box：从内边距区域向外裁剪。</p><p>3.content-box：从内容区域向外裁剪。</p><h3 id="四-CSS3渐变属性"><a href="#四-CSS3渐变属性" class="headerlink" title="四.CSS3渐变属性"></a>四.CSS3渐变属性</h3><h4 id="1-线性渐变"><a href="#1-线性渐变" class="headerlink" title="1.线性渐变"></a>1.线性渐变</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">baackground-image:linear-gradient(渐变角度，颜色值1，颜色值2，颜色值n);<br></code></pre></td></tr></table></figure><p>渐变角度：</p><p>是指水平线和渐变线之间的夹角，可以是以deg为单位的角度数值或”to”加“left” “right” “top” “bottom”</p><h4 id="2-径向渐变"><a href="#2-径向渐变" class="headerlink" title="2.径向渐变"></a>2.径向渐变</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">background-image:radial-gradient(渐变形状 圆心位置，颜色值1，颜色值n);<br></code></pre></td></tr></table></figure><h4 id="3-重复线性渐变"><a href="#3-重复线性渐变" class="headerlink" title="3.重复线性渐变"></a>3.重复线性渐变</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">background-image:repeating-linear-gradient(渐变角度，颜色值1，颜色值n);<br></code></pre></td></tr></table></figure><h4 id="4-重复径向渐变"><a href="#4-重复径向渐变" class="headerlink" title="4.重复径向渐变"></a>4.重复径向渐变</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">background-image:repeating-radial-gradient(渐变角度，颜色值1，颜色值n);<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTML学习 </category>
          
          <category> css学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
            <tag> css盒子模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3选择器</title>
      <link href="/2021/06/22/HTML/CSS3%E9%80%89%E6%8B%A9%E5%99%A8/"/>
      <url>/2021/06/22/HTML/CSS3%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一-属性选则器"><a href="#一-属性选则器" class="headerlink" title="一.属性选则器"></a>一.属性选则器</h2><h3 id="1-E-att-value-属性选择器"><a href="#1-E-att-value-属性选择器" class="headerlink" title="1.E[att^=value]属性选择器"></a>1.E[att^=value]属性选择器</h3><p>E[att^=value]属性选择器是指选择名称为被E标记，且该标记定义了att属性，att属性值包含前缀为value的子字符串。需要注意的是E是可以省略的，如果省略则表示可以匹配满足条件的任意元素。例如：</p><span id="more"></span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>E[att^=value]属性选择器应用<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-attr">[id^=<span class="hljs-string">&quot;one&quot;</span>]</span>&#123;</span><br><span class="css"><span class="hljs-attribute">color</span>:pink;</span><br><span class="css"><span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;微软雅黑&quot;</span>;</span><br><span class="css"><span class="hljs-attribute">font-size</span>:<span class="hljs-number">12px</span>;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;two&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;one1&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;two1&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="2-E-att-value-属性选择器"><a href="#2-E-att-value-属性选择器" class="headerlink" title="2.E[att$=value]属性选择器"></a>2.E[att$=value]属性选择器</h3><p>E[att$=value]属性选择器是指选择名称为被E标记，且该标记定义了att属性，att属性值包含后缀为value的子字符串。需要注意的是E是可以省略的，如果省略则表示可以匹配满足条件的任意元素。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>E[att$=value]属性选择器应用<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-attr">[att$=<span class="hljs-string">&quot;main&quot;</span>]</span>&#123;</span><br><span class="css"><span class="hljs-attribute">color</span>:red;</span><br><span class="css"><span class="hljs-attribute">font-family</span>: dynalight;</span><br><span class="css"><span class="hljs-attribute">font-size</span>:<span class="hljs-number">20px</span>;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;old1&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;old2&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;oldmain&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;newmain&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="3-E-att-value-属性选择器"><a href="#3-E-att-value-属性选择器" class="headerlink" title="3.E[att*=value]属性选择器"></a>3.E[att*=value]属性选择器</h3><p>E[att$=value]属性选择器是指选择名称为被E标记，且该标记定义了att属性，att属性值包含value的子字符串。需要注意的是E是可以省略的，如果省略则表示可以匹配满足条件的任意元素。</p><h2 id="2-关系选择器"><a href="#2-关系选择器" class="headerlink" title="2.关系选择器"></a>2.关系选择器</h2><h3 id="1-子代选择器（-gt"><a href="#1-子代选择器（-gt" class="headerlink" title="1.子代选择器（&gt;)"></a>1.子代选择器（&gt;)</h3><p>子代选择器主要是用来选择某个元素的第一级子元素。例如希望选择只作为h1元素子元素的strong元素，可以这样写：h1&gt;strong。</p><h3 id="2-兄弟选择器（-，-）"><a href="#2-兄弟选择器（-，-）" class="headerlink" title="2.兄弟选择器（+，~）"></a>2.兄弟选择器（+，~）</h3><p>分为临近兄弟选择器和普通兄弟选择器。</p><h5 id="1-临近兄弟选择器"><a href="#1-临近兄弟选择器" class="headerlink" title="1.临近兄弟选择器"></a>1.临近兄弟选择器</h5><p>该选择器用”+“来，连接前后两个选择器。选择器中的两个元素有同一个是父亲，且第二个元素紧跟第一个元素。</p><h5 id="2-普通兄弟选择器"><a href="#2-普通兄弟选择器" class="headerlink" title="2.普通兄弟选择器"></a>2.普通兄弟选择器</h5><p>该选择器用”~“来，连接前后两个选择器。选择器中的两个元素有同一个是父亲，且第二个元素不必紧跟第一个元素。</p><h3 id="3-结构化伪类选择器"><a href="#3-结构化伪类选择器" class="headerlink" title="3.结构化伪类选择器"></a>3.结构化伪类选择器</h3><h5 id="1：root选择器"><a href="#1：root选择器" class="headerlink" title="1：root选择器"></a>1：root选择器</h5><p>：root选择器用于匹配文档根元素，在HTML中，根元素始终是html元素。也就是说使用”：root选择器“定义的样式，对所有页面元素都生效。</p><h5 id="2-：not选择器"><a href="#2-：not选择器" class="headerlink" title="2 ：not选择器"></a>2 ：not选择器</h5><p>如果对某个结构元素使用样式，但是想排除这个节构元素下面的子结构元素，让它不使用这种样式，可以用：not选择器。</p><h5 id="3-：only-child选择器"><a href="#3-：only-child选择器" class="headerlink" title="3.：only-child选择器"></a>3.：only-child选择器</h5><p>：only-child选择器用于匹配属于某父元素唯一子元素的元素，也就是说，如果某个元素仅有一个元素，则使用“：only-child选择器”可以选择该元素。</p><h5 id="4-：first-child和：last-child选择器"><a href="#4-：first-child和：last-child选择器" class="headerlink" title="4.：first-child和：last-child选择器"></a>4.：first-child和：last-child选择器</h5><p>：first-child选择器和：last-child选择器分别用于父元素中第一个元素和最后一个元素设置样式。</p><h5 id="5-：nth-child-n-和nth-last-child-n-选择器"><a href="#5-：nth-child-n-和nth-last-child-n-选择器" class="headerlink" title="5.：nth-child(n)和nth-last-child(n)选择器"></a>5.：nth-child(n)和nth-last-child(n)选择器</h5><p>用于匹配属于父元素的第n个或倒数第n个元素。</p><h5 id="6-：nth-of-type-n-和-nth-last-of-type-n-选择器"><a href="#6-：nth-of-type-n-和-nth-last-of-type-n-选择器" class="headerlink" title="6.：nth-of-type(n)和 nth-last-of-type(n)选择器"></a>6.：nth-of-type(n)和 nth-last-of-type(n)选择器</h5><p>用于匹配属于父元素的特定类型的第n个或倒数第n个子元素。</p><h5 id="7-empty选择器"><a href="#7-empty选择器" class="headerlink" title="7.:empty选择器"></a>7.:empty选择器</h5><p>：empty选择器用来选择魔友子元素或文本内容为空的所有元素。</p><h5 id="8-：target选择器"><a href="#8-：target选择器" class="headerlink" title="8.：target选择器"></a>8.：target选择器</h5><p>：target选择器用于为页面中的某个target元素指定样式。只有用户点击了页面中的超链接，并且跳转到target元素后，：target选择器所设置的样式才会起作用。</p><h2 id="四-伪元素选择器"><a href="#四-伪元素选择器" class="headerlink" title="四.伪元素选择器"></a>四.伪元素选择器</h2><p>1.：before选择器和：after选择器</p><p>必须配合content属性来指定要插入的具体内容。其基本语法为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;元素&gt;:before/after<br>&#123;<br>content:文字/url();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五-链接伪类"><a href="#五-链接伪类" class="headerlink" title="五.链接伪类"></a>五.链接伪类</h2><table><thead><tr><th align="center">超链接标记<a>的伪类</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">a:link{…}</td><td align="center">未访问时超链接的状态</td></tr><tr><td align="center">a:vistited{…}</td><td align="center">访问后超链接的状态</td></tr><tr><td align="center">a:hover{…}</td><td align="center">鼠标经过，悬停时超链接的状态</td></tr><tr><td align="center">a:active{…}</td><td align="center">鼠标单击不动时超链接的状态</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> HTML学习 </category>
          
          <category> css学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
            <tag> css选择器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css3入门</title>
      <link href="/2021/06/20/HTML/css3%E5%85%A5%E9%97%A8/"/>
      <url>/2021/06/20/HTML/css3%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一-css核心基础"><a href="#一-css核心基础" class="headerlink" title="一.css核心基础"></a>一.css核心基础</h2><h3 id="1-css样式规则"><a href="#1-css样式规则" class="headerlink" title="1.css样式规则"></a>1.css样式规则</h3><p>选择器{属性1：属性值1；属性2：属性值2；属性3：属性值3；}</p><h5 id="在书写css样式时，除了要遵守css样式规则，还必须注意以下几个特点："><a href="#在书写css样式时，除了要遵守css样式规则，还必须注意以下几个特点：" class="headerlink" title="在书写css样式时，除了要遵守css样式规则，还必须注意以下几个特点："></a>在书写css样式时，除了要遵守css样式规则，还必须注意以下几个特点：</h5><p>1.css样式严格区分大小写，属性和值不区分大小写，按照书写习惯一般将“选择器，属性和值”都采用小写的样式。</p><p>2.多个属性之间必须用英文状态下的分号隔开，最后一个属性后的分号可以省略，但是为了便于增加信仰是最好保留。</p><p>3.如果属性的值由多个单词组成且中间有空格，则必须为这个属性值加上英文状态下的引号。</p><span id="more"></span><h3 id="2-引入css样式表"><a href="#2-引入css样式表" class="headerlink" title="2.引入css样式表"></a>2.引入css样式表</h3><h4 id="1-行内式"><a href="#1-行内式" class="headerlink" title="1.行内式"></a>1.行内式</h4><p>行内式也成为内联样式，是通过标记的style属性来设置元素的样式，其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;标记名 style=&quot;属性1：属性值1；&quot;&gt;内容&lt;/标记名&gt;<br></code></pre></td></tr></table></figure><h4 id="2-内嵌式"><a href="#2-内嵌式" class="headerlink" title="2.内嵌式"></a>2.内嵌式</h4><p>内嵌式是将css代码集中写在HTML文档的<head>头部文档中，并且用<style>标记定义，其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>      选择器&#123;属性1：属性值1；属性2：属性值2；属性3：属性值3；&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-链入式"><a href="#3-链入式" class="headerlink" title="3.链入式"></a>3.链入式</h4><p>链入式是将所有的样式放在一个或多个以.css为扩展名的外部样式表文件中，通过<link/>标记将外部样式表文件链接到HTML文档中，其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css路径名&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="该语法中，标记需要放在头部标记中，并且必须指定标记的三个属性，具体如下："><a href="#该语法中，标记需要放在头部标记中，并且必须指定标记的三个属性，具体如下：" class="headerlink" title="该语法中，标记需要放在头部标记中，并且必须指定标记的三个属性，具体如下："></a>该语法中，<link/>标记需要放在<head>头部标记中，并且必须指定<link/>标记的三个属性，具体如下：</h5><p>1.href：定义所链接外部样式表文件的URI，可以是相对路径，也可一是绝对路径。</p><p>2.type：定义所链接文档的类型，在这里需要指定为“text/css”，表示链接的外部文件为CSS样式表。</p><p>3.rel：定义当前文档与被链接文当之间的关系，在这里需要指定为“stylesheet”，表示被链接的文档是一个样式表文件。</p><h2 id="3-css基础选择器"><a href="#3-css基础选择器" class="headerlink" title="3.css基础选择器"></a>3.css基础选择器</h2><h3 id="1-标记选择器"><a href="#1-标记选择器" class="headerlink" title="1.标记选择器"></a>1.标记选择器</h3><h5 id="标记选择器是指用HTML标记名称作为选择器，按标记名称分类，为页面中某一类标记指定统一的CSS样式。其基本语法格式为："><a href="#标记选择器是指用HTML标记名称作为选择器，按标记名称分类，为页面中某一类标记指定统一的CSS样式。其基本语法格式为：" class="headerlink" title="标记选择器是指用HTML标记名称作为选择器，按标记名称分类，为页面中某一类标记指定统一的CSS样式。其基本语法格式为："></a>标记选择器是指用HTML标记名称作为选择器，按标记名称分类，为页面中某一类标记指定统一的CSS样式。其基本语法格式为：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">标记名(属性1：属性值1；属性2：属性值2；属性3：属性值3；)<br></code></pre></td></tr></table></figure><p>该语法中，所有的HTML标记名都可以作为标记选择器，如body、h1、p、strong等。用标记选择器定义的样式对页面中该类型的所有标记都生效。<br>例如，可以使用p选择器定义HTML页面中所有段落的样式，示例代码为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">p(font-size:12px； color：#666； font-family:&quot;微软雅黑”；)<br></code></pre></td></tr></table></figure><p>上述css样式代码用于设置HTML页面中所有的段落文本——字体大小为12像素、颜色为#666、字体为微软雅黑。<br>标记选择器最大的优点是能快速为页面中同类型的标记统一样式，同时这也是它的缺点，不能设计差异化样式。</p><h3 id="2-类选择器"><a href="#2-类选择器" class="headerlink" title="2.类选择器"></a>2.类选择器</h3><p>类选择器使用“”(英文点号)进行标识，后面紧跟类名，其基本语法格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.类名(属性1：属性值1；属性2：属性值2；属性3：属性值3；)<br></code></pre></td></tr></table></figure><h3 id="3-id选择器"><a href="#3-id选择器" class="headerlink" title="3.id选择器"></a>3.id选择器</h3><p>id选择器使用”#“进行标识，后面紧跟id 名，其基本语法格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#id 名&#123;属性1:属性值1；&#125;<br></code></pre></td></tr></table></figure><p>该语法中，id名即为HTML元素的id属性值。是唯一的。</p><h4 id="4-通配符选择器"><a href="#4-通配符选择器" class="headerlink" title="4.通配符选择器"></a>4.通配符选择器</h4><p>通配符选择器用”*“号表示，它是所有选择其中范围最广的，能匹配页面中所有的元素。其基本语法格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">*&#123;属性1:属性值1；&#125;<br></code></pre></td></tr></table></figure><h4 id="5-标签指定式选择器"><a href="#5-标签指定式选择器" class="headerlink" title="5.标签指定式选择器"></a>5.标签指定式选择器</h4><p>标签指定式选择器又称交集选择器，有两个选择器构成，第一个为标记选择器，第二个为class选择器或id选择器，两个选择器之间不能有空格，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.p</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">color</span>: red;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="6-后代选择器"><a href="#6-后代选择器" class="headerlink" title="6.后代选择器"></a>6.后代选择器</h4><p>后代选择器用来选择元素或元素组的后代，其写法就是把外层标记写在前面，内层标记写在后面，中间用空格隔开。当标记发生嵌套时，内层标记就成为外层标记的后代。</p><h4 id="7-并集选择器"><a href="#7-并集选择器" class="headerlink" title="7.并集选择器"></a>7.并集选择器</h4><p>并集选择器是由各个选择器通过逗号连接形成的，任何形式的选择器，都可以作为并集选择器的一部分。如果某些选择器定义的样式完全相同或部分相同，就可以用并集选择器定义。</p><h2 id="二-文本样式属性"><a href="#二-文本样式属性" class="headerlink" title="二.文本样式属性"></a>二.文本样式属性</h2><h3 id="1-字体样式属性"><a href="#1-字体样式属性" class="headerlink" title="1.字体样式属性"></a>1.字体样式属性</h3><p>为了更好地控制页面中各式各样的字体，css引入了一系列字体属性，具体如下：</p><h4 id="1-font-size：字号大小"><a href="#1-font-size：字号大小" class="headerlink" title="1.font-size：字号大小"></a>1.font-size：字号大小</h4><p>font-size属性用于设计字号，该属性的值可以使用相对长度单位，也可以使用绝对长度单位。</p><table><thead><tr><th align="center">相对长度单位</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">em</td><td align="center">相对于当前对象内文本的字体尺寸</td></tr><tr><td align="center">px</td><td align="center">像素，最常用，推荐使用</td></tr></tbody></table><table><thead><tr><th align="center">绝对长度单位</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">in</td><td align="center">英寸</td></tr><tr><td align="center">cm</td><td align="center">厘米</td></tr><tr><td align="center">mm</td><td align="center">毫米</td></tr><tr><td align="center">pt</td><td align="center">点</td></tr></tbody></table><p>其中，相对单位长度比较常用，推荐使用像素单位px，绝对单位使用比较少。</p><h4 id="2-font-family：字体"><a href="#2-font-family：字体" class="headerlink" title="2.font-family：字体"></a>2.font-family：字体</h4><h5 id="font-family属性用于设计字体。网页中常用的字体如宋体等。设计文体可用代码如下："><a href="#font-family属性用于设计字体。网页中常用的字体如宋体等。设计文体可用代码如下：" class="headerlink" title="font-family属性用于设计字体。网页中常用的字体如宋体等。设计文体可用代码如下："></a>font-family属性用于设计字体。网页中常用的字体如宋体等。设计文体可用代码如下：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">p&#123;font-family:&quot;微软雅黑&quot;;&#125;<br></code></pre></td></tr></table></figure><h5 id="可以同时指定多个字体，中间用逗号隔开，代码如下："><a href="#可以同时指定多个字体，中间用逗号隔开，代码如下：" class="headerlink" title="可以同时指定多个字体，中间用逗号隔开，代码如下："></a>可以同时指定多个字体，中间用逗号隔开，代码如下：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">p&#123;font-family:&quot;微软雅黑&quot;,&quot;宋体&quot;，&quot;Arial&quot;;&#125;<br></code></pre></td></tr></table></figure><h5 id="使用font-family设计字体时，必须注意以下几点："><a href="#使用font-family设计字体时，必须注意以下几点：" class="headerlink" title="使用font-family设计字体时，必须注意以下几点："></a>使用font-family设计字体时，必须注意以下几点：</h5><p>1.各个字体之间必须使用英文状态的逗号隔开。</p><p>2.中文字体需要加英文状态下的引号，英文字体放最前边。</p><p>3.如果字体名包含空格，#，￥等，则该字体必须加英文状态下的单引号或双引号，</p><p>4.尽量使用系统默认字体。</p><h4 id="3-font-weight：字体粗细"><a href="#3-font-weight：字体粗细" class="headerlink" title="3.font-weight：字体粗细"></a>3.font-weight：字体粗细</h4><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>normal</td><td>默认值。定义标准的字符</td></tr><tr><td>bold</td><td>定义粗体字符</td></tr><tr><td>bolder</td><td>定义更粗的字符</td></tr><tr><td>lighter</td><td>定义更细的字符</td></tr><tr><td>100~900（100的整数倍）</td><td>定义由细到粗的字符。其中400等同于normal，700等同于bold的，值越大字体越粗。</td></tr></tbody></table><h4 id="4-font-style：字体风格"><a href="#4-font-style：字体风格" class="headerlink" title="4.font-style：字体风格"></a>4.font-style：字体风格</h4><p>font-style属性用于定义字体风格，如设置斜体，倾斜或正常字体，其可用属性值如下。</p><p>1.normal：默认值，浏览器会显示标准的字体样式。</p><p>2.italic：浏览器会显示斜体的字体样式。</p><p>3.oblique：浏览器会显示倾斜的字体样式。</p><h4 id="5-font：综合设置字体样式"><a href="#5-font：综合设置字体样式" class="headerlink" title="5.font：综合设置字体样式"></a>5.font：综合设置字体样式</h4><p>font属性用于对字体样式进行综合设置，其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">选择器&#123;font:font-style font-weight font-size/line-height font-family;&#125;<br></code></pre></td></tr></table></figure><h4 id="6-font-face属性"><a href="#6-font-face属性" class="headerlink" title="6.@font-face属性"></a>6.@font-face属性</h4><p>@font-face属性是css的新增特性，用于定义服务器字体。通过@font-face属性，开发者可以在用户计算机未安装字体时，使用任何喜欢的字体。基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">@font-face&#123;<br>font-family:字体名称；<br>src:字体路径；<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-word-wrap属性"><a href="#7-word-wrap属性" class="headerlink" title="7.word-wrap属性"></a>7.word-wrap属性</h4><p>word-wrap属性用于实现长单词和URL地址的自动换行，其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">选择器:&#123;word-wrap:属性值;&#125;<br></code></pre></td></tr></table></figure><p>在上面的语法格式中，eord-wrap属性的取值有两种，</p><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">normal</td><td align="center">只在允许的段字点之间换行</td></tr><tr><td align="center">break-word</td><td align="center">在长单词或URL地址内部进行换行</td></tr></tbody></table><h2 id="二-文本外观属性"><a href="#二-文本外观属性" class="headerlink" title="二.文本外观属性"></a>二.文本外观属性</h2><h4 id="1-color-文本颜色"><a href="#1-color-文本颜色" class="headerlink" title="1.color:文本颜色"></a>1.color:文本颜色</h4><p>color属性用于定义文本的颜色，其取值方式有如下3种。</p><h5 id="1-预定义的颜色值，如red-green-blue等。"><a href="#1-预定义的颜色值，如red-green-blue等。" class="headerlink" title="1.预定义的颜色值，如red, green, blue等。"></a>1.预定义的颜色值，如red, green, blue等。</h5><h5 id="2-十六进制，如-FF0000，-FF6600，-29D794等。实际工作中，十六进制是最常用的定义颜色的方式。"><a href="#2-十六进制，如-FF0000，-FF6600，-29D794等。实际工作中，十六进制是最常用的定义颜色的方式。" class="headerlink" title="2.十六进制，如#FF0000，#FF6600，#29D794等。实际工作中，十六进制是最常用的定义颜色的方式。"></a>2.十六进制，如#FF0000，#FF6600，#29D794等。实际工作中，十六进制是最常用的定义颜色的方式。</h5><h5 id="3-RGB代码，如红色可以表示为rgb-255，0-0-或rgb-100-，0-，0-。"><a href="#3-RGB代码，如红色可以表示为rgb-255，0-0-或rgb-100-，0-，0-。" class="headerlink" title="3.RGB代码，如红色可以表示为rgb(255，0,0)或rgb(100%，0%，0%)。"></a>3.RGB代码，如红色可以表示为rgb(255，0,0)或rgb(100%，0%，0%)。</h5><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><p>如果使用RGB代码的百分比颜色值，取值为0时也不能省略百分号，必须写为0%。</p><h4 id="2-letter-spacing-字间距"><a href="#2-letter-spacing-字间距" class="headerlink" title="2.letter-spacing:字间距"></a>2.letter-spacing:字间距</h4><p>letter-spacing 属性用于定义字间距，所谓字间距就是字符与字符之间的空白。其属性值可为不同单位的数值，允许使用负值，默认为normal。</p><h4 id="3-word-spacing-单词间距"><a href="#3-word-spacing-单词间距" class="headerlink" title="3.word-spacing:单词间距"></a>3.word-spacing:单词间距</h4><p>word-spacing属性用于定义英文单词之间的间距，对中文字符无效。和 letter-spacing样，其属性值可为不同单位的数值，允许使用负值，默认为normal。<br>word-spacing 和letter-spacing均可对英文进行设置。不同的是letter-spacing定义的为字母之间的间距，而 word-spacing定义的为英文单词之间的间距。</p><h4 id="4-line-height：行间距"><a href="#4-line-height：行间距" class="headerlink" title="4.line-height：行间距"></a>4.line-height：行间距</h4><p>line-height属性间用于设置行间距，一般有三种，分别是像素px，相对值em，和百分比100%。</p><h4 id="5-text-transform-文本转换"><a href="#5-text-transform-文本转换" class="headerlink" title="5.text-transform:文本转换"></a>5.text-transform:文本转换</h4><p>text-transform属性用于控制英文字符的大小写，其可用属性值如下。<br>1.none：不转换(默认值)。<br>2.capitalize：首字母大写。<br>3.uppercase：全部字符转换为大写。<br>4.lowercase：全部字符转换为小写。</p><h4 id="6-text-decoration-文本装饰"><a href="#6-text-decoration-文本装饰" class="headerlink" title="6.text-decoration:文本装饰"></a>6.text-decoration:文本装饰</h4><p>text-decoration属性用于设置文本的下划线、上划线、删除线等装饰效果，其可用属性值如下。<br>1.none：没有装饰(正常文本默认值)。<br>2.underline：下划线。<br>3.overline：上划线。<br>4.line-through:删除线。<br>text-decoration后可以赋多个值，用于给文本添加多种显示效果。例如希望文字同时有下划线和删除线效果，就可以将underline和line-through 同时赋给text-decoration。</p><h4 id="7-text-align-水平对齐方式"><a href="#7-text-align-水平对齐方式" class="headerlink" title="7.text-align:水平对齐方式"></a>7.text-align:水平对齐方式</h4><p>text-align属性用于设置文本内容的水平对齐，其可用属性如下：</p><p>1.left：左对齐。</p><p>2.right：右对齐。</p><p>3.center:居中对齐。</p><h4 id="8-text-indent：首行缩进"><a href="#8-text-indent：首行缩进" class="headerlink" title="8.text-indent：首行缩进"></a>8.text-indent：首行缩进</h4><p>text-indent属性用于设置首行文本缩进，其属性值可为不同单位的数值，em字符宽度的倍数，或相对于浏览器窗口宽度的百分比，允许使用负值。</p><p>注：</p><p>text-indent属性仅适用于块级元素，对行内元素无效。</p><h4 id="9-white-space-空白符处理"><a href="#9-white-space-空白符处理" class="headerlink" title="9.white-space:空白符处理"></a>9.white-space:空白符处理</h4><p>使用HTML制作网页时，不论源代码中有多少空格，在浏览器中只会显示一个字符的空白。在CSS中，使用white-space属性可设置空白符的处理方式，其属性值如下。<br>1.normal：常规（默认值），文本中的空格、空行无效，满行（到达区域边界）后自动换行。<br>2.pre：预格式化，按文档的书写格式保留空格、空行原样显示。<br>3.nowrap：空格空行无效，强制文本不能换行，除非遇到换行标记<br/>。内容超出元素的边界也不换行，若超出浏览器页面则会自动增加滚动条。</p><h4 id="10-text-shadow：阴影效果"><a href="#10-text-shadow：阴影效果" class="headerlink" title="10.text-shadow：阴影效果"></a>10.text-shadow：阴影效果</h4><p>在css中，使用text-shadow属性可以为页面中的文本添加阴影效果，其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">选择器&#123;text-shadow:h-shadow v-shadow blur color;&#125;<br></code></pre></td></tr></table></figure><h4 id="11-text-overflow-标识对象内容溢出文本"><a href="#11-text-overflow-标识对象内容溢出文本" class="headerlink" title="11.text-overflow:标识对象内容溢出文本"></a>11.text-overflow:标识对象内容溢出文本</h4><p>其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">选择器&#123;text-overflow:属性值;&#125;<br></code></pre></td></tr></table></figure><p>在上面的语法格式中，text-overflow属性的常用取值有两个，具体如下：</p><p>1.clip：修建溢出文本，不显示省略标记。</p><p>2.ellipsis：用省略标记“….”标示被修剪文本，省略标记插入的位置是最后一个字符。</p><p>3.white-space：nowrap：样式强制文本不能换行。</p><p>4.overflow：hidden：样式隐藏溢出文本。</p><p>5.text-overflow：ellipsis：样式显示省略标记。</p>]]></content>
      
      
      <categories>
          
          <category> HTML学习 </category>
          
          <category> css学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
            <tag> css入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5页面元素及属性</title>
      <link href="/2021/06/19/HTML/HTML5%E9%A1%B5%E9%9D%A2%E5%85%83%E7%B4%A0%E5%8F%8A%E5%B1%9E%E6%80%A7/"/>
      <url>/2021/06/19/HTML/HTML5%E9%A1%B5%E9%9D%A2%E5%85%83%E7%B4%A0%E5%8F%8A%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="一-列表元素"><a href="#一-列表元素" class="headerlink" title="一.列表元素"></a>一.列表元素</h2><h3 id="1-ul元素"><a href="#1-ul元素" class="headerlink" title="1.ul元素"></a>1.ul元素</h3><p>无序列表是网页中最常用的列表，其各个列表项之间模有顺序级别之分，通常是并列的。定于无序列表的基本语法为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p>li标记嵌套在ul标记中，每对ul中至少包含一对li。</p><span id="more"></span><h3 id="2-ol元素"><a href="#2-ol元素" class="headerlink" title="2.ol元素"></a>2.ol元素</h3><p>有序列表即为有序列表，其各个列表像按照一定顺序排序，定义有序列表的基本语法为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><p>li标记嵌套在ol标记中，每对ol中至少包含一对li。</p><p>在HTML中该元素还拥有start属性和reversed属性，其中start属性可以更改列表编号得起始值，reversed属性表示是否对列表进行反向排序，默认值为true。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">start</span>=<span class="hljs-string">&quot;2&quot;</span> &gt;</span><br></code></pre></td></tr></table></figure><p>从上可以看出，列表编号的起始值更改为2.</p><h3 id="3-dl元素"><a href="#3-dl元素" class="headerlink" title="3.dl元素"></a>3.dl元素</h3><p>定于列表常用于对术语或名词进行解释和描述，与有序和无序列表不同，定义列表的列表项前莫有任何项目符号。其基本语法为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><p>dl标记用于指定定义列表，dt和dd并列嵌套在dl标记中，其中，dt标记用于指定术语名词。dd标记用于对名词进行解释和描述。一对dt可以对应多个dd。</p><h3 id="4-列表的嵌套使用"><a href="#4-列表的嵌套使用" class="headerlink" title="4.列表的嵌套使用"></a>4.列表的嵌套使用</h3><p>在使用列表时，列表项中也有可能包含若干个子列表项，要想在列表项中定义子列表项就需要对列表进行嵌套。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="二-结构元素"><a href="#二-结构元素" class="headerlink" title="二.结构元素"></a>二.结构元素</h2><h3 id="1-header元素"><a href="#1-header元素" class="headerlink" title="1.header元素"></a>1.header元素</h3><p>HTML5中的header元素是一种具有引导和导航作用的结构元素，该元素可以包含所有通常放在页面头部的内容。header元素通常放置整个页面的标题等。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><p>header元素并非head元素。在HTML页面中，并不限制header元素的个数，一个页面中可以有多个header元素。</p><h3 id="2-nav元素"><a href="#2-nav元素" class="headerlink" title="2.nav元素"></a>2.nav元素</h3><p>nav元素用于定义导航链接，该元素可以将具有导航性质的链接归纳在一个区域，是页面元素的寓意更加明确。其中的导航元素乐意链接到站点的其他页面，或者页面的其他部分。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在上面这段代码中，通过在nav元素内部嵌套无序列表ul来搭建导航结构。通常，一个HTML页面中可以包含多个nav元素，作为页面整体或不同部分的导航。具体来说，nav元素可以用于以下几种场合。</p><h5 id="传统导航条：目前主流网站上都有不同层级的导航条，其作用是跳转到网站的其他主页面。"><a href="#传统导航条：目前主流网站上都有不同层级的导航条，其作用是跳转到网站的其他主页面。" class="headerlink" title="传统导航条：目前主流网站上都有不同层级的导航条，其作用是跳转到网站的其他主页面。"></a>传统导航条：目前主流网站上都有不同层级的导航条，其作用是跳转到网站的其他主页面。</h5><h5 id="侧边栏导航：目前主流博客网站及电商网站都有侧边栏导航，目的是将当前文章或当前商品页面跳转到其他文章或其他商品页面。"><a href="#侧边栏导航：目前主流博客网站及电商网站都有侧边栏导航，目的是将当前文章或当前商品页面跳转到其他文章或其他商品页面。" class="headerlink" title="侧边栏导航：目前主流博客网站及电商网站都有侧边栏导航，目的是将当前文章或当前商品页面跳转到其他文章或其他商品页面。"></a>侧边栏导航：目前主流博客网站及电商网站都有侧边栏导航，目的是将当前文章或当前商品页面跳转到其他文章或其他商品页面。</h5><h5 id="页内导航：它的作用是在本页面几个主要的组成部分之间进行跳转。"><a href="#页内导航：它的作用是在本页面几个主要的组成部分之间进行跳转。" class="headerlink" title="页内导航：它的作用是在本页面几个主要的组成部分之间进行跳转。"></a>页内导航：它的作用是在本页面几个主要的组成部分之间进行跳转。</h5><h5 id="翻页操作：翻页操作切换的是网页的内容部分，可以通过单击“上一页”或“下一页”切换，也可以通过单击实际的页数跳转到某一页。"><a href="#翻页操作：翻页操作切换的是网页的内容部分，可以通过单击“上一页”或“下一页”切换，也可以通过单击实际的页数跳转到某一页。" class="headerlink" title="翻页操作：翻页操作切换的是网页的内容部分，可以通过单击“上一页”或“下一页”切换，也可以通过单击实际的页数跳转到某一页。"></a>翻页操作：翻页操作切换的是网页的内容部分，可以通过单击“上一页”或“下一页”切换，也可以通过单击实际的页数跳转到某一页。</h5><p>除了以上几点以外，nav元素也可以用于其他重要的、基本的导航链接组中。</p><h3 id="3-article元素"><a href="#3-article元素" class="headerlink" title="3.article元素"></a>3.article元素</h3><p>article元素代表文档，页面或者应用程序中与上下文不相关的独立部分，该元素通常被用于定义一篇文章等，article元素通常使用多个section元素进行划分页面，可以出现多次。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">article</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>           ..<br>       <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-aside元素"><a href="#4-aside元素" class="headerlink" title="4.aside元素"></a>4.aside元素</h3><p>aside元素用来定义当前页面或者文章的附属信息部分，它可以包含与当前页面或主要内容相关的部分等。</p><h5 id="aside元素的用法主要分为两种："><a href="#aside元素的用法主要分为两种：" class="headerlink" title="aside元素的用法主要分为两种："></a>aside元素的用法主要分为两种：</h5><p>1.被包含在article元素内作为主要内容的附属信息。</p><p>2.在article元素之外使用，作为页面或站点全局的附属信息部分。最常用的使用方式是侧边栏，其中的友情内容可以是友情链接等。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">article</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>          ..<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-section元素"><a href="#5-section元素" class="headerlink" title="5.section元素"></a>5.section元素</h3><p>section元素用于对网站或应用程序中页面上的内容进行分块，一个section元素通常由内容跟标题组成。在使用section元素时，需要主要：</p><h5 id="1-section-元素用于对网站或应用程序中页面容器，那是div的特性。section元素并非一个普通的容器元素，当一个容器需要被直接定义样式或通过脚本定义行为时，推荐用div。"><a href="#1-section-元素用于对网站或应用程序中页面容器，那是div的特性。section元素并非一个普通的容器元素，当一个容器需要被直接定义样式或通过脚本定义行为时，推荐用div。" class="headerlink" title="1.section 元素用于对网站或应用程序中页面容器，那是div的特性。section元素并非一个普通的容器元素，当一个容器需要被直接定义样式或通过脚本定义行为时，推荐用div。"></a>1.section 元素用于对网站或应用程序中页面容器，那是div的特性。section元素并非一个普通的容器元素，当一个容器需要被直接定义样式或通过脚本定义行为时，推荐用div。</h5><h5 id="2-如果article元素、aside元素或nav元素更符合使用条件，那么不要使用section元素。"><a href="#2-如果article元素、aside元素或nav元素更符合使用条件，那么不要使用section元素。" class="headerlink" title="2.如果article元素、aside元素或nav元素更符合使用条件，那么不要使用section元素。"></a>2.如果article元素、aside元素或nav元素更符合使用条件，那么不要使用section元素。</h5><h5 id="3-没有标题的内容区块不要使用-section-元素定义。"><a href="#3-没有标题的内容区块不要使用-section-元素定义。" class="headerlink" title="3.没有标题的内容区块不要使用 section 元素定义。"></a>3.没有标题的内容区块不要使用 section 元素定义。</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">article</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="6-footer元素"><a href="#6-footer元素" class="headerlink" title="6.footer元素"></a>6.footer元素</h3><p>footer元素用于定义一个页面或者区域的底部，它可以包含所有通常放在页面底部的内容。与header元素相同，一个页面可以包含多个footer元素。同时也可以在article元素和section元素中添加footer元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">article</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span>  <br> <span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="三-分组元素"><a href="#三-分组元素" class="headerlink" title="三.分组元素"></a>三.分组元素</h2><h3 id="1-figure元素和figcaption元素"><a href="#1-figure元素和figcaption元素" class="headerlink" title="1.figure元素和figcaption元素"></a>1.figure元素和figcaption元素</h3><p>figure元素用于定义独立的流内容，一般指一个单独的单元。figure元素的内容应该与主内容相关，但如果被删除也不受影响。fig caption元素用于为figure元素组添加标题，一个figure元素内最多允许一个fig caption元素，该元素放在figure元素的第一个或最后一个元素的位置。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">figure</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">figcaption</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>..<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">figcaption</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">figure</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-hgroup元素"><a href="#2-hgroup元素" class="headerlink" title="2.hgroup元素"></a>2.hgroup元素</h3><p>hgroup元素用于定义将多个标题组成一个标题组。通常它与h1~h6元素组合使用。通常，将hgroup元素放在header元素中。</p><h5 id="在使用hgroup元素是要注意以下几点："><a href="#在使用hgroup元素是要注意以下几点：" class="headerlink" title="在使用hgroup元素是要注意以下几点："></a>在使用hgroup元素是要注意以下几点：</h5><p>1.如果只有一个标题元素时不建议使用hgroup元素。</p><p>2.当出现一个或者一个以上标题与元素时，建议使用hgroup元素作为标题元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">hgroup</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">hgroup</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="四-页面交互元素"><a href="#四-页面交互元素" class="headerlink" title="四.页面交互元素"></a>四.页面交互元素</h2><h3 id="1-details元素和summary元素"><a href="#1-details元素和summary元素" class="headerlink" title="1.details元素和summary元素"></a>1.details元素和summary元素</h3><p>details元素用于描述文档或文档某个部分的描述。summary元素经常与details元素配合使用，作为details元素的第一个子元素，用于为details定义标题。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">details</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">summary</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">summary</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">details</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-progress元素"><a href="#2-progress元素" class="headerlink" title="2.progress元素"></a>2.progress元素</h3><p>progress元素用于表示一个任务的完成进度。这个进度可以是不确定的，只是表示进度正在进行，但是不清楚还有多少莫有完成。</p><h5 id="progress元素的常用属性值有两个"><a href="#progress元素的常用属性值有两个" class="headerlink" title="progress元素的常用属性值有两个"></a>progress元素的常用属性值有两个</h5><p>1.value：已经完成的工作量。</p><p>2.max5： 总共有多少工作量。</p><h3 id="3-meter元素"><a href="#3-meter元素" class="headerlink" title="3.meter元素"></a>3.meter元素</h3><p>meter元素用于表示指定范围内的数值。meter元素有多个属性值：</p><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">high</td><td align="center">定义度量的值位于哪个点被界定为高的值</td></tr><tr><td align="center">low</td><td align="center">定义度量的值位于哪个点被界定为低的值</td></tr><tr><td align="center">max</td><td align="center">定义最大值，默认为1</td></tr><tr><td align="center">min</td><td align="center">定义最小值，默认为0</td></tr><tr><td align="center">optimum</td><td align="center">定义什么样的度量值是最佳度量值，如果该值高于high属性，则意味着值越高越好。如果该值低于low属性的值，则意味着越低越好</td></tr><tr><td align="center">value</td><td align="center">定义度量得值</td></tr></tbody></table><h2 id="五-文本层次语义元素"><a href="#五-文本层次语义元素" class="headerlink" title="五.文本层次语义元素"></a>五.文本层次语义元素</h2><h3 id="1-time元素"><a href="#1-time元素" class="headerlink" title="1.time元素"></a>1.time元素</h3><p>time元素用于定义时间或日期，time元素有两个属性：</p><h5 id="1-datetime-用于定义相应的时间或日期。"><a href="#1-datetime-用于定义相应的时间或日期。" class="headerlink" title="1.datetime :用于定义相应的时间或日期。"></a>1.datetime :用于定义相应的时间或日期。</h5><h5 id="2-pubdate：用于定义time元素的日期、时间是发布日期。"><a href="#2-pubdate：用于定义time元素的日期、时间是发布日期。" class="headerlink" title="2.pubdate：用于定义time元素的日期、时间是发布日期。"></a>2.pubdate：用于定义time元素的日期、时间是发布日期。</h5><h3 id="2-mark元素"><a href="#2-mark元素" class="headerlink" title="2.mark元素"></a>2.mark元素</h3><p>mark元素的主要功能是在文本中高亮显示某些字符，易引起用户关注，该元素的用法和em和strong有相似之处，但mark更加灵活。</p><h3 id="3-cite元素"><a href="#3-cite元素" class="headerlink" title="3.cite元素"></a>3.cite元素</h3><p>cite元素可以创建一个引用标记，用于对文档参考文献的引用说明，一旦使用会以斜体展示出来。</p><h2 id="六-全局属性"><a href="#六-全局属性" class="headerlink" title="六.全局属性"></a>六.全局属性</h2><h3 id="1-draggable属性"><a href="#1-draggable属性" class="headerlink" title="1.draggable属性"></a>1.draggable属性</h3><p>drag gable属性用来定义元素是否可以拖动，该属性有两个值：true和false，默认为false，当值为true时表示元素可以拖动。</p><h3 id="2-hidden属性"><a href="#2-hidden属性" class="headerlink" title="2.hidden属性"></a>2.hidden属性</h3><p>该元素有两个属性值：true和false。当hidden属性取值为true时，元素会被隐藏，反之会显示。</p><h3 id="3-spellcheck属性"><a href="#3-spellcheck属性" class="headerlink" title="3.spellcheck属性"></a>3.spellcheck属性</h3><p>spellcheck属性主要针对于input元素和textarea文本输入框，对用户输入的文本内容进行拼写和语法检测。</p><p>他有两个属性值：true和false，当值为true是会检测输入框中的值，反之不检测。</p><h3 id="4-contenteditable属性"><a href="#4-contenteditable属性" class="headerlink" title="4.contenteditable属性"></a>4.contenteditable属性</h3><p>contenteditable属性规定是否可编辑元素的内容，但是前提是该元素必须可以获取鼠标焦点并且其内容不是只读的。给属性也有两个值：true表示可以编辑，false表示不可编辑。</p>]]></content>
      
      
      <categories>
          
          <category> HTML学习 </category>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> 初识HTML5 </tag>
            
            <tag> HTML5页面元素及属性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo添加_Hexo-yilia主题个性化美化及功能添加</title>
      <link href="/2021/06/19/%E5%9F%BA%E4%BA%8EGithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/hexo%E6%B7%BB%E5%8A%A0-Hexo-yilia%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E7%BE%8E%E5%8C%96%E5%8F%8A%E5%8A%9F%E8%83%BD%E6%B7%BB%E5%8A%A0/"/>
      <url>/2021/06/19/%E5%9F%BA%E4%BA%8EGithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/hexo%E6%B7%BB%E5%8A%A0-Hexo-yilia%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E7%BE%8E%E5%8C%96%E5%8F%8A%E5%8A%9F%E8%83%BD%E6%B7%BB%E5%8A%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-显示摘要（而不是全文显示）"><a href="#1-显示摘要（而不是全文显示）" class="headerlink" title="1 显示摘要（而不是全文显示）"></a>1 显示摘要（而不是全文显示）</h2><p>在编辑你的博文的时候在你需要在摘要出显示出来的内容后面插入一行 css</p><span id="more"></span><h2 id="2-优先级配置"><a href="#2-优先级配置" class="headerlink" title="2 优先级配置"></a>2 优先级配置</h2><p>修改根目录配置文件/_config.yml,top值-1标示根据top值倒序（正序设置为1即可），同样date也是根据创建日期倒序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">index_generator:<br>  path: &#x27;&#x27;<br>  per_page: 10<br>  order_by:<br>    top: -1<br>    date: -1<br></code></pre></td></tr></table></figure><h2 id="3-在左侧显示总文章数"><a href="#3-在左侧显示总文章数" class="headerlink" title="3 在左侧显示总文章数"></a>3 在左侧显示总文章数</h2><p>将<em>themesyilialayout_partial</em>left-col.ejs文件的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header-menu&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    &lt;% for (var i in theme.menu)&#123; %&gt;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&lt;%- url_for(theme.menu[i]) %&gt;&quot;</span>&gt;</span>&lt;%= i %&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    &lt;%&#125;%&gt;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br></code></pre></td></tr></table></figure><p>后面加上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;nav&gt;<br>    总文章数 &lt;%=site.posts.length%&gt;<br>&lt;/nav&gt;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> GitHub博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> hexo美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识HTML</title>
      <link href="/2021/06/19/HTML/%E5%88%9D%E8%AF%86HTML/"/>
      <url>/2021/06/19/HTML/%E5%88%9D%E8%AF%86HTML/</url>
      
        <content type="html"><![CDATA[<h2 id="一-HTML5头部相关标记"><a href="#一-HTML5头部相关标记" class="headerlink" title="一.HTML5头部相关标记"></a>一.HTML5头部相关标记</h2><h3 id="1-设置页面标题标记"><a href="#1-设置页面标题标记" class="headerlink" title="1.设置页面标题标记"></a>1.设置页面标题标记</h3><p>在HTML中&lt;!title&gt;标记用于定义html页面的标题，即给网页取一个名字，必须位于&lt;！head&gt;标记之内。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>这是我的第一个网页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   这是我的第一个HTML5页面哦<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><span id="more"></span><h3 id="2-引用外部文件标记"><a href="#2-引用外部文件标记" class="headerlink" title="2.引用外部文件标记"></a>2.引用外部文件标记</h3><p>一个页面往往需要多个外部文件的配合，在&lt;!head&gt;中使用&lt;!link&gt;标记便可实现，一个页面可以使用多个哦。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;strlesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">herf</span>=<span class="hljs-string">&quot;style.css&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-内嵌式标记-lt-！style-gt"><a href="#3-内嵌式标记-lt-！style-gt" class="headerlink" title="3.内嵌式标记&lt;！style&gt;"></a>3.内嵌式标记&lt;！style&gt;</h3><h4 id="位于-lt-head-gt-头部标记中，其基本语法格式为："><a href="#位于-lt-head-gt-头部标记中，其基本语法格式为：" class="headerlink" title="位于&lt;!head&gt;头部标记中，其基本语法格式为："></a>位于&lt;!head&gt;头部标记中，其基本语法格式为：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> 属性=<span class="hljs-string">&quot;属性值&quot;</span>&gt;</span>样式内容<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="二-文本控制标记"><a href="#二-文本控制标记" class="headerlink" title="二.文本控制标记"></a>二.文本控制标记</h1><h3 id="1-标题与段落标记"><a href="#1-标题与段落标记" class="headerlink" title="1.标题与段落标记"></a>1.标题与段落标记<hn></h3><p>为了使页面具有语义化，我们经常在页面中用到标题标记，html提供了6个的等级的标题，即&lt;!h1&gt;,&lt;!h2&gt;,&lt;!h3&gt;,&lt;!h4&gt;,&lt;!h5&gt;,&lt;!h6&gt;,其基本语法格式为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">hn</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;对齐方式&quot;</span> &gt;</span>标题文本<span class="hljs-tag">&lt;/<span class="hljs-name">hn</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-段落标记-lt-p-gt"><a href="#2-段落标记-lt-p-gt" class="headerlink" title="2.段落标记&lt;!p&gt;"></a>2.段落标记&lt;!p&gt;</h3><p>在网页中要把文字有条理的显示出来，离不开段落标记，而段落标记就是&lt;!p&gt;。其基本语法格式为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;对齐方式&quot;</span>&gt;</span>段落文本<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-水平线标记"><a href="#3-水平线标记" class="headerlink" title="3.水平线标记"></a>3.水平线标记<!hr /></h3><p>在网页中常常看到一些水平线将段落与段落隔开，<!hr /> 就是创建横跨网页水平线的标记。其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> 属性=<span class="hljs-string">”属性值/</span>&gt;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">属性名</th><th align="center">含义</th><th align="center">属性值</th></tr></thead><tbody><tr><td align="center">align</td><td align="center">设置水平线的对齐方式</td><td align="center">可选择left,right,center三种值，默认为center，居中对齐</td></tr><tr><td align="center">size</td><td align="center">设置水平线的粗细</td><td align="center">以像素为单位，默认为2像素</td></tr><tr><td align="center">color</td><td align="center">设置水平线的颜色</td><td align="center">可用颜色名称，十六进制#RGB，rgb(r,g,b)</td></tr><tr><td align="center">width</td><td align="center">设置水平线的宽度</td><td align="center">可以是确定的像素值，也可以是浏览器窗口的百分比，默认为100%</td></tr></tbody></table><h3 id="4-文本格式化标记"><a href="#4-文本格式化标记" class="headerlink" title="4.文本格式化标记"></a>4.文本格式化标记</h3><p>在网页中，有时需要为文本设计粗体，斜体或下划线效果，为此HTML准备了专门的文本格式化标记，是文字以特殊的形式展示，常用标记如下表：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html">|            标记            |                        显示效果                         |<br>| :----------------------- : | :-----------------------------------------------------: |<br>| <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>和<span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span> | 文本以粗体方式展示（b定义文本粗体，strong定义强调文本） |<br>|     <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>和<span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span>     |    文字以斜体方式显示（i定义斜体字，em定义强调文本）    |<br>|    <span class="hljs-tag">&lt;<span class="hljs-name">s</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">s</span>&gt;</span>和<span class="hljs-tag">&lt;<span class="hljs-name">del</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">del</span>&gt;</span>    |       文字以加删除线方式显示（HTML5不赞成使用s）        |<br>|    <span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span>和<span class="hljs-tag">&lt;<span class="hljs-name">ins</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ins</span>&gt;</span>    |       文字以加下划线方式显示（HTML5不赞成使用u）        |<br><br>## <br></code></pre></td></tr></table></figure><h2 id="三-图像标记"><a href="#三-图像标记" class="headerlink" title="三 .图像标记"></a>三 .图像标记</h2><h3 id="1-图像标记img"><a href="#1-图像标记img" class="headerlink" title="1.图像标记img"></a>1.图像标记img</h3><p>HTML网页中任何元素的实现都要依靠html标记，要想在网页中显示图像就需要使用图像标记，其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;图像路径&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h4 id="该语法中src属性用于指定图像文件的路径和文件名，它是img的必须属性。"><a href="#该语法中src属性用于指定图像文件的路径和文件名，它是img的必须属性。" class="headerlink" title="该语法中src属性用于指定图像文件的路径和文件名，它是img的必须属性。"></a>该语法中src属性用于指定图像文件的路径和文件名，它是img的必须属性。</h4><table><thead><tr><th align="center">属性</th><th align="center">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">src</td><td align="center">URL</td><td align="center">图像的路径</td></tr><tr><td align="center">alt</td><td align="center">文本</td><td align="center">图像不能显示时的替换文本</td></tr><tr><td align="center">title</td><td align="center">文本</td><td align="center">鼠标悬停时显示的内容</td></tr><tr><td align="center">width</td><td align="center">像素</td><td align="center">设置图像的宽度</td></tr><tr><td align="center">height</td><td align="center">像素</td><td align="center">设置图像的高度</td></tr><tr><td align="center">border</td><td align="center">数字</td><td align="center">设置图像边框的宽度</td></tr><tr><td align="center">vspace</td><td align="center">像素</td><td align="center">设置图像顶部和底部的空白（垂直边距）</td></tr><tr><td align="center">hspace</td><td align="center">像素</td><td align="center">设置图像左侧和右侧的空白（水平边距）</td></tr><tr><td align="center">align</td><td align="center">left</td><td align="center">将图像对齐到左边</td></tr><tr><td align="center"></td><td align="center">right</td><td align="center">将图像对齐到右边</td></tr><tr><td align="center"></td><td align="center">top</td><td align="center">将图像的顶端和文本的第一行文字对齐，其他文字居图 像下方</td></tr><tr><td align="center"></td><td align="center">middle</td><td align="center">将图像的水平中线和文本的第一行文字对齐，其他文字 居图像下方</td></tr><tr><td align="center"></td><td align="center">bottom</td><td align="center">将图像的底部和文本的第一行文字对齐，其他文字居图 像下方</td></tr></tbody></table><h3 id="2-图像的宽度、高度属性width、height"><a href="#2-图像的宽度、高度属性width、height" class="headerlink" title="2.图像的宽度、高度属性width、height"></a>2.图像的宽度、高度属性width、height</h3><p>通常情况下，如果不给img标记设置宽和高，图片就会按照它的原始尺寸显示，当然也可以手动更改图片的大小。width和height属性用来定义图片的宽度和高度，通常我们只设置其中的一个，另一个会按原图等比例显示。如果同时设置两个属性，且其比例和原图大小的比例不一致，显示的图像就会变形或失真。</p><h3 id="3-图像的边框属性-border"><a href="#3-图像的边框属性-border" class="headerlink" title="3.图像的边框属性 border"></a>3.图像的边框属性 border</h3><p>默认情况下图像是没有边框的，通过border属性可以为图像添加边框、设置边框的宽度，但边框颜色的调整仅仅通过HTML属性是不能够实现的。</p><h3 id="4-图像的边距属性vspace-和hspace"><a href="#4-图像的边距属性vspace-和hspace" class="headerlink" title="4.图像的边距属性vspace 和hspace"></a>4.图像的边距属性vspace 和hspace</h3><p>在网页中，由于排版需要，有时候还需要调整图像的边距。HTML 中通过 vspace和 hspace属性可以分别调整图像的垂直边距和水平边</p><h3 id="5-图像的对齐属性align"><a href="#5-图像的对齐属性align" class="headerlink" title="5.图像的对齐属性align"></a>5.图像的对齐属性align</h3><p>图文混排是网页中很常见的效果，默认情况下图像的底部会和相对于文本的第一行文字对齐。但是在制作网页时经常需要实现其他的这就需要使用图像和文字环绕效果。这就需要使用图像的对齐属性align。</p><h2 id="四-超链接标记"><a href="#四-超链接标记" class="headerlink" title="四 .超链接标记"></a>四 .超链接标记</h2><h3 id="1-创建超链接"><a href="#1-创建超链接" class="headerlink" title="1.创建超链接"></a>1.创建超链接</h3><p>超链接虽然在网页中占有不可替代的地位，但是在HTML中创建超链接非常简单，只需要用a标记环绕需要被链接的对象即可，其基本语法格式如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">herf</span>=<span class="hljs-string">&quot;跳转目标&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;目标窗口的弹出方式&quot;</span>&gt;</span>文本或图像<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在上面的语法中，a标记用于定义超链接，href和target为其常用属性，具体解释如下：</p><p>（1）href:用于指定超链接目标的url地址，当为a标记应用href属性时，他就具有了超链接的功能。</p><p>（2）target：用于指定链接页面的打开方式，其取值有_self和_blank两种，其中_self为默认值，意为在原窗口打开，_blank位在新窗口打开。</p>]]></content>
      
      
      <categories>
          
          <category> HTML学习 </category>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> 初识HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客yilia主题创建分类（categories）和标签（tags）首页</title>
      <link href="/2021/06/18/%E5%9F%BA%E4%BA%8EGithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/Hexo%E5%8D%9A%E5%AE%A2yilia%E4%B8%BB%E9%A2%98%E5%88%9B%E5%BB%BA%E5%88%86%E7%B1%BB%EF%BC%88categories%EF%BC%89%E5%92%8C%E6%A0%87%E7%AD%BE%EF%BC%88tags%EF%BC%89%E9%A6%96%E9%A1%B5/"/>
      <url>/2021/06/18/%E5%9F%BA%E4%BA%8EGithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/Hexo%E5%8D%9A%E5%AE%A2yilia%E4%B8%BB%E9%A2%98%E5%88%9B%E5%BB%BA%E5%88%86%E7%B1%BB%EF%BC%88categories%EF%BC%89%E5%92%8C%E6%A0%87%E7%AD%BE%EF%BC%88tags%EF%BC%89%E9%A6%96%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>默认安装的 hexo 本身是没有分类和标签首页的，<br>例如：<code>http://orzcss.com/categories/</code><br>页面打开后，总是显示 <code>Cannot GET /categories/</code><br>尝试了很多方法还是无效。</p><p>找了很多资料，都没有人提供解决方案，更多的是没有答案的问题，也许是这个问题太简单了，没人愿意记录笔记。</p><p>现在告诉大家怎么实现。</p><span id="more"></span><h3 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h3><p>新建一个页面，命名为 ‘categories’ | ‘tags’。命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">hexo new page &quot;categories&quot;hexo new page &quot;tags&quot;<br></code></pre></td></tr></table></figure><h3 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h3><p>编辑刚新建的页面，将页面的类型设置为 categories | tags ，主题将自动为这个页面显示 分类|标签云。页面内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">---title: 分类date: 2016-10-21 11:59:10type: &quot;categories&quot;---<br>---title: 标签date: 2016-10-21 11:59:10type: &quot;tags&quot;---<br></code></pre></td></tr></table></figure><p>注意：如果有启用多说 或者 Disqus 评论，默认页面也会带有评论。需要关闭的话，请添加字段 comments 并将值设置为 false，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">---title: 分类date: 2016-10-21 11:59:10type: &quot;categories&quot;comments: false---<br>---title: 标签date: 2016-10-21 11:59:10type: &quot;tags&quot;comments: false---<br></code></pre></td></tr></table></figure><h3 id="步骤三"><a href="#步骤三" class="headerlink" title="步骤三"></a>步骤三</h3><p>在菜单中添加链接。编辑 <code>yilia/_config.yml</code>（我用的是 yilia 主题），添加 categories | tags 到 menu 中，如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">menu:  home: /  archives: /archives  categories: /categories  tags: /tags<br></code></pre></td></tr></table></figure><h3 id="步骤四-【这一步非常重要-】"><a href="#步骤四-【这一步非常重要-】" class="headerlink" title="步骤四 【这一步非常重要!!!】"></a>步骤四 【这一步非常重要!!!】</h3><p>找到 <code>layout/_partial/article.ejs</code> （我用的是 yilia 主题）</p><p>然后找到 <code>&lt;div class=&quot;article-entry&quot; itemprop=&quot;articleBody&quot;&gt;</code> 这一行</p><p>这个 div 里面的内容全部替换为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;% if (page<span class="hljs-selector-class">.type</span> === &quot;tags&quot;) &#123; %&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;tag-cloud&quot;&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;tag-cloud-title&quot;&gt;<br>&lt;%- _p(&#x27;counter<span class="hljs-selector-class">.tag_cloud</span>&#x27;, site<span class="hljs-selector-class">.tags</span><span class="hljs-selector-class">.length</span>) %&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br><br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;tag-cloud-tags&quot;&gt;<br>&lt;%- tagcloud(&#123;<br>min_font: <span class="hljs-number">12</span>,<br>max_font: <span class="hljs-number">30</span>,<br>amount: <span class="hljs-number">200</span>,<br>color: true,<br>start_color: <span class="hljs-string">&#x27;#ccc&#x27;</span>,<br>end_color: <span class="hljs-string">&#x27;#111&#x27;</span><br>&#125;) %&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br><br>&lt;% &#125; else if (page<span class="hljs-selector-class">.type</span> === &#x27;categories&#x27;) &#123; %&gt;<br><br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;category-all-page&quot;&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;category-all-title&quot;&gt;<br>&lt;%- _p(&#x27;counter<span class="hljs-selector-class">.categories</span>&#x27;, site<span class="hljs-selector-class">.categories</span><span class="hljs-selector-class">.length</span>) %&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br><br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;category-all&quot;&gt;<br>&lt;%- list_categories() %&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br><br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br><br>&lt;% &#125; else &#123; %&gt;<br><br>&lt;% if (post<span class="hljs-selector-class">.excerpt</span> &amp;&amp; index)&#123; %&gt;&lt;%- post<span class="hljs-selector-class">.excerpt</span> %&gt;<br>&lt;% &#125; else &#123; %&gt;<br>&lt;%- post<span class="hljs-selector-class">.content</span> %&gt;<br>&lt;% &#125; %&gt;<br>&lt;% &#125; %&gt;<br></code></pre></td></tr></table></figure><h3 id="步骤五"><a href="#步骤五" class="headerlink" title="步骤五"></a>步骤五</h3><p>修改样式，如果觉得不好看，自己改喜欢的样式</p><p>找到 <code>yilia/source-src/css/article.scss</code> 在最后面添加下面的 css 代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*tag-cloud*/</span><br><span class="hljs-selector-class">.tag-cloud</span> &#123;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">50px</span>;<br>&#125;<br><span class="hljs-selector-class">.tag-cloud</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><span class="hljs-selector-class">.tag-cloud-title</span> &#123;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">700</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">24px</span>;<br>&#125;<br><span class="hljs-selector-class">.tag-cloud-tags</span> &#123;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">15px</span>;<br>  <span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">text-decoration</span>: none;<br>    <span class="hljs-attribute">font-weight</span>: normal;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>    <span class="hljs-attribute">line-height</span>: normal;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span> <span class="hljs-number">5px</span> <span class="hljs-number">5px</span> <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-number">5px</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">font-family</span>: Menlo, Monaco, <span class="hljs-string">&quot;Andale Mono&quot;</span>, <span class="hljs-string">&quot;lucida console&quot;</span>, <span class="hljs-string">&quot;Courier New&quot;</span>, monospace;<br>    &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;<br>      <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.8</span>;<br>    &#125;<br>    &amp;:before &#123;<br>      content: <span class="hljs-string">&quot; &quot;</span>;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">position</span>: absolute;<br>      <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">left</span>: -<span class="hljs-number">18px</span>;<br>      <span class="hljs-attribute">border</span>: <span class="hljs-number">9px</span> solid transparent;<br>    &#125;<br>    &amp;:after &#123;<br>      content: <span class="hljs-string">&quot; &quot;</span>;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">4px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">4px</span>;<br>      <br>      <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br>      <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">3</span>);<br>      <span class="hljs-attribute">position</span>: absolute;<br>      <span class="hljs-attribute">top</span>: <span class="hljs-number">7px</span>;<br>      <span class="hljs-attribute">left</span>: <span class="hljs-number">2px</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.color1</span> &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#FF945C</span>;<br>    &amp;:before &#123;<br>      border-right-color: <span class="hljs-number">#FF945C</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.color2</span> &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#F5C7B7</span>;<br>    &amp;:before &#123;<br>      border-right-color: <span class="hljs-number">#F5C7B7</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.color3</span> &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#BA8F6C</span>;<br>    &amp;:before &#123;<br>      border-right-color: <span class="hljs-number">#BA8F6C</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.color4</span> &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#CFB7C4</span>;<br>    &amp;:before &#123;<br>      border-right-color: <span class="hljs-number">#CFB7C4</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.color5</span> &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#7B5D5F</span>;<br>    &amp;:before &#123;<br>      border-right-color: <span class="hljs-number">#7B5D5F</span>;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/*category-all-page*/</span><br><span class="hljs-selector-class">.category-all-page</span> &#123;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-selector-class">.category-all-title</span> &#123;<br>    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">700</span>;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">24px</span>;<br>    <span class="hljs-attribute">text-align</span>: center;<br>  &#125;<br>  <span class="hljs-selector-class">.category-list-item</span>:after &#123;<br>    content: <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-attribute">clear</span>: both;<br>    <span class="hljs-attribute">display</span>: table;<br>  &#125;<br>  <span class="hljs-selector-class">.category-list-count</span> &#123;<br>    <span class="hljs-attribute">float</span>: right;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">5px</span>;<br>  &#125;<br>  <span class="hljs-selector-class">.category-list-count</span>:before &#123;<br>    content: <span class="hljs-string">&#x27;一共 &#x27;</span>;<br>  &#125;<br>  <span class="hljs-selector-class">.category-list-count</span>:after &#123;<br>    content: <span class="hljs-string">&#x27; 篇文章&#x27;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> GitHub博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 添加分类及标签</title>
      <link href="/2021/06/18/%E5%9F%BA%E4%BA%8EGithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/Hexo-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/"/>
      <url>/2021/06/18/%E5%9F%BA%E4%BA%8EGithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/Hexo-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<h4 id="1-创建“分类”选项"><a href="#1-创建“分类”选项" class="headerlink" title="1. 创建“分类”选项"></a>1. 创建“分类”选项</h4><p>生成“分类”页并添加tpye属性,进入博客目录。执行命令下方命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new page categories<br></code></pre></td></tr></table></figure><p>categories文件夹下会有index.md这个文件，打开后默认内容是这样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">---<br>title: categories<br>date: 2019-04-22 14:47:40<br>---<br></code></pre></td></tr></table></figure><span id="more"></span><p>添加type: “categories”到内容中，添加后是这样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">---<br>title: 分类<br>date: 2019-04-24 15:30:30<br><span class="hljs-built_in">type</span>: categories<br>---<br></code></pre></td></tr></table></figure><p>保存并关闭文件。</p><p>给文章添加“categories”属性</p><p>打开需要添加分类的文章，为其添加categories属性。下方的categories:Hexo表示这篇文章添加到到“Hexo”这个分类。注意：一篇文章只会添加到一个分类中，如果是多个默认放到第一个分类中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">---<br>title: Hexo 添加分类及标签<br>date: 2017-05-26 12:12:57<br>categories: Hexo<br>---<br></code></pre></td></tr></table></figure><p>至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了categories: xxx的文章才会被收录到首页的“分类”中。</p><h4 id="2-创建“标签”选项"><a href="#2-创建“标签”选项" class="headerlink" title="2. 创建“标签”选项"></a>2. 创建“标签”选项</h4><p>生成“标签”页并添加tpye属性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new page tags<br></code></pre></td></tr></table></figure><p>在tags文件夹下，找到index.md这个文件，打开后默认内容是这样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">---<br>title: 标签<br>date: 2019-04-22 14:22:08<br>---<br></code></pre></td></tr></table></figure><p>添加type: “tags”到内容中，添加后是这样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">---<br>title: 标签<br>date: 2019-04-24 15:40:24<br><span class="hljs-built_in">type</span>: tags<br>---<br></code></pre></td></tr></table></figure><p>保存并关闭文件。</p><p>给文章添加“tags”属性,打开需要添加标签的文章，为其添加tags属性。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">---<br>title: Hexo 添加分类及标签<br>date: 2019-04-24 15:40:24<br>categories: <br>   - Hexo<br>tags:<br>   - 博客<br>---<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> GitHub博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js 安装配置</title>
      <link href="/2021/06/18/%E5%9F%BA%E4%BA%8EGithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/Node-js-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
      <url>/2021/06/18/%E5%9F%BA%E4%BA%8EGithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/Node-js-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="Node-js-安装配置"><a href="#Node-js-安装配置" class="headerlink" title="Node.js 安装配置"></a>Node.js 安装配置</h1><p>本安装教程以 Node.js v4.4.3 LTS(长期支持版本)版本为例。</p><p>Node.js 安装包及源码下载地址为：<a href="https://nodejs.org/en/download/%E3%80%82">https://nodejs.org/en/download/。</a></p><span id="more"></span><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/download-page.jpg" alt="nodejs_download"></p><p>你可以根据不同平台系统选择你需要的 Node.js 安装包。</p><p>Node.js 历史版本下载地址：<a href="https://nodejs.org/dist/">https://nodejs.org/dist/</a></p><hr><h2 id="Windows-上安装-Node-js"><a href="#Windows-上安装-Node-js" class="headerlink" title="Windows 上安装 Node.js"></a>Windows 上安装 Node.js</h2><p>你可以采用以下两种方式来安装。</p><h3 id="1、Windows-安装包-msi"><a href="#1、Windows-安装包-msi" class="headerlink" title="1、Windows 安装包(.msi)"></a>1、Windows 安装包(.msi)</h3><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/4530AA77-2208-47FA-A900-91C93AEC95AF.jpg" alt="img"></p><p>本文实例以 v0.10.26 版本为例，其他版本类似， 安装步骤：</p><p>步骤 1 : 双击下载后的安装包 <strong>v0.10.26</strong>，如下所示：</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/install-node-msi-version-on-windows-step1.png" alt="install-node-msi-version-on-windows-step1"></p><p>步骤 2 : 点击以上的Run(运行)，将出现如下界面：</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/install-node-msi-version-on-windows-step2.png" alt="install-node-msi-version-on-windows-step2"></p><p>步骤 3 : 勾选接受协议选项，点击 next（下一步） 按钮 :</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/install-node-msi-version-on-windows-step3.png" alt="install-node-msi-version-on-windows-step3"></p><p>步骤 4 : Node.js默认安装目录为 “C:\Program Files\nodejs&quot; , 你可以修改目录，并点击 next（下一步）：</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/install-node-msi-version-on-windows-step4.png" alt="install-node-msi-version-on-windows-step4"></p><p>步骤 5 : 点击树形图标来选择你需要的安装模式 , 然后点击下一步 next（下一步）</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/install-node-msi-version-on-windows-step5.png" alt="install-node-msi-version-on-windows-step5"></p><p>步骤 6 :点击 Install（安装） 开始安装Node.js。你也可以点击 Back（返回）来修改先前的配置。 然后并点击 next（下一步）：</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/install-node-msi-version-on-windows-step6.png" alt="install-node-msi-version-on-windows-step6"></p><p>安装过程：</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/install-node-msi-version-on-windows-step7.png" alt="install-node-msi-version-on-windows-step7"></p><p>点击 Finish（完成）按钮退出安装向导。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/install-node-msi-version-on-windows-step8.png" alt="install-node-msi-version-on-windows-step8"></p><p>检测PATH环境变量是否配置了Node.js，点击开始=》运行=》输入”cmd” =&gt; 输入命令”path”，输出如下结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">PATH=C:\oraclexe\app\oracle\product\10.2.0\server\bin;C:\Windows\system32;<br>C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;<br>c:\python32\python;C:\MinGW\bin;C:\Program Files\GTK2-Runtime\lib;<br>C:\Program Files\MySQL\MySQL Server 5.5\bin;C:\Program Files\nodejs\;<br>C:\Users\rg\AppData\Roaming\npm<br></code></pre></td></tr></table></figure><p>我们可以看到环境变量中已经包含了C:\Program Files\nodejs\</p><p>检查Node.js版本</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/node-version-test.png" alt="node-version-test"></p><h3 id="2、Windows-二进制文件-exe-安装"><a href="#2、Windows-二进制文件-exe-安装" class="headerlink" title="2、Windows 二进制文件 (.exe)安装"></a>2、Windows 二进制文件 (.exe)安装</h3><p>32 位安装包下载地址 : <a href="http://nodejs.org/dist/v0.10.26/node.exe">http://nodejs.org/dist/v0.10.26/node.exe</a></p><p>64 位安装包下载地址 : <a href="http://nodejs.org/dist/v0.10.26/x64/node.exe">http://nodejs.org/dist/v0.10.26/x64/node.exe</a></p><p><strong>安装步骤</strong></p><p>步骤 1 : 双击下载的安装包 Node.exe ，将出现如下界面 :</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/install-node-exe-on-windows-step1.png" alt="install-node-exe-on-windows-step1"></p><p>点击 Run（运行）按钮将出现命令行窗口：</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/install-node-exe-on-windows-step21.png" alt="install-node-exe-on-windows-step21"></p><h3 id="版本测试"><a href="#版本测试" class="headerlink" title="版本测试"></a>版本测试</h3><p>进入 node.exe 所在的目录，如下所示：</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/node-version.png" alt="node-version"></p><p>如果你获得以上输出结果，说明你已经成功安装了Node.js。</p>]]></content>
      
      
      <categories>
          
          <category> GitHub博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github 生成SSH秘钥（详细教程）</title>
      <link href="/2021/06/18/%E5%9F%BA%E4%BA%8EGithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/Github-%E7%94%9F%E6%88%90SSH%E7%A7%98%E9%92%A5%EF%BC%88%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%EF%BC%89/"/>
      <url>/2021/06/18/%E5%9F%BA%E4%BA%8EGithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/Github-%E7%94%9F%E6%88%90SSH%E7%A7%98%E9%92%A5%EF%BC%88%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>很多朋友在用github管理项目的时候，都是直接使用https url克隆到本地，当然也有有些人使用 SSH url 克隆到本地。然而，为什么绝大多数人会使用https url克隆呢？</p><p>这是因为，使用https url克隆对初学者来说会比较方便，复制https url 然后到 git Bash 里面直接用clone命令克隆到本地就好了。而使用 SSH url 克隆却需要在克隆之前先配置和添加好 SSH key 。</p><p>因此，如果你想要使用 SSH url 克隆的话，你必须是这个项目的拥有者。否则你是无法添加 SSH key 的。</p><span id="more"></span><h3 id="https-和-SSH-的区别："><a href="#https-和-SSH-的区别：" class="headerlink" title="https 和 SSH 的区别："></a>https 和 SSH 的区别：</h3><p>1、前者可以随意克隆github上的项目，而不管是谁的；而后者则是你必须是你要克隆的项目的拥有者或管理员，且需要先添加 SSH key ，否则无法克隆。</p><p>2、https url 在push的时候是需要验证用户名和密码的；而 SSH 在push的时候，是不需要输入用户名的，如果配置SSH key的时候设置了密码，则需要输入密码的，否则直接是不需要输入密码的。</p><h3 id="在-github-上添加-SSH-key-的步骤："><a href="#在-github-上添加-SSH-key-的步骤：" class="headerlink" title="在 github 上添加 SSH key 的步骤："></a>在 github 上添加 SSH key 的步骤：</h3><h5 id="第一步、首先，检查下自己之前有没有已经生成："><a href="#第一步、首先，检查下自己之前有没有已经生成：" class="headerlink" title="第一步、首先，检查下自己之前有没有已经生成："></a>第一步、首先，检查下自己之前有没有已经生成：</h5><p>在开始菜单中打开git下的git bash（当然，在其他目录下打开git bash也是一样的）：<br>然后执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ls -al ~/.ssh <br>1<br></code></pre></td></tr></table></figure><h5 id="第二步、如果能进入到-ssh文件目录下-，则证明，之前生成过-ssh秘钥，可以直接使用里面的秘钥。"><a href="#第二步、如果能进入到-ssh文件目录下-，则证明，之前生成过-ssh秘钥，可以直接使用里面的秘钥。" class="headerlink" title="第二步、如果能进入到.ssh文件目录下 ，则证明，之前生成过.ssh秘钥，可以直接使用里面的秘钥。"></a>第二步、如果能进入到.ssh文件目录下 ，则证明，之前生成过.ssh秘钥，可以直接使用里面的秘钥。</h5><p>如果不能进入到.ssh文件目录下，则：</p><p>检测下自己之前有没有配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config user.name和git config user.email（直接分别输入这两个命令）<br></code></pre></td></tr></table></figure><p>如果之前没有创建，则执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git config –global user.name ‘xxxxx’ <br>git config –global user.email ‘xxx@xx.xxx’<br></code></pre></td></tr></table></figure><p>生成秘钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C ‘上面的邮箱’<br></code></pre></td></tr></table></figure><p>代码参数含义：</p><p>-t 指定密钥类型，默认是 rsa ，可以省略。<br>-C 设置注释文字，比如邮箱。<br>-f 指定密钥文件存储文件名。</p><p>接着按3个回车</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[root@localhost ~]# ssh-keygen -t rsa       &lt;== 建立密钥对，-t代表类型，有RSA和DSA两种<br>Generating public/private rsa key pair.<br>Enter file in which to save the key (/root/.ssh/id_rsa):   &lt;==密钥文件默认存放位置，按Enter即可<br>Created directory &#x27;/root/.ssh&#x27;.<br>Enter passphrase (empty for no passphrase):     &lt;== 输入密钥锁码，或直接按 Enter 留空<br>Enter same passphrase again:     &lt;== 再输入一遍密钥锁码<br>Your identification has been saved in /root/.ssh/id_rsa.    &lt;== 生成的私钥<br>Your public key has been saved in /root/.ssh/id_rsa.pub.    &lt;== 生成的公钥<br>The key fingerprint is:<br>SHA256:K1qy928tkk1FUuzQtlZK+poeS67vIgPvHw9lQ+KNuZ4 root@localhost.localdomain<br>The key&#x27;s randomart image is:<br>+---[RSA 2048]----+<br>|           +.    |<br>|          o * .  |<br>|        . .O +   |<br>|       . *. *    |<br>|        S =+     |<br>|    .    =...    |<br>|    .oo =+o+     |<br>|     ==o+B*o.    |<br>|    oo.=EXO.     |<br>+----[SHA256]-----+<br><br>1234567891011121314151617181920212223<br></code></pre></td></tr></table></figure><p>最后在.ssh目录下(C盘用户文件夹下)得到了两个文件：id_rsa（私有秘钥）和id_rsa.pub（公有密钥）</p><h5 id="第三步、如果想登陆远端，则需要将rsa-pub里的秘钥添加到远端。"><a href="#第三步、如果想登陆远端，则需要将rsa-pub里的秘钥添加到远端。" class="headerlink" title="第三步、如果想登陆远端，则需要将rsa.pub里的秘钥添加到远端。"></a>第三步、如果想登陆远端，则需要将rsa.pub里的秘钥添加到远端。</h5><p>首先，去.ssh目录下找到id_rsa.pub这个文件夹打开复制全部内容。</p><p>接着：</p><p>1.登录GitHub，进入你的Settings</p><p>2.会看到左边这些目录，点击SSH and GPG keys</p><p>3.创建New SSH key</p><p>4.粘贴你的密钥到你key输入框中</p><p>5.点击Add SSH key</p><p>6.再弹出窗口，输入你的GitHub密码，点击确认按钮。</p><p>7.到此，就大功告成了</p>]]></content>
      
      
      <categories>
          
          <category> GitHub博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超详细Git 安装教程(Windows)</title>
      <link href="/2021/06/18/%E5%9F%BA%E4%BA%8EGithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/%E8%B6%85%E8%AF%A6%E7%BB%86Git-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-Windows/"/>
      <url>/2021/06/18/%E5%9F%BA%E4%BA%8EGithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/%E8%B6%85%E8%AF%A6%E7%BB%86Git-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-Windows/</url>
      
        <content type="html"><![CDATA[<h2 id="获取Git安装程序"><a href="#获取Git安装程序" class="headerlink" title="获取Git安装程序"></a>获取Git安装程序</h2><p>​     因为我们是用Windows系统上的浏览器访问的，Git官网自动之别到了我使用的操作系统，所以右侧直接显示下载使用Windows系统的最新版本（如果识别错误，可以在中间选择系统），点击即可下载。我下载的是 2.24.0 for Windows，文件名称是“Git-2.24.0.2-64-bit.exe”。下载到电脑上之后，鼠标双击这个文件即可进入安装过程。</p><h2 id="Git安装过程"><a href="#Git安装过程" class="headerlink" title="Git安装过程"></a>Git安装过程</h2><span id="more"></span><p>  双击看到的第一个界面如下图：</p><h3 id="01、使用许可声明"><a href="#01、使用许可声明" class="headerlink" title="01、使用许可声明"></a>01、使用许可声明</h3><p><img src="https://img2018.cnblogs.com/blog/1705204/201911/1705204-20191122204232299-204159875.png" alt="img"></p><p>  点击“Next”进入下图页面：</p><h3 id="02、选择安装路径"><a href="#02、选择安装路径" class="headerlink" title="02、选择安装路径"></a>02、选择安装路径</h3><p><img src="https://img2018.cnblogs.com/blog/1705204/201911/1705204-20191122204308314-72109490.png" alt="img"></p><p>  在输入框内输入想要安装到的本机路径，也就是实际文件夹位置，或点击“Browse…”选择已经存在的文件夹，然后点击“Next”按钮继续，进入下图界面：</p><h3 id="03、选择安装组件"><a href="#03、选择安装组件" class="headerlink" title="03、选择安装组件"></a>03、选择安装组件</h3><p><img src="https://img2018.cnblogs.com/blog/1705204/201911/1705204-20191122204329670-706153120.png" alt="img"></p><p>  上图红框内的选项是默认勾选的，建议不要动。绿色框1是决定是否在桌面创建快捷方式的。绿色框2是决定在所有控制台窗口中使用TrueType字体和是否每天检查Git是否有Windows更新的。这些根据自己需要选择。</p><p>  点击“Next”按钮进入下图界面：</p><h3 id="04、选择开始菜单页"><a href="#04、选择开始菜单页" class="headerlink" title="04、选择开始菜单页"></a>04、选择开始菜单页</h3><p><img src="https://img2018.cnblogs.com/blog/1705204/201911/1705204-20191122204353612-2069291501.png" alt="img"></p><p>  这个界面是创建开始菜单中的名称，不需要修改，直接点“Next”按钮继续到下图的界面：</p><h3 id="05、选择Git文件默认的编辑器"><a href="#05、选择Git文件默认的编辑器" class="headerlink" title="05、选择Git文件默认的编辑器"></a>05、选择Git文件默认的编辑器</h3><p><img src="https://img2018.cnblogs.com/blog/1705204/201911/1705204-20191122204411243-1420181946.png" alt="img"></p><p>  这个页面是在选择Git文件默认的编辑器，很少用到，所以默认Vim即可，直接点“Next”按钮继续到下图的界面：</p><h3 id="06、调整您的PATH环境"><a href="#06、调整您的PATH环境" class="headerlink" title="06、调整您的PATH环境"></a>06、调整您的PATH环境</h3><p><img src="https://img2018.cnblogs.com/blog/1705204/201911/1705204-20191122204433985-925145764.png" alt="img"></p><p>  这个界面是调整您的PATH环境。</p><p>  第一种配置是“仅从Git Bash使用Git”。这是最安全的选择，因为您的PATH根本不会被修改。您只能使用 Git Bash 的 Git 命令行工具。但是这将不能通过第三方软件使用。</p><p>  第二种配置是“从命令行以及第三方软件进行Git”。该选项被认为是安全的，因为它仅向PATH添加了一些最小的Git包装器，以避免使用可选的Unix工具造成环境混乱。<br>您将能够从Git Bash，命令提示符和Windows PowerShell以及在PATH中寻找Git的任何第三方软件中使用Git。这也是推荐的选项。</p><p>  第三种配置是“从命令提示符使用Git和可选的Unix工具”。警告：这将覆盖Windows工具，如 “ find 和 sort ”。只有在了解其含义后才使用此选项。</p><p>  我选择推荐的选项第二种配置，点击“Next”按钮继续到下图的界面：</p><h3 id="07、选择HTTPS后端传输"><a href="#07、选择HTTPS后端传输" class="headerlink" title="07、选择HTTPS后端传输"></a>07、选择HTTPS后端传输</h3><p><img src="https://img2018.cnblogs.com/blog/1705204/201911/1705204-20191122204458869-580118165.png" alt="img"></p><p>  这个界面是选择HTTPS后端传输。</p><p>  第一个选项是“使用 OpenSSL 库”。服务器证书将使用ca-bundle.crt文件进行验证。这也是我们常用的选项。</p><p>  第二个选项是“使用本地 Windows 安全通道库”。服务器证书将使用Windows证书存储验证。此选项还允许您使用公司的内部根CA证书，例如通过Active Directory Domain Services 。</p><p>  我使用默认选项第一项，点击“Next”按钮继续到下图的界面：</p><h3 id="08、配置行尾符号转换"><a href="#08、配置行尾符号转换" class="headerlink" title="08、配置行尾符号转换"></a>08、配置行尾符号转换</h3><p><img src="https://img2018.cnblogs.com/blog/1705204/201911/1705204-20191122204518715-826904755.png" alt="img"></p><p>  这个界面是配置行尾符号转换。</p><p>  第一个选项是“签出Windows风格，提交Unix风格的行尾”。签出文本文件时，Git会将LF转换为CRLF。提交文本文件时，CRLF将转换为LF。对于跨平台项目，这是Windows上的推荐设置（“ core.autocrlf”设置为“ true”）</p><p>  第二个选项是“按原样签出，提交Unix样式的行尾”。签出文本文件时，Git不会执行任何转换。 提交文本文件时，CRLF将转换为LF。对于跨平台项目，这是Unix上的建议设置（“ core.autocrlf”设置为“ input”）</p><p>  第三种选项是“按原样签出，按原样提交”。当签出或提交文本文件时，Git不会执行任何转换。不建议跨平台项目选择此选项（“ core.autocrlf”设置为“ false”）</p><p>  我选择第一种选项，点击“Next”按钮继续到下图的界面：</p><h3 id="09、配置终端模拟器以与Git-Bash一起使用"><a href="#09、配置终端模拟器以与Git-Bash一起使用" class="headerlink" title="09、配置终端模拟器以与Git Bash一起使用"></a>09、配置终端模拟器以与Git Bash一起使用</h3><p><img src="https://img2018.cnblogs.com/blog/1705204/201911/1705204-20191122204538172-1419125919.png" alt="img"></p><p>  这个界面是配置终端模拟器以与Git Bash一起使用。</p><p>  第一个选项是“使用MinTTY（MSYS2的默认终端）”。Git Bash将使用MinTTY作为终端模拟器，该模拟器具有可调整大小的窗口，非矩形选择和Unicode字体。Windows控制台程序（例如交互式Python）必须通过“ winpty”启动才能在MinTTY中运行。</p><p>  第二个选项是“使用Windows的默认控制台窗口”。Git将使用Windows的默认控制台窗口（“cmd.exe”），该窗口可以与Win32控制台程序（如交互式Python或node.js）一起使用，但默认的回滚非常有限，需要配置为使用unicode 字体以正确显示非ASCII字符，并且在Windows 10之前，其窗口不能自由调整大小，并且只允许矩形文本选择。</p><p>  我选择默认的第一种选项，点击“Next”按钮继续到下图的界面：</p><h3 id="10、配置配置额外的选项"><a href="#10、配置配置额外的选项" class="headerlink" title="10、配置配置额外的选项"></a>10、配置配置额外的选项</h3><p><img src="https://img2018.cnblogs.com/blog/1705204/201911/1705204-20191122204555648-377025701.png" alt="img"></p><p>  这个界面是配置配置额外的选项。</p><p>  第一个选项是“启用文件系统缓存”。文件系统数据将被批量读取并缓存在内存中用于某些操作（“core.fscache”设置为“true”）。 这提供了显著的性能提升。</p><p>  第二个选项是“启用Git凭证管理器”。Windows的Git凭证管理器为Windows提供安全的Git凭证存储，最显着的是对Visual Studio Team Services和GitHub的多因素身份验证支持。 （需要.NET Framework v4.5.1或更高版本）。</p><p>  第三个选项是“启用符号链接”。启用符号链接（需要SeCreateSymbolicLink权限）。请注意，现有存储库不受此设置的影响。</p><p>  我勾选默认的第一、第二选项，点击“Next”按钮继续到下图的界面：</p><h3 id="11、配置实验选项"><a href="#11、配置实验选项" class="headerlink" title="11、配置实验选项"></a>11、配置实验选项</h3><p><img src="https://img2018.cnblogs.com/blog/1705204/201911/1705204-20191122204613254-471895252.png" alt="img"></p><p>  这个界面是配置实验选项。</p><p>  启用实验性的内置添加 -i / -p。（新！）使用实验性的内置交互式add（“ git add -i”或“ git add -p”）。这使其速度更快（尤其是启动！），但尚未被认为是可靠的。</p><p>  默认不勾选，直接点击“Next”按钮继续到下图的安装进度界面：</p><h3 id="12、安装进度指示"><a href="#12、安装进度指示" class="headerlink" title="12、安装进度指示"></a>12、安装进度指示</h3><p><img src="https://img2018.cnblogs.com/blog/1705204/201911/1705204-20191122204628579-893075884.png" alt="img"></p><p>  安装进度结束之后，会出现下图的完成Git安装向导界面：</p><h3 id="13、安装完成"><a href="#13、安装完成" class="headerlink" title="13、安装完成"></a>13、安装完成</h3><p><img src="https://img2018.cnblogs.com/blog/1705204/201911/1705204-20191122204646011-1456464008.png" alt="img"></p><p>  在这个界面，可以勾选是否启动启动Git Bash和是否查看发行说明，然后点“Finish”按钮退出安装界面。</p><h3 id="14、启动测试"><a href="#14、启动测试" class="headerlink" title="14、启动测试"></a>14、启动测试</h3><p>  到此，Git的安装完成，可以在开始菜单中看到Git的三个启动图标（Git Bash、Git CMD(Deprecated)、Git GUI）。</p><p>  Git Bash，是Git配套的一个控制台，点击打开如下图：<br><img src="https://img2018.cnblogs.com/blog/1705204/201911/1705204-20191122204712215-2131846814.png" alt="img"></p><p>  Git CMD(Deprecated)，是通过CMD使用Git（不推荐使用），点击打开如下图：<br><img src="https://img2018.cnblogs.com/blog/1705204/201911/1705204-20191122204739140-284429455.png" alt="img"></p><p>  Git GUI，是Git的可视化操作工具，点击打开如下图：<br><img src="https://img2018.cnblogs.com/blog/1705204/201911/1705204-20191122204759366-1877881765.png" alt="img"></p><p>  关于Git的安装过程就介绍到这里。</p>]]></content>
      
      
      <categories>
          
          <category> GitHub博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github博客搭建</title>
      <link href="/2021/06/17/%E5%9F%BA%E4%BA%8EGithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2021/06/17/%E5%9F%BA%E4%BA%8EGithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="———"><a href="#———" class="headerlink" title="———"></a>———</h3><h1 id="今天给大家分享一件产品，便是基于GitHub的托管功能开发的博客平台，"><a href="#今天给大家分享一件产品，便是基于GitHub的托管功能开发的博客平台，" class="headerlink" title="今天给大家分享一件产品，便是基于GitHub的托管功能开发的博客平台，"></a>今天给大家分享一件产品，便是基于GitHub的托管功能开发的博客平台，</h1><p>要使用Hexo，需要在你的系统中支持Nodejs以及Git，如果还没有，那就开始安装吧！</p><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>下载地址：<a href="https://nodejs.org/zh-cn/">Node.js</a><br> 参考地址：[安装Node.js](<a href="https://huhuhai.github.io/2021/06/18/Node-js-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/">Node.js 安装配置 | Hexo (huhuhai.github.io)</a>)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v<span class="hljs-comment">#查看node版本</span><br>npm -v<span class="hljs-comment">#查看npm版本</span><br></code></pre></td></tr></table></figure><span id="more"></span><h4 id="因为npm速度较慢，为此我们下载淘宝影像cnpm"><a href="#因为npm速度较慢，为此我们下载淘宝影像cnpm" class="headerlink" title="因为npm速度较慢，为此我们下载淘宝影像cnpm"></a>因为npm速度较慢，为此我们下载淘宝影像cnpm</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g cnpm --registry=http://registry.npm.taobao.org<span class="hljs-comment">#安装淘宝的cnpm 管理器</span><br>cnpm -v<span class="hljs-comment">#查看cnpm版本</span><br>cnpm install -g hexo-cli    <span class="hljs-comment">#安装hexo框架</span><br><br></code></pre></td></tr></table></figure><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>下载地址：<a href="https://git-scm.com/">git</a></p><p>安装详情：<a href="https://huhuhai.github.io/2021/06/18/%E8%B6%85%E8%AF%A6%E7%BB%86Git-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-Windows/">git安装</a></p><p>详细配置：<a href="https://huhuhai.github.io/2021/06/18/Github-%E7%94%9F%E6%88%90SSH%E7%A7%98%E9%92%A5%EF%BC%88%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%EF%BC%89/">git配置</a></p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> d:/hexo<br>$ npm install hexo-cli -g<br>$ hexo init blog<br>$ <span class="hljs-built_in">cd</span> blog<br>$ npm install<br>$ hexo g <span class="hljs-comment"># 或者hexo generate</span><br>$ hexo s <span class="hljs-comment"># 或者hexo server，可以在http://localhost:4000/ 查看</span><br></code></pre></td></tr></table></figure><p>这里有必要提下Hexo常用的几个命令：</p><ol><li>hexo generate (hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹</li><li>hexo server (hexo s) 启动本地web服务，用于博客的预览</li><li>hexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台）</li></ol><p>另外还有其他几个常用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo n <span class="hljs-string">&quot;postName&quot;</span> <span class="hljs-comment">#新建文章</span><br>$ hexo new page <span class="hljs-string">&quot;pageName&quot;</span> <span class="hljs-comment">#新建页面</span><br></code></pre></td></tr></table></figure><p>常用简写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo n == hexo new<br>$ hexo g == hexo generate<br>$ hexo s == hexo server<br>$ hexo d == hexo deploy<br>$ hexo clean <span class="hljs-comment">#清理</span><br></code></pre></td></tr></table></figure><p>常用组合</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo d -g <span class="hljs-comment">#生成部署</span><br>$ hexo s -g <span class="hljs-comment">#生成预览</span><br></code></pre></td></tr></table></figure><p>生成博客 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo init <span class="hljs-comment">#生成博客 初始化博客</span><br></code></pre></td></tr></table></figure><p>创建blog目录并进入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ mkdir blog<span class="hljs-comment">#创建blog目录</span><br>$ <span class="hljs-built_in">cd</span> blog <span class="hljs-comment">#进入blog目录</span><br></code></pre></td></tr></table></figure><p>现在我们打开<a href="https://link.jianshu.com/?t=http://localhost:4000/">http://localhost:4000/</a> 已经可以看到一篇内置的blog了。</p><h2 id="Hexo主题设置"><a href="#Hexo主题设置" class="headerlink" title="Hexo主题设置"></a>Hexo主题设置</h2><p>这里以主题yilia为例进行说明。</p><h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean<br>$ git <span class="hljs-built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia<br></code></pre></td></tr></table></figure><h2 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h2><p>修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为yilia。</p><h2 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> themes/yilia<br>$ git pull<br>$ hexo g <span class="hljs-comment"># 生成</span><br>$ hexo s <span class="hljs-comment"># 启动本地web服务器</span><br></code></pre></td></tr></table></figure><p>现在打开<a href="https://link.jianshu.com/?t=http://localhost:4000/">http://localhost:4000/</a> ，会看到我们已经应用了一个新的主题。</p><h1 id="Github-Pages设置"><a href="#Github-Pages设置" class="headerlink" title="Github Pages设置"></a>Github Pages设置</h1><h2 id="什么是Github-Pages"><a href="#什么是Github-Pages" class="headerlink" title="什么是Github Pages"></a>什么是Github Pages</h2><p><a href="https://link.jianshu.com/?t=https://pages.github.com/">GitHub Pages</a> 本用于介绍托管在GitHub的项目，不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。</p><p>每个帐号只能有一个仓库来存放个人主页，而且仓库的名字必须是username/<a href="https://link.jianshu.com/?t=http://username.github.io">username.github.io</a>，这是特殊的命名约定。你可以通过<a href="https://link.jianshu.com/?t=http://username.github.io">http://username.github.io</a> 来访问你的个人主页。</p><p>这里特别提醒一下，需要注意的个人主页的网站内容是在master分支下的。</p><h2 id="创建自己的Github-Pages"><a href="#创建自己的Github-Pages" class="headerlink" title="创建自己的Github Pages"></a>创建自己的Github Pages</h2><p>注册GitHub及使用Github Pages的过程已经有很多文章讲过，在此不再详述，可以参考：</p><p><a href="https://link.jianshu.com/?t=http://pchou.info/web-build/2013/01/03/build-github-blog-page-01.html">一步步在GitHub上创建博客主页 全系列</a></p><p><a href="https://www.jianshu.com/p/05289a4bc8b2">如何搭建一个独立博客——简明Github Pages与Hexo教程</a></p><p>在这里我创建了一个github repo叫做 <a href="https://link.jianshu.com/?t=https://github.com/jiji262/jiji262.github.io">jiji262.github.io</a>. 创建完成之后，需要有一次提交(git commit)操作，然后就可以通过链接<a href="https://link.jianshu.com/?t=http://jiji262.github.io/">http://jiji262.github.io/</a> 访问了。（现在还没有内容，别着急）</p><h1 id="部署Hexo到Github-Pages"><a href="#部署Hexo到Github-Pages" class="headerlink" title="部署Hexo到Github Pages"></a>部署Hexo到Github Pages</h1><p>这一步恐怕是最关键的一步了，让我们把在本地web环境下预览到的博客部署到github上，然后就可以直接通过<a href="https://link.jianshu.com/?t=http://jiji262.github.io/">http://jiji262.github.io/</a>访问了。不过很多教程文章对这个步骤语焉不详，这里着重说下。</p><p>首先需要明白所谓部署到github的原理。</p><ol><li>之前步骤中在Github上创建的那个特别的repo（<a href="https://link.jianshu.com/?t=http://jiji262.github.io">jiji262.github.io</a>）一个最大的特点就是其master中的html静态文件，可以通过链接<a href="https://link.jianshu.com/?t=http://jiji262.github.io">http://jiji262.github.io</a>来直接访问。</li><li>Hexo -g 会生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问。</li><li>需要将hexo生成的静态网站，提交(git commit)到github上。</li></ol><p>明白了原理，怎么做自然就清晰了。</p><h2 id="Github创建一个新的仓库-YourGithubName-github-io"><a href="#Github创建一个新的仓库-YourGithubName-github-io" class="headerlink" title="Github创建一个新的仓库 YourGithubName.github.io"></a>Github创建一个新的仓库 YourGithubName.github.io</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ cnpm install --save hexo-deployer-git <span class="hljs-comment">#在blog目录下安装git部署插件</span><br></code></pre></td></tr></table></figure><h2 id="使用hexo-deploy部署"><a href="#使用hexo-deploy部署" class="headerlink" title="使用hexo deploy部署"></a>使用hexo deploy部署</h2><p>hexo deploy可以部署到很多平台，具体可以<a href="https://link.jianshu.com/?t=https://hexo.io/docs/deployment.html">参考这个链接</a>. 如果部署到github，需要在配置文件_config.xml中作如下修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tsx">deploy:<br>  type: git<br>  repo: git@github.com:jiji262/jiji262.github.io.git<br>  branch: master<br></code></pre></td></tr></table></figure><p>然后在命令行中执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$ hexo d<br></code></pre></td></tr></table></figure><h1 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs bash">---<span class="hljs-comment">#安装Nodejs</span><br>node -v<span class="hljs-comment">#查看node版本</span><br>npm -v<span class="hljs-comment">#查看npm版本</span><br>npm install -g cnpm --registry=http://registry.npm.taobao.org<span class="hljs-comment">#安装淘宝的cnpm 管理器</span><br>cnpm -v<span class="hljs-comment">#查看cnpm版本</span><br>cnpm install -g hexo-cli    <span class="hljs-comment">#安装hexo框架</span><br>hexo -v<span class="hljs-comment">#查看hexo版本</span><br>mkdir blog<span class="hljs-comment">#创建blog目录</span><br><span class="hljs-built_in">cd</span> blog <span class="hljs-comment">#进入blog目录</span><br>sudo hexo init <span class="hljs-comment">#生成博客 初始化博客</span><br>hexo s<span class="hljs-comment">#启动本地博客服务</span><br>http://localhost:4000/<span class="hljs-comment">#本地访问地址</span><br>hexo n 我的第一篇文章 <span class="hljs-comment">#创建新的文章 </span><br><span class="hljs-comment">#返回blog目录</span><br>hexo clean <span class="hljs-comment">#清理</span><br>hexo g <span class="hljs-comment">#生成</span><br><span class="hljs-comment">#Github创建一个新的仓库 YourGithubName.github.io</span><br>cnpm install --save hexo-deployer-git <span class="hljs-comment">#在blog目录下安装git部署插件</span><br>----<br><span class="hljs-comment">#配置_config.yml </span><br>-----<br><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/deployment.html</span><br>deploy:<br>  <span class="hljs-built_in">type</span>: git<br> repo: https://github.com/YourGithubName/YourGithubName.github.io.git<br>  branch: master<br>-----<br>hexo d<span class="hljs-comment">#部署到Github仓库里</span><br>https://YourGithubName.github.io/  <span class="hljs-comment">#访问这个地址可以查看博客</span><br><br> git <span class="hljs-built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia  <span class="hljs-comment">#下载yilia主题到本地</span><br><br><span class="hljs-comment">#修改hexo根目录下的 _config.yml 文件 ： theme: yilia</span><br><br>hexo c<span class="hljs-comment">#清理一下</span><br>hexo g<span class="hljs-comment">#生成</span><br>hexo d<span class="hljs-comment">#部署到远程Github仓库</span><br>https://YourGithubName.github.io/  <span class="hljs-comment">#查看博客</span><br></code></pre></td></tr></table></figure><p>即可完成部署。</p>]]></content>
      
      
      <categories>
          
          <category> GitHub博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
